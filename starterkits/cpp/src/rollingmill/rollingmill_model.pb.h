// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rollingmill_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rollingmill_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rollingmill_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rollingmill_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rollingmill_5fmodel_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rollingmill_5fmodel_2eproto;
namespace DynStacking {
namespace RollingMill {
namespace DataModel {
class Arrival;
struct ArrivalDefaultTypeInternal;
extern ArrivalDefaultTypeInternal _Arrival_default_instance_;
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Crane;
struct CraneDefaultTypeInternal;
extern CraneDefaultTypeInternal _Crane_default_instance_;
class CraneMove;
struct CraneMoveDefaultTypeInternal;
extern CraneMoveDefaultTypeInternal _CraneMove_default_instance_;
class CraneSchedule;
struct CraneScheduleDefaultTypeInternal;
extern CraneScheduleDefaultTypeInternal _CraneSchedule_default_instance_;
class CraneScheduleActivity;
struct CraneScheduleActivityDefaultTypeInternal;
extern CraneScheduleActivityDefaultTypeInternal _CraneScheduleActivity_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class MoveRequest;
struct MoveRequestDefaultTypeInternal;
extern MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
class Performance;
struct PerformanceDefaultTypeInternal;
extern PerformanceDefaultTypeInternal _Performance_default_instance_;
class PlannedCraneMoves;
struct PlannedCraneMovesDefaultTypeInternal;
extern PlannedCraneMovesDefaultTypeInternal _PlannedCraneMoves_default_instance_;
class Stack;
struct StackDefaultTypeInternal;
extern StackDefaultTypeInternal _Stack_default_instance_;
class TimeStamp;
struct TimeStampDefaultTypeInternal;
extern TimeStampDefaultTypeInternal _TimeStamp_default_instance_;
class Uncertainties;
struct UncertaintiesDefaultTypeInternal;
extern UncertaintiesDefaultTypeInternal _Uncertainties_default_instance_;
class World;
struct WorldDefaultTypeInternal;
extern WorldDefaultTypeInternal _World_default_instance_;
}  // namespace DataModel
}  // namespace RollingMill
}  // namespace DynStacking
PROTOBUF_NAMESPACE_OPEN
template<> ::DynStacking::RollingMill::DataModel::Arrival* Arena::CreateMaybeMessage<::DynStacking::RollingMill::DataModel::Arrival>(Arena*);
template<> ::DynStacking::RollingMill::DataModel::Block* Arena::CreateMaybeMessage<::DynStacking::RollingMill::DataModel::Block>(Arena*);
template<> ::DynStacking::RollingMill::DataModel::Crane* Arena::CreateMaybeMessage<::DynStacking::RollingMill::DataModel::Crane>(Arena*);
template<> ::DynStacking::RollingMill::DataModel::CraneMove* Arena::CreateMaybeMessage<::DynStacking::RollingMill::DataModel::CraneMove>(Arena*);
template<> ::DynStacking::RollingMill::DataModel::CraneSchedule* Arena::CreateMaybeMessage<::DynStacking::RollingMill::DataModel::CraneSchedule>(Arena*);
template<> ::DynStacking::RollingMill::DataModel::CraneScheduleActivity* Arena::CreateMaybeMessage<::DynStacking::RollingMill::DataModel::CraneScheduleActivity>(Arena*);
template<> ::DynStacking::RollingMill::DataModel::Location* Arena::CreateMaybeMessage<::DynStacking::RollingMill::DataModel::Location>(Arena*);
template<> ::DynStacking::RollingMill::DataModel::MoveRequest* Arena::CreateMaybeMessage<::DynStacking::RollingMill::DataModel::MoveRequest>(Arena*);
template<> ::DynStacking::RollingMill::DataModel::Performance* Arena::CreateMaybeMessage<::DynStacking::RollingMill::DataModel::Performance>(Arena*);
template<> ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* Arena::CreateMaybeMessage<::DynStacking::RollingMill::DataModel::PlannedCraneMoves>(Arena*);
template<> ::DynStacking::RollingMill::DataModel::Stack* Arena::CreateMaybeMessage<::DynStacking::RollingMill::DataModel::Stack>(Arena*);
template<> ::DynStacking::RollingMill::DataModel::TimeStamp* Arena::CreateMaybeMessage<::DynStacking::RollingMill::DataModel::TimeStamp>(Arena*);
template<> ::DynStacking::RollingMill::DataModel::Uncertainties* Arena::CreateMaybeMessage<::DynStacking::RollingMill::DataModel::Uncertainties>(Arena*);
template<> ::DynStacking::RollingMill::DataModel::World* Arena::CreateMaybeMessage<::DynStacking::RollingMill::DataModel::World>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DynStacking {
namespace RollingMill {
namespace DataModel {

enum CraneScheduleActivityState : int {
  Created = 0,
  Activatable = 1,
  Active = 2,
  CraneScheduleActivityState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CraneScheduleActivityState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CraneScheduleActivityState_IsValid(int value);
constexpr CraneScheduleActivityState CraneScheduleActivityState_MIN = Created;
constexpr CraneScheduleActivityState CraneScheduleActivityState_MAX = Active;
constexpr int CraneScheduleActivityState_ARRAYSIZE = CraneScheduleActivityState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CraneScheduleActivityState_descriptor();
template<typename T>
inline const std::string& CraneScheduleActivityState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CraneScheduleActivityState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CraneScheduleActivityState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CraneScheduleActivityState_descriptor(), enum_t_value);
}
inline bool CraneScheduleActivityState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CraneScheduleActivityState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CraneScheduleActivityState>(
    CraneScheduleActivityState_descriptor(), name, value);
}
enum MillTypes : int {
  A = 0,
  B = 1,
  MillTypes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MillTypes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MillTypes_IsValid(int value);
constexpr MillTypes MillTypes_MIN = A;
constexpr MillTypes MillTypes_MAX = B;
constexpr int MillTypes_ARRAYSIZE = MillTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MillTypes_descriptor();
template<typename T>
inline const std::string& MillTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MillTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MillTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MillTypes_descriptor(), enum_t_value);
}
inline bool MillTypes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MillTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MillTypes>(
    MillTypes_descriptor(), name, value);
}
enum MoveType : int {
  MoveToPickup = 0,
  PickupAndDropoff = 1,
  MoveType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MoveType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MoveType_IsValid(int value);
constexpr MoveType MoveType_MIN = MoveToPickup;
constexpr MoveType MoveType_MAX = PickupAndDropoff;
constexpr int MoveType_ARRAYSIZE = MoveType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveType_descriptor();
template<typename T>
inline const std::string& MoveType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MoveType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MoveType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MoveType_descriptor(), enum_t_value);
}
inline bool MoveType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MoveType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MoveType>(
    MoveType_descriptor(), name, value);
}
enum StackTypes : int {
  ArrivalStack = 0,
  ShuffleBuffer = 1,
  SortedBuffer = 2,
  HandoverStack = 3,
  StackTypes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StackTypes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StackTypes_IsValid(int value);
constexpr StackTypes StackTypes_MIN = ArrivalStack;
constexpr StackTypes StackTypes_MAX = HandoverStack;
constexpr int StackTypes_ARRAYSIZE = StackTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StackTypes_descriptor();
template<typename T>
inline const std::string& StackTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StackTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StackTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StackTypes_descriptor(), enum_t_value);
}
inline bool StackTypes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StackTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StackTypes>(
    StackTypes_descriptor(), name, value);
}
// ===================================================================

class Arrival final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.RollingMill.DataModel.Arrival) */ {
 public:
  inline Arrival() : Arrival(nullptr) {}
  ~Arrival() override;
  explicit PROTOBUF_CONSTEXPR Arrival(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Arrival(const Arrival& from);
  Arrival(Arrival&& from) noexcept
    : Arrival() {
    *this = ::std::move(from);
  }

  inline Arrival& operator=(const Arrival& from) {
    CopyFrom(from);
    return *this;
  }
  inline Arrival& operator=(Arrival&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Arrival& default_instance() {
    return *internal_default_instance();
  }
  static inline const Arrival* internal_default_instance() {
    return reinterpret_cast<const Arrival*>(
               &_Arrival_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Arrival& a, Arrival& b) {
    a.Swap(&b);
  }
  inline void Swap(Arrival* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Arrival* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Arrival* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Arrival>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Arrival& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Arrival& from) {
    Arrival::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Arrival* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.RollingMill.DataModel.Arrival";
  }
  protected:
  explicit Arrival(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadFieldNumber = 2,
    kArrivalEstimateFieldNumber = 3,
    kVehicleFieldNumber = 1,
  };
  // .DynStacking.RollingMill.DataModel.Stack Load = 2;
  bool has_load() const;
  private:
  bool _internal_has_load() const;
  public:
  void clear_load();
  const ::DynStacking::RollingMill::DataModel::Stack& load() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::Stack* release_load();
  ::DynStacking::RollingMill::DataModel::Stack* mutable_load();
  void set_allocated_load(::DynStacking::RollingMill::DataModel::Stack* load);
  private:
  const ::DynStacking::RollingMill::DataModel::Stack& _internal_load() const;
  ::DynStacking::RollingMill::DataModel::Stack* _internal_mutable_load();
  public:
  void unsafe_arena_set_allocated_load(
      ::DynStacking::RollingMill::DataModel::Stack* load);
  ::DynStacking::RollingMill::DataModel::Stack* unsafe_arena_release_load();

  // .DynStacking.RollingMill.DataModel.TimeStamp ArrivalEstimate = 3;
  bool has_arrivalestimate() const;
  private:
  bool _internal_has_arrivalestimate() const;
  public:
  void clear_arrivalestimate();
  const ::DynStacking::RollingMill::DataModel::TimeStamp& arrivalestimate() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::TimeStamp* release_arrivalestimate();
  ::DynStacking::RollingMill::DataModel::TimeStamp* mutable_arrivalestimate();
  void set_allocated_arrivalestimate(::DynStacking::RollingMill::DataModel::TimeStamp* arrivalestimate);
  private:
  const ::DynStacking::RollingMill::DataModel::TimeStamp& _internal_arrivalestimate() const;
  ::DynStacking::RollingMill::DataModel::TimeStamp* _internal_mutable_arrivalestimate();
  public:
  void unsafe_arena_set_allocated_arrivalestimate(
      ::DynStacking::RollingMill::DataModel::TimeStamp* arrivalestimate);
  ::DynStacking::RollingMill::DataModel::TimeStamp* unsafe_arena_release_arrivalestimate();

  // int32 Vehicle = 1;
  void clear_vehicle();
  int32_t vehicle() const;
  void set_vehicle(int32_t value);
  private:
  int32_t _internal_vehicle() const;
  void _internal_set_vehicle(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.RollingMill.DataModel.Arrival)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DynStacking::RollingMill::DataModel::Stack* load_;
    ::DynStacking::RollingMill::DataModel::TimeStamp* arrivalestimate_;
    int32_t vehicle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollingmill_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.RollingMill.DataModel.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Block& from) {
    Block::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.RollingMill.DataModel.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrivedFieldNumber = 5,
    kIdFieldNumber = 1,
    kSequenceFieldNumber = 2,
    kTypeFieldNumber = 3,
    kProgramIdFieldNumber = 4,
    kRolledFieldNumber = 6,
  };
  // .DynStacking.RollingMill.DataModel.TimeStamp Arrived = 5;
  bool has_arrived() const;
  private:
  bool _internal_has_arrived() const;
  public:
  void clear_arrived();
  const ::DynStacking::RollingMill::DataModel::TimeStamp& arrived() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::TimeStamp* release_arrived();
  ::DynStacking::RollingMill::DataModel::TimeStamp* mutable_arrived();
  void set_allocated_arrived(::DynStacking::RollingMill::DataModel::TimeStamp* arrived);
  private:
  const ::DynStacking::RollingMill::DataModel::TimeStamp& _internal_arrived() const;
  ::DynStacking::RollingMill::DataModel::TimeStamp* _internal_mutable_arrived();
  public:
  void unsafe_arena_set_allocated_arrived(
      ::DynStacking::RollingMill::DataModel::TimeStamp* arrived);
  ::DynStacking::RollingMill::DataModel::TimeStamp* unsafe_arena_release_arrived();

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 Sequence = 2;
  void clear_sequence();
  int32_t sequence() const;
  void set_sequence(int32_t value);
  private:
  int32_t _internal_sequence() const;
  void _internal_set_sequence(int32_t value);
  public:

  // .DynStacking.RollingMill.DataModel.MillTypes Type = 3;
  void clear_type();
  ::DynStacking::RollingMill::DataModel::MillTypes type() const;
  void set_type(::DynStacking::RollingMill::DataModel::MillTypes value);
  private:
  ::DynStacking::RollingMill::DataModel::MillTypes _internal_type() const;
  void _internal_set_type(::DynStacking::RollingMill::DataModel::MillTypes value);
  public:

  // int32 ProgramId = 4;
  void clear_programid();
  int32_t programid() const;
  void set_programid(int32_t value);
  private:
  int32_t _internal_programid() const;
  void _internal_set_programid(int32_t value);
  public:

  // bool Rolled = 6;
  void clear_rolled();
  bool rolled() const;
  void set_rolled(bool value);
  private:
  bool _internal_rolled() const;
  void _internal_set_rolled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.RollingMill.DataModel.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DynStacking::RollingMill::DataModel::TimeStamp* arrived_;
    int32_t id_;
    int32_t sequence_;
    int type_;
    int32_t programid_;
    bool rolled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollingmill_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Crane final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.RollingMill.DataModel.Crane) */ {
 public:
  inline Crane() : Crane(nullptr) {}
  ~Crane() override;
  explicit PROTOBUF_CONSTEXPR Crane(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Crane(const Crane& from);
  Crane(Crane&& from) noexcept
    : Crane() {
    *this = ::std::move(from);
  }

  inline Crane& operator=(const Crane& from) {
    CopyFrom(from);
    return *this;
  }
  inline Crane& operator=(Crane&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Crane& default_instance() {
    return *internal_default_instance();
  }
  static inline const Crane* internal_default_instance() {
    return reinterpret_cast<const Crane*>(
               &_Crane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Crane& a, Crane& b) {
    a.Swap(&b);
  }
  inline void Swap(Crane* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Crane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Crane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Crane>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Crane& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Crane& from) {
    Crane::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Crane* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.RollingMill.DataModel.Crane";
  }
  protected:
  explicit Crane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadFieldNumber = 2,
    kGirderPositionFieldNumber = 3,
    kIdFieldNumber = 1,
    kCraneCapacityFieldNumber = 5,
    kHoistLevelFieldNumber = 4,
    kWidthFieldNumber = 6,
    kMinPositionFieldNumber = 7,
    kMaxPositionFieldNumber = 8,
  };
  // .DynStacking.RollingMill.DataModel.Stack Load = 2;
  bool has_load() const;
  private:
  bool _internal_has_load() const;
  public:
  void clear_load();
  const ::DynStacking::RollingMill::DataModel::Stack& load() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::Stack* release_load();
  ::DynStacking::RollingMill::DataModel::Stack* mutable_load();
  void set_allocated_load(::DynStacking::RollingMill::DataModel::Stack* load);
  private:
  const ::DynStacking::RollingMill::DataModel::Stack& _internal_load() const;
  ::DynStacking::RollingMill::DataModel::Stack* _internal_mutable_load();
  public:
  void unsafe_arena_set_allocated_load(
      ::DynStacking::RollingMill::DataModel::Stack* load);
  ::DynStacking::RollingMill::DataModel::Stack* unsafe_arena_release_load();

  // double GirderPosition = 3;
  void clear_girderposition();
  double girderposition() const;
  void set_girderposition(double value);
  private:
  double _internal_girderposition() const;
  void _internal_set_girderposition(double value);
  public:

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 CraneCapacity = 5;
  void clear_cranecapacity();
  int32_t cranecapacity() const;
  void set_cranecapacity(int32_t value);
  private:
  int32_t _internal_cranecapacity() const;
  void _internal_set_cranecapacity(int32_t value);
  public:

  // double HoistLevel = 4;
  void clear_hoistlevel();
  double hoistlevel() const;
  void set_hoistlevel(double value);
  private:
  double _internal_hoistlevel() const;
  void _internal_set_hoistlevel(double value);
  public:

  // double Width = 6;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double MinPosition = 7;
  void clear_minposition();
  double minposition() const;
  void set_minposition(double value);
  private:
  double _internal_minposition() const;
  void _internal_set_minposition(double value);
  public:

  // double MaxPosition = 8;
  void clear_maxposition();
  double maxposition() const;
  void set_maxposition(double value);
  private:
  double _internal_maxposition() const;
  void _internal_set_maxposition(double value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.RollingMill.DataModel.Crane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DynStacking::RollingMill::DataModel::Stack* load_;
    double girderposition_;
    int32_t id_;
    int32_t cranecapacity_;
    double hoistlevel_;
    double width_;
    double minposition_;
    double maxposition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollingmill_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class CraneMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.RollingMill.DataModel.CraneMove) */ {
 public:
  inline CraneMove() : CraneMove(nullptr) {}
  ~CraneMove() override;
  explicit PROTOBUF_CONSTEXPR CraneMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CraneMove(const CraneMove& from);
  CraneMove(CraneMove&& from) noexcept
    : CraneMove() {
    *this = ::std::move(from);
  }

  inline CraneMove& operator=(const CraneMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline CraneMove& operator=(CraneMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CraneMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const CraneMove* internal_default_instance() {
    return reinterpret_cast<const CraneMove*>(
               &_CraneMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CraneMove& a, CraneMove& b) {
    a.Swap(&b);
  }
  inline void Swap(CraneMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CraneMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CraneMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CraneMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CraneMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CraneMove& from) {
    CraneMove::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CraneMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.RollingMill.DataModel.CraneMove";
  }
  protected:
  explicit CraneMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtobufPredecessorIdsFieldNumber = 11,
    kProtobufMovedBlockIdsFieldNumber = 12,
    kReleaseTimeFieldNumber = 8,
    kDueDateFieldNumber = 9,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPickupLocationIdFieldNumber = 3,
    kDropoffLocationIdFieldNumber = 4,
    kAmountFieldNumber = 7,
    kRequiredCraneIdFieldNumber = 10,
  };
  // repeated int32 ProtobufPredecessorIds = 11 [packed = false];
  int protobufpredecessorids_size() const;
  private:
  int _internal_protobufpredecessorids_size() const;
  public:
  void clear_protobufpredecessorids();
  private:
  int32_t _internal_protobufpredecessorids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_protobufpredecessorids() const;
  void _internal_add_protobufpredecessorids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_protobufpredecessorids();
  public:
  int32_t protobufpredecessorids(int index) const;
  void set_protobufpredecessorids(int index, int32_t value);
  void add_protobufpredecessorids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      protobufpredecessorids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_protobufpredecessorids();

  // repeated int32 ProtobufMovedBlockIds = 12 [packed = false];
  int protobufmovedblockids_size() const;
  private:
  int _internal_protobufmovedblockids_size() const;
  public:
  void clear_protobufmovedblockids();
  private:
  int32_t _internal_protobufmovedblockids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_protobufmovedblockids() const;
  void _internal_add_protobufmovedblockids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_protobufmovedblockids();
  public:
  int32_t protobufmovedblockids(int index) const;
  void set_protobufmovedblockids(int index, int32_t value);
  void add_protobufmovedblockids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      protobufmovedblockids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_protobufmovedblockids();

  // .DynStacking.RollingMill.DataModel.TimeStamp ReleaseTime = 8;
  bool has_releasetime() const;
  private:
  bool _internal_has_releasetime() const;
  public:
  void clear_releasetime();
  const ::DynStacking::RollingMill::DataModel::TimeStamp& releasetime() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::TimeStamp* release_releasetime();
  ::DynStacking::RollingMill::DataModel::TimeStamp* mutable_releasetime();
  void set_allocated_releasetime(::DynStacking::RollingMill::DataModel::TimeStamp* releasetime);
  private:
  const ::DynStacking::RollingMill::DataModel::TimeStamp& _internal_releasetime() const;
  ::DynStacking::RollingMill::DataModel::TimeStamp* _internal_mutable_releasetime();
  public:
  void unsafe_arena_set_allocated_releasetime(
      ::DynStacking::RollingMill::DataModel::TimeStamp* releasetime);
  ::DynStacking::RollingMill::DataModel::TimeStamp* unsafe_arena_release_releasetime();

  // .DynStacking.RollingMill.DataModel.TimeStamp DueDate = 9;
  bool has_duedate() const;
  private:
  bool _internal_has_duedate() const;
  public:
  void clear_duedate();
  const ::DynStacking::RollingMill::DataModel::TimeStamp& duedate() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::TimeStamp* release_duedate();
  ::DynStacking::RollingMill::DataModel::TimeStamp* mutable_duedate();
  void set_allocated_duedate(::DynStacking::RollingMill::DataModel::TimeStamp* duedate);
  private:
  const ::DynStacking::RollingMill::DataModel::TimeStamp& _internal_duedate() const;
  ::DynStacking::RollingMill::DataModel::TimeStamp* _internal_mutable_duedate();
  public:
  void unsafe_arena_set_allocated_duedate(
      ::DynStacking::RollingMill::DataModel::TimeStamp* duedate);
  ::DynStacking::RollingMill::DataModel::TimeStamp* unsafe_arena_release_duedate();

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .DynStacking.RollingMill.DataModel.MoveType Type = 2;
  void clear_type();
  ::DynStacking::RollingMill::DataModel::MoveType type() const;
  void set_type(::DynStacking::RollingMill::DataModel::MoveType value);
  private:
  ::DynStacking::RollingMill::DataModel::MoveType _internal_type() const;
  void _internal_set_type(::DynStacking::RollingMill::DataModel::MoveType value);
  public:

  // int32 PickupLocationId = 3;
  void clear_pickuplocationid();
  int32_t pickuplocationid() const;
  void set_pickuplocationid(int32_t value);
  private:
  int32_t _internal_pickuplocationid() const;
  void _internal_set_pickuplocationid(int32_t value);
  public:

  // int32 DropoffLocationId = 4;
  void clear_dropofflocationid();
  int32_t dropofflocationid() const;
  void set_dropofflocationid(int32_t value);
  private:
  int32_t _internal_dropofflocationid() const;
  void _internal_set_dropofflocationid(int32_t value);
  public:

  // int32 Amount = 7;
  void clear_amount();
  int32_t amount() const;
  void set_amount(int32_t value);
  private:
  int32_t _internal_amount() const;
  void _internal_set_amount(int32_t value);
  public:

  // int32 RequiredCraneId = 10;
  void clear_requiredcraneid();
  int32_t requiredcraneid() const;
  void set_requiredcraneid(int32_t value);
  private:
  int32_t _internal_requiredcraneid() const;
  void _internal_set_requiredcraneid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.RollingMill.DataModel.CraneMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > protobufpredecessorids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > protobufmovedblockids_;
    ::DynStacking::RollingMill::DataModel::TimeStamp* releasetime_;
    ::DynStacking::RollingMill::DataModel::TimeStamp* duedate_;
    int32_t id_;
    int type_;
    int32_t pickuplocationid_;
    int32_t dropofflocationid_;
    int32_t amount_;
    int32_t requiredcraneid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollingmill_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class CraneSchedule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.RollingMill.DataModel.CraneSchedule) */ {
 public:
  inline CraneSchedule() : CraneSchedule(nullptr) {}
  ~CraneSchedule() override;
  explicit PROTOBUF_CONSTEXPR CraneSchedule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CraneSchedule(const CraneSchedule& from);
  CraneSchedule(CraneSchedule&& from) noexcept
    : CraneSchedule() {
    *this = ::std::move(from);
  }

  inline CraneSchedule& operator=(const CraneSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline CraneSchedule& operator=(CraneSchedule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CraneSchedule& default_instance() {
    return *internal_default_instance();
  }
  static inline const CraneSchedule* internal_default_instance() {
    return reinterpret_cast<const CraneSchedule*>(
               &_CraneSchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CraneSchedule& a, CraneSchedule& b) {
    a.Swap(&b);
  }
  inline void Swap(CraneSchedule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CraneSchedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CraneSchedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CraneSchedule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CraneSchedule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CraneSchedule& from) {
    CraneSchedule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CraneSchedule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.RollingMill.DataModel.CraneSchedule";
  }
  protected:
  explicit CraneSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivitiesFieldNumber = 2,
    kScheduleNrFieldNumber = 1,
  };
  // repeated .DynStacking.RollingMill.DataModel.CraneScheduleActivity Activities = 2;
  int activities_size() const;
  private:
  int _internal_activities_size() const;
  public:
  void clear_activities();
  ::DynStacking::RollingMill::DataModel::CraneScheduleActivity* mutable_activities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::CraneScheduleActivity >*
      mutable_activities();
  private:
  const ::DynStacking::RollingMill::DataModel::CraneScheduleActivity& _internal_activities(int index) const;
  ::DynStacking::RollingMill::DataModel::CraneScheduleActivity* _internal_add_activities();
  public:
  const ::DynStacking::RollingMill::DataModel::CraneScheduleActivity& activities(int index) const;
  ::DynStacking::RollingMill::DataModel::CraneScheduleActivity* add_activities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::CraneScheduleActivity >&
      activities() const;

  // int32 ScheduleNr = 1;
  void clear_schedulenr();
  int32_t schedulenr() const;
  void set_schedulenr(int32_t value);
  private:
  int32_t _internal_schedulenr() const;
  void _internal_set_schedulenr(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.RollingMill.DataModel.CraneSchedule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::CraneScheduleActivity > activities_;
    int32_t schedulenr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollingmill_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class CraneScheduleActivity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.RollingMill.DataModel.CraneScheduleActivity) */ {
 public:
  inline CraneScheduleActivity() : CraneScheduleActivity(nullptr) {}
  ~CraneScheduleActivity() override;
  explicit PROTOBUF_CONSTEXPR CraneScheduleActivity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CraneScheduleActivity(const CraneScheduleActivity& from);
  CraneScheduleActivity(CraneScheduleActivity&& from) noexcept
    : CraneScheduleActivity() {
    *this = ::std::move(from);
  }

  inline CraneScheduleActivity& operator=(const CraneScheduleActivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline CraneScheduleActivity& operator=(CraneScheduleActivity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CraneScheduleActivity& default_instance() {
    return *internal_default_instance();
  }
  static inline const CraneScheduleActivity* internal_default_instance() {
    return reinterpret_cast<const CraneScheduleActivity*>(
               &_CraneScheduleActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CraneScheduleActivity& a, CraneScheduleActivity& b) {
    a.Swap(&b);
  }
  inline void Swap(CraneScheduleActivity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CraneScheduleActivity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CraneScheduleActivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CraneScheduleActivity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CraneScheduleActivity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CraneScheduleActivity& from) {
    CraneScheduleActivity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CraneScheduleActivity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.RollingMill.DataModel.CraneScheduleActivity";
  }
  protected:
  explicit CraneScheduleActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveIdFieldNumber = 1,
    kCraneIdFieldNumber = 2,
    kPriorityFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // int32 MoveId = 1;
  void clear_moveid();
  int32_t moveid() const;
  void set_moveid(int32_t value);
  private:
  int32_t _internal_moveid() const;
  void _internal_set_moveid(int32_t value);
  public:

  // int32 CraneId = 2;
  void clear_craneid();
  int32_t craneid() const;
  void set_craneid(int32_t value);
  private:
  int32_t _internal_craneid() const;
  void _internal_set_craneid(int32_t value);
  public:

  // int32 Priority = 3;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // .DynStacking.RollingMill.DataModel.CraneScheduleActivityState State = 4;
  void clear_state();
  ::DynStacking::RollingMill::DataModel::CraneScheduleActivityState state() const;
  void set_state(::DynStacking::RollingMill::DataModel::CraneScheduleActivityState value);
  private:
  ::DynStacking::RollingMill::DataModel::CraneScheduleActivityState _internal_state() const;
  void _internal_set_state(::DynStacking::RollingMill::DataModel::CraneScheduleActivityState value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.RollingMill.DataModel.CraneScheduleActivity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t moveid_;
    int32_t craneid_;
    int32_t priority_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollingmill_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.RollingMill.DataModel.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit PROTOBUF_CONSTEXPR Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Location& from) {
    Location::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.RollingMill.DataModel.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStackFieldNumber = 4,
    kGirderPositionFieldNumber = 2,
    kIdFieldNumber = 1,
    kMaxHeightFieldNumber = 3,
    kTypeFieldNumber = 5,
    kMillTypeFieldNumber = 6,
  };
  // .DynStacking.RollingMill.DataModel.Stack Stack = 4;
  bool has_stack() const;
  private:
  bool _internal_has_stack() const;
  public:
  void clear_stack();
  const ::DynStacking::RollingMill::DataModel::Stack& stack() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::Stack* release_stack();
  ::DynStacking::RollingMill::DataModel::Stack* mutable_stack();
  void set_allocated_stack(::DynStacking::RollingMill::DataModel::Stack* stack);
  private:
  const ::DynStacking::RollingMill::DataModel::Stack& _internal_stack() const;
  ::DynStacking::RollingMill::DataModel::Stack* _internal_mutable_stack();
  public:
  void unsafe_arena_set_allocated_stack(
      ::DynStacking::RollingMill::DataModel::Stack* stack);
  ::DynStacking::RollingMill::DataModel::Stack* unsafe_arena_release_stack();

  // double GirderPosition = 2;
  void clear_girderposition();
  double girderposition() const;
  void set_girderposition(double value);
  private:
  double _internal_girderposition() const;
  void _internal_set_girderposition(double value);
  public:

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 MaxHeight = 3;
  void clear_maxheight();
  int32_t maxheight() const;
  void set_maxheight(int32_t value);
  private:
  int32_t _internal_maxheight() const;
  void _internal_set_maxheight(int32_t value);
  public:

  // .DynStacking.RollingMill.DataModel.StackTypes Type = 5;
  void clear_type();
  ::DynStacking::RollingMill::DataModel::StackTypes type() const;
  void set_type(::DynStacking::RollingMill::DataModel::StackTypes value);
  private:
  ::DynStacking::RollingMill::DataModel::StackTypes _internal_type() const;
  void _internal_set_type(::DynStacking::RollingMill::DataModel::StackTypes value);
  public:

  // .DynStacking.RollingMill.DataModel.MillTypes MillType = 6;
  void clear_milltype();
  ::DynStacking::RollingMill::DataModel::MillTypes milltype() const;
  void set_milltype(::DynStacking::RollingMill::DataModel::MillTypes value);
  private:
  ::DynStacking::RollingMill::DataModel::MillTypes _internal_milltype() const;
  void _internal_set_milltype(::DynStacking::RollingMill::DataModel::MillTypes value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.RollingMill.DataModel.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DynStacking::RollingMill::DataModel::Stack* stack_;
    double girderposition_;
    int32_t id_;
    int32_t maxheight_;
    int type_;
    int milltype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollingmill_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class MoveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.RollingMill.DataModel.MoveRequest) */ {
 public:
  inline MoveRequest() : MoveRequest(nullptr) {}
  ~MoveRequest() override;
  explicit PROTOBUF_CONSTEXPR MoveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveRequest(const MoveRequest& from);
  MoveRequest(MoveRequest&& from) noexcept
    : MoveRequest() {
    *this = ::std::move(from);
  }

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRequest& operator=(MoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveRequest* internal_default_instance() {
    return reinterpret_cast<const MoveRequest*>(
               &_MoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MoveRequest& a, MoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveRequest& from) {
    MoveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.RollingMill.DataModel.MoveRequest";
  }
  protected:
  explicit MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDueDateFieldNumber = 4,
    kIdFieldNumber = 1,
    kTargetLocationIdFieldNumber = 2,
    kBlockIdFieldNumber = 3,
  };
  // .DynStacking.RollingMill.DataModel.TimeStamp DueDate = 4;
  bool has_duedate() const;
  private:
  bool _internal_has_duedate() const;
  public:
  void clear_duedate();
  const ::DynStacking::RollingMill::DataModel::TimeStamp& duedate() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::TimeStamp* release_duedate();
  ::DynStacking::RollingMill::DataModel::TimeStamp* mutable_duedate();
  void set_allocated_duedate(::DynStacking::RollingMill::DataModel::TimeStamp* duedate);
  private:
  const ::DynStacking::RollingMill::DataModel::TimeStamp& _internal_duedate() const;
  ::DynStacking::RollingMill::DataModel::TimeStamp* _internal_mutable_duedate();
  public:
  void unsafe_arena_set_allocated_duedate(
      ::DynStacking::RollingMill::DataModel::TimeStamp* duedate);
  ::DynStacking::RollingMill::DataModel::TimeStamp* unsafe_arena_release_duedate();

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 TargetLocationId = 2;
  void clear_targetlocationid();
  int32_t targetlocationid() const;
  void set_targetlocationid(int32_t value);
  private:
  int32_t _internal_targetlocationid() const;
  void _internal_set_targetlocationid(int32_t value);
  public:

  // int32 BlockId = 3;
  void clear_blockid();
  int32_t blockid() const;
  void set_blockid(int32_t value);
  private:
  int32_t _internal_blockid() const;
  void _internal_set_blockid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.RollingMill.DataModel.MoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DynStacking::RollingMill::DataModel::TimeStamp* duedate_;
    int32_t id_;
    int32_t targetlocationid_;
    int32_t blockid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollingmill_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Performance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.RollingMill.DataModel.Performance) */ {
 public:
  inline Performance() : Performance(nullptr) {}
  ~Performance() override;
  explicit PROTOBUF_CONSTEXPR Performance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Performance(const Performance& from);
  Performance(Performance&& from) noexcept
    : Performance() {
    *this = ::std::move(from);
  }

  inline Performance& operator=(const Performance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Performance& operator=(Performance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Performance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Performance* internal_default_instance() {
    return reinterpret_cast<const Performance*>(
               &_Performance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Performance& a, Performance& b) {
    a.Swap(&b);
  }
  inline void Swap(Performance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Performance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Performance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Performance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Performance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Performance& from) {
    Performance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Performance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.RollingMill.DataModel.Performance";
  }
  protected:
  explicit Performance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceLevelMeanFieldNumber = 2,
    kCraneManipulationsFieldNumber = 1,
    kDeliveredBlocksFieldNumber = 4,
    kLeadTimeMeanFieldNumber = 3,
    kTardinessMeanFieldNumber = 6,
    kShuffleBufferUtilizationMeanFieldNumber = 7,
    kSortedBufferUtilizationMeanFieldNumber = 8,
    kShuffleCraneUtilizationMeanFieldNumber = 9,
    kTotalBlocksOnTimeFieldNumber = 5,
    kRollingProgramMessupsFieldNumber = 13,
    kHandoverCraneUtilizationMeanFieldNumber = 10,
    kMillAUtilizationMeanFieldNumber = 11,
    kMillBUtilizationMeanFieldNumber = 12,
    kBlockedMillTimeFieldNumber = 14,
  };
  // double ServiceLevelMean = 2;
  void clear_servicelevelmean();
  double servicelevelmean() const;
  void set_servicelevelmean(double value);
  private:
  double _internal_servicelevelmean() const;
  void _internal_set_servicelevelmean(double value);
  public:

  // int32 CraneManipulations = 1;
  void clear_cranemanipulations();
  int32_t cranemanipulations() const;
  void set_cranemanipulations(int32_t value);
  private:
  int32_t _internal_cranemanipulations() const;
  void _internal_set_cranemanipulations(int32_t value);
  public:

  // int32 DeliveredBlocks = 4;
  void clear_deliveredblocks();
  int32_t deliveredblocks() const;
  void set_deliveredblocks(int32_t value);
  private:
  int32_t _internal_deliveredblocks() const;
  void _internal_set_deliveredblocks(int32_t value);
  public:

  // double LeadTimeMean = 3;
  void clear_leadtimemean();
  double leadtimemean() const;
  void set_leadtimemean(double value);
  private:
  double _internal_leadtimemean() const;
  void _internal_set_leadtimemean(double value);
  public:

  // double TardinessMean = 6;
  void clear_tardinessmean();
  double tardinessmean() const;
  void set_tardinessmean(double value);
  private:
  double _internal_tardinessmean() const;
  void _internal_set_tardinessmean(double value);
  public:

  // double ShuffleBufferUtilizationMean = 7;
  void clear_shufflebufferutilizationmean();
  double shufflebufferutilizationmean() const;
  void set_shufflebufferutilizationmean(double value);
  private:
  double _internal_shufflebufferutilizationmean() const;
  void _internal_set_shufflebufferutilizationmean(double value);
  public:

  // double SortedBufferUtilizationMean = 8;
  void clear_sortedbufferutilizationmean();
  double sortedbufferutilizationmean() const;
  void set_sortedbufferutilizationmean(double value);
  private:
  double _internal_sortedbufferutilizationmean() const;
  void _internal_set_sortedbufferutilizationmean(double value);
  public:

  // double ShuffleCraneUtilizationMean = 9;
  void clear_shufflecraneutilizationmean();
  double shufflecraneutilizationmean() const;
  void set_shufflecraneutilizationmean(double value);
  private:
  double _internal_shufflecraneutilizationmean() const;
  void _internal_set_shufflecraneutilizationmean(double value);
  public:

  // int32 TotalBlocksOnTime = 5;
  void clear_totalblocksontime();
  int32_t totalblocksontime() const;
  void set_totalblocksontime(int32_t value);
  private:
  int32_t _internal_totalblocksontime() const;
  void _internal_set_totalblocksontime(int32_t value);
  public:

  // int32 RollingProgramMessups = 13;
  void clear_rollingprogrammessups();
  int32_t rollingprogrammessups() const;
  void set_rollingprogrammessups(int32_t value);
  private:
  int32_t _internal_rollingprogrammessups() const;
  void _internal_set_rollingprogrammessups(int32_t value);
  public:

  // double HandoverCraneUtilizationMean = 10;
  void clear_handovercraneutilizationmean();
  double handovercraneutilizationmean() const;
  void set_handovercraneutilizationmean(double value);
  private:
  double _internal_handovercraneutilizationmean() const;
  void _internal_set_handovercraneutilizationmean(double value);
  public:

  // double MillAUtilizationMean = 11;
  void clear_millautilizationmean();
  double millautilizationmean() const;
  void set_millautilizationmean(double value);
  private:
  double _internal_millautilizationmean() const;
  void _internal_set_millautilizationmean(double value);
  public:

  // double MillBUtilizationMean = 12;
  void clear_millbutilizationmean();
  double millbutilizationmean() const;
  void set_millbutilizationmean(double value);
  private:
  double _internal_millbutilizationmean() const;
  void _internal_set_millbutilizationmean(double value);
  public:

  // double BlockedMillTime = 14;
  void clear_blockedmilltime();
  double blockedmilltime() const;
  void set_blockedmilltime(double value);
  private:
  double _internal_blockedmilltime() const;
  void _internal_set_blockedmilltime(double value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.RollingMill.DataModel.Performance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double servicelevelmean_;
    int32_t cranemanipulations_;
    int32_t deliveredblocks_;
    double leadtimemean_;
    double tardinessmean_;
    double shufflebufferutilizationmean_;
    double sortedbufferutilizationmean_;
    double shufflecraneutilizationmean_;
    int32_t totalblocksontime_;
    int32_t rollingprogrammessups_;
    double handovercraneutilizationmean_;
    double millautilizationmean_;
    double millbutilizationmean_;
    double blockedmilltime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollingmill_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class PlannedCraneMoves final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.RollingMill.DataModel.PlannedCraneMoves) */ {
 public:
  inline PlannedCraneMoves() : PlannedCraneMoves(nullptr) {}
  ~PlannedCraneMoves() override;
  explicit PROTOBUF_CONSTEXPR PlannedCraneMoves(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlannedCraneMoves(const PlannedCraneMoves& from);
  PlannedCraneMoves(PlannedCraneMoves&& from) noexcept
    : PlannedCraneMoves() {
    *this = ::std::move(from);
  }

  inline PlannedCraneMoves& operator=(const PlannedCraneMoves& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlannedCraneMoves& operator=(PlannedCraneMoves&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlannedCraneMoves& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlannedCraneMoves* internal_default_instance() {
    return reinterpret_cast<const PlannedCraneMoves*>(
               &_PlannedCraneMoves_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PlannedCraneMoves& a, PlannedCraneMoves& b) {
    a.Swap(&b);
  }
  inline void Swap(PlannedCraneMoves* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlannedCraneMoves* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlannedCraneMoves* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlannedCraneMoves>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlannedCraneMoves& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlannedCraneMoves& from) {
    PlannedCraneMoves::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlannedCraneMoves* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.RollingMill.DataModel.PlannedCraneMoves";
  }
  protected:
  explicit PlannedCraneMoves(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovesFieldNumber = 2,
    kSequenceNrFieldNumber = 1,
  };
  // repeated .DynStacking.RollingMill.DataModel.CraneMove Moves = 2;
  int moves_size() const;
  private:
  int _internal_moves_size() const;
  public:
  void clear_moves();
  ::DynStacking::RollingMill::DataModel::CraneMove* mutable_moves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::CraneMove >*
      mutable_moves();
  private:
  const ::DynStacking::RollingMill::DataModel::CraneMove& _internal_moves(int index) const;
  ::DynStacking::RollingMill::DataModel::CraneMove* _internal_add_moves();
  public:
  const ::DynStacking::RollingMill::DataModel::CraneMove& moves(int index) const;
  ::DynStacking::RollingMill::DataModel::CraneMove* add_moves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::CraneMove >&
      moves() const;

  // int32 SequenceNr = 1;
  void clear_sequencenr();
  int32_t sequencenr() const;
  void set_sequencenr(int32_t value);
  private:
  int32_t _internal_sequencenr() const;
  void _internal_set_sequencenr(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.RollingMill.DataModel.PlannedCraneMoves)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::CraneMove > moves_;
    int32_t sequencenr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollingmill_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Stack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.RollingMill.DataModel.Stack) */ {
 public:
  inline Stack() : Stack(nullptr) {}
  ~Stack() override;
  explicit PROTOBUF_CONSTEXPR Stack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stack(const Stack& from);
  Stack(Stack&& from) noexcept
    : Stack() {
    *this = ::std::move(from);
  }

  inline Stack& operator=(const Stack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stack& operator=(Stack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stack* internal_default_instance() {
    return reinterpret_cast<const Stack*>(
               &_Stack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Stack& a, Stack& b) {
    a.Swap(&b);
  }
  inline void Swap(Stack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stack& from) {
    Stack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.RollingMill.DataModel.Stack";
  }
  protected:
  explicit Stack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBottomToTopFieldNumber = 1,
  };
  // repeated .DynStacking.RollingMill.DataModel.Block BottomToTop = 1;
  int bottomtotop_size() const;
  private:
  int _internal_bottomtotop_size() const;
  public:
  void clear_bottomtotop();
  ::DynStacking::RollingMill::DataModel::Block* mutable_bottomtotop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Block >*
      mutable_bottomtotop();
  private:
  const ::DynStacking::RollingMill::DataModel::Block& _internal_bottomtotop(int index) const;
  ::DynStacking::RollingMill::DataModel::Block* _internal_add_bottomtotop();
  public:
  const ::DynStacking::RollingMill::DataModel::Block& bottomtotop(int index) const;
  ::DynStacking::RollingMill::DataModel::Block* add_bottomtotop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Block >&
      bottomtotop() const;

  // @@protoc_insertion_point(class_scope:DynStacking.RollingMill.DataModel.Stack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Block > bottomtotop_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollingmill_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class TimeStamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.RollingMill.DataModel.TimeStamp) */ {
 public:
  inline TimeStamp() : TimeStamp(nullptr) {}
  ~TimeStamp() override;
  explicit PROTOBUF_CONSTEXPR TimeStamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeStamp(const TimeStamp& from);
  TimeStamp(TimeStamp&& from) noexcept
    : TimeStamp() {
    *this = ::std::move(from);
  }

  inline TimeStamp& operator=(const TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeStamp& operator=(TimeStamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeStamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeStamp* internal_default_instance() {
    return reinterpret_cast<const TimeStamp*>(
               &_TimeStamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TimeStamp& a, TimeStamp& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeStamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeStamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeStamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeStamp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeStamp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeStamp& from) {
    TimeStamp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeStamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.RollingMill.DataModel.TimeStamp";
  }
  protected:
  explicit TimeStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMilliSecondsFieldNumber = 1,
  };
  // int64 MilliSeconds = 1;
  void clear_milliseconds();
  int64_t milliseconds() const;
  void set_milliseconds(int64_t value);
  private:
  int64_t _internal_milliseconds() const;
  void _internal_set_milliseconds(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.RollingMill.DataModel.TimeStamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t milliseconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollingmill_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Uncertainties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.RollingMill.DataModel.Uncertainties) */ {
 public:
  inline Uncertainties() : Uncertainties(nullptr) {}
  ~Uncertainties() override;
  explicit PROTOBUF_CONSTEXPR Uncertainties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Uncertainties(const Uncertainties& from);
  Uncertainties(Uncertainties&& from) noexcept
    : Uncertainties() {
    *this = ::std::move(from);
  }

  inline Uncertainties& operator=(const Uncertainties& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uncertainties& operator=(Uncertainties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Uncertainties& default_instance() {
    return *internal_default_instance();
  }
  static inline const Uncertainties* internal_default_instance() {
    return reinterpret_cast<const Uncertainties*>(
               &_Uncertainties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Uncertainties& a, Uncertainties& b) {
    a.Swap(&b);
  }
  inline void Swap(Uncertainties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uncertainties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Uncertainties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Uncertainties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Uncertainties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Uncertainties& from) {
    Uncertainties::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uncertainties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.RollingMill.DataModel.Uncertainties";
  }
  protected:
  explicit Uncertainties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrivalIntervalsFieldNumber = 1,
    kCraneMoveTimesFieldNumber = 2,
    kMillBlockIntervalsFieldNumber = 3,
  };
  // repeated double ArrivalIntervals = 1 [packed = false];
  int arrivalintervals_size() const;
  private:
  int _internal_arrivalintervals_size() const;
  public:
  void clear_arrivalintervals();
  private:
  double _internal_arrivalintervals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_arrivalintervals() const;
  void _internal_add_arrivalintervals(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_arrivalintervals();
  public:
  double arrivalintervals(int index) const;
  void set_arrivalintervals(int index, double value);
  void add_arrivalintervals(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      arrivalintervals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_arrivalintervals();

  // repeated double CraneMoveTimes = 2 [packed = false];
  int cranemovetimes_size() const;
  private:
  int _internal_cranemovetimes_size() const;
  public:
  void clear_cranemovetimes();
  private:
  double _internal_cranemovetimes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_cranemovetimes() const;
  void _internal_add_cranemovetimes(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_cranemovetimes();
  public:
  double cranemovetimes(int index) const;
  void set_cranemovetimes(int index, double value);
  void add_cranemovetimes(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      cranemovetimes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_cranemovetimes();

  // repeated double MillBlockIntervals = 3 [packed = false];
  int millblockintervals_size() const;
  private:
  int _internal_millblockintervals_size() const;
  public:
  void clear_millblockintervals();
  private:
  double _internal_millblockintervals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_millblockintervals() const;
  void _internal_add_millblockintervals(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_millblockintervals();
  public:
  double millblockintervals(int index) const;
  void set_millblockintervals(int index, double value);
  void add_millblockintervals(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      millblockintervals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_millblockintervals();

  // @@protoc_insertion_point(class_scope:DynStacking.RollingMill.DataModel.Uncertainties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > arrivalintervals_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > cranemovetimes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > millblockintervals_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollingmill_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class World final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.RollingMill.DataModel.World) */ {
 public:
  inline World() : World(nullptr) {}
  ~World() override;
  explicit PROTOBUF_CONSTEXPR World(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  World(const World& from);
  World(World&& from) noexcept
    : World() {
    *this = ::std::move(from);
  }

  inline World& operator=(const World& from) {
    CopyFrom(from);
    return *this;
  }
  inline World& operator=(World&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const World& default_instance() {
    return *internal_default_instance();
  }
  static inline const World* internal_default_instance() {
    return reinterpret_cast<const World*>(
               &_World_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(World& a, World& b) {
    a.Swap(&b);
  }
  inline void Swap(World* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(World* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  World* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<World>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const World& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const World& from) {
    World::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(World* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.RollingMill.DataModel.World";
  }
  protected:
  explicit World(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationsFieldNumber = 4,
    kBlocksAtSlabYardFieldNumber = 5,
    kArrivalsFromSlabYardFieldNumber = 6,
    kMoveRequestsFieldNumber = 8,
    kNowFieldNumber = 1,
    kCraneMovesFieldNumber = 7,
    kCraneScheduleFieldNumber = 9,
    kShuffleCraneFieldNumber = 10,
    kHandoverCraneFieldNumber = 11,
    kKPIsFieldNumber = 12,
    kObservationDataFieldNumber = 13,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 2,
  };
  // repeated .DynStacking.RollingMill.DataModel.Location Locations = 4;
  int locations_size() const;
  private:
  int _internal_locations_size() const;
  public:
  void clear_locations();
  ::DynStacking::RollingMill::DataModel::Location* mutable_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Location >*
      mutable_locations();
  private:
  const ::DynStacking::RollingMill::DataModel::Location& _internal_locations(int index) const;
  ::DynStacking::RollingMill::DataModel::Location* _internal_add_locations();
  public:
  const ::DynStacking::RollingMill::DataModel::Location& locations(int index) const;
  ::DynStacking::RollingMill::DataModel::Location* add_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Location >&
      locations() const;

  // repeated .DynStacking.RollingMill.DataModel.Block BlocksAtSlabYard = 5;
  int blocksatslabyard_size() const;
  private:
  int _internal_blocksatslabyard_size() const;
  public:
  void clear_blocksatslabyard();
  ::DynStacking::RollingMill::DataModel::Block* mutable_blocksatslabyard(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Block >*
      mutable_blocksatslabyard();
  private:
  const ::DynStacking::RollingMill::DataModel::Block& _internal_blocksatslabyard(int index) const;
  ::DynStacking::RollingMill::DataModel::Block* _internal_add_blocksatslabyard();
  public:
  const ::DynStacking::RollingMill::DataModel::Block& blocksatslabyard(int index) const;
  ::DynStacking::RollingMill::DataModel::Block* add_blocksatslabyard();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Block >&
      blocksatslabyard() const;

  // repeated .DynStacking.RollingMill.DataModel.Arrival ArrivalsFromSlabYard = 6;
  int arrivalsfromslabyard_size() const;
  private:
  int _internal_arrivalsfromslabyard_size() const;
  public:
  void clear_arrivalsfromslabyard();
  ::DynStacking::RollingMill::DataModel::Arrival* mutable_arrivalsfromslabyard(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Arrival >*
      mutable_arrivalsfromslabyard();
  private:
  const ::DynStacking::RollingMill::DataModel::Arrival& _internal_arrivalsfromslabyard(int index) const;
  ::DynStacking::RollingMill::DataModel::Arrival* _internal_add_arrivalsfromslabyard();
  public:
  const ::DynStacking::RollingMill::DataModel::Arrival& arrivalsfromslabyard(int index) const;
  ::DynStacking::RollingMill::DataModel::Arrival* add_arrivalsfromslabyard();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Arrival >&
      arrivalsfromslabyard() const;

  // repeated .DynStacking.RollingMill.DataModel.MoveRequest MoveRequests = 8;
  int moverequests_size() const;
  private:
  int _internal_moverequests_size() const;
  public:
  void clear_moverequests();
  ::DynStacking::RollingMill::DataModel::MoveRequest* mutable_moverequests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::MoveRequest >*
      mutable_moverequests();
  private:
  const ::DynStacking::RollingMill::DataModel::MoveRequest& _internal_moverequests(int index) const;
  ::DynStacking::RollingMill::DataModel::MoveRequest* _internal_add_moverequests();
  public:
  const ::DynStacking::RollingMill::DataModel::MoveRequest& moverequests(int index) const;
  ::DynStacking::RollingMill::DataModel::MoveRequest* add_moverequests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::MoveRequest >&
      moverequests() const;

  // .DynStacking.RollingMill.DataModel.TimeStamp Now = 1;
  bool has_now() const;
  private:
  bool _internal_has_now() const;
  public:
  void clear_now();
  const ::DynStacking::RollingMill::DataModel::TimeStamp& now() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::TimeStamp* release_now();
  ::DynStacking::RollingMill::DataModel::TimeStamp* mutable_now();
  void set_allocated_now(::DynStacking::RollingMill::DataModel::TimeStamp* now);
  private:
  const ::DynStacking::RollingMill::DataModel::TimeStamp& _internal_now() const;
  ::DynStacking::RollingMill::DataModel::TimeStamp* _internal_mutable_now();
  public:
  void unsafe_arena_set_allocated_now(
      ::DynStacking::RollingMill::DataModel::TimeStamp* now);
  ::DynStacking::RollingMill::DataModel::TimeStamp* unsafe_arena_release_now();

  // .DynStacking.RollingMill.DataModel.PlannedCraneMoves CraneMoves = 7;
  bool has_cranemoves() const;
  private:
  bool _internal_has_cranemoves() const;
  public:
  void clear_cranemoves();
  const ::DynStacking::RollingMill::DataModel::PlannedCraneMoves& cranemoves() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* release_cranemoves();
  ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* mutable_cranemoves();
  void set_allocated_cranemoves(::DynStacking::RollingMill::DataModel::PlannedCraneMoves* cranemoves);
  private:
  const ::DynStacking::RollingMill::DataModel::PlannedCraneMoves& _internal_cranemoves() const;
  ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* _internal_mutable_cranemoves();
  public:
  void unsafe_arena_set_allocated_cranemoves(
      ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* cranemoves);
  ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* unsafe_arena_release_cranemoves();

  // .DynStacking.RollingMill.DataModel.CraneSchedule CraneSchedule = 9;
  bool has_craneschedule() const;
  private:
  bool _internal_has_craneschedule() const;
  public:
  void clear_craneschedule();
  const ::DynStacking::RollingMill::DataModel::CraneSchedule& craneschedule() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::CraneSchedule* release_craneschedule();
  ::DynStacking::RollingMill::DataModel::CraneSchedule* mutable_craneschedule();
  void set_allocated_craneschedule(::DynStacking::RollingMill::DataModel::CraneSchedule* craneschedule);
  private:
  const ::DynStacking::RollingMill::DataModel::CraneSchedule& _internal_craneschedule() const;
  ::DynStacking::RollingMill::DataModel::CraneSchedule* _internal_mutable_craneschedule();
  public:
  void unsafe_arena_set_allocated_craneschedule(
      ::DynStacking::RollingMill::DataModel::CraneSchedule* craneschedule);
  ::DynStacking::RollingMill::DataModel::CraneSchedule* unsafe_arena_release_craneschedule();

  // .DynStacking.RollingMill.DataModel.Crane ShuffleCrane = 10;
  bool has_shufflecrane() const;
  private:
  bool _internal_has_shufflecrane() const;
  public:
  void clear_shufflecrane();
  const ::DynStacking::RollingMill::DataModel::Crane& shufflecrane() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::Crane* release_shufflecrane();
  ::DynStacking::RollingMill::DataModel::Crane* mutable_shufflecrane();
  void set_allocated_shufflecrane(::DynStacking::RollingMill::DataModel::Crane* shufflecrane);
  private:
  const ::DynStacking::RollingMill::DataModel::Crane& _internal_shufflecrane() const;
  ::DynStacking::RollingMill::DataModel::Crane* _internal_mutable_shufflecrane();
  public:
  void unsafe_arena_set_allocated_shufflecrane(
      ::DynStacking::RollingMill::DataModel::Crane* shufflecrane);
  ::DynStacking::RollingMill::DataModel::Crane* unsafe_arena_release_shufflecrane();

  // .DynStacking.RollingMill.DataModel.Crane HandoverCrane = 11;
  bool has_handovercrane() const;
  private:
  bool _internal_has_handovercrane() const;
  public:
  void clear_handovercrane();
  const ::DynStacking::RollingMill::DataModel::Crane& handovercrane() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::Crane* release_handovercrane();
  ::DynStacking::RollingMill::DataModel::Crane* mutable_handovercrane();
  void set_allocated_handovercrane(::DynStacking::RollingMill::DataModel::Crane* handovercrane);
  private:
  const ::DynStacking::RollingMill::DataModel::Crane& _internal_handovercrane() const;
  ::DynStacking::RollingMill::DataModel::Crane* _internal_mutable_handovercrane();
  public:
  void unsafe_arena_set_allocated_handovercrane(
      ::DynStacking::RollingMill::DataModel::Crane* handovercrane);
  ::DynStacking::RollingMill::DataModel::Crane* unsafe_arena_release_handovercrane();

  // .DynStacking.RollingMill.DataModel.Performance KPIs = 12;
  bool has_kpis() const;
  private:
  bool _internal_has_kpis() const;
  public:
  void clear_kpis();
  const ::DynStacking::RollingMill::DataModel::Performance& kpis() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::Performance* release_kpis();
  ::DynStacking::RollingMill::DataModel::Performance* mutable_kpis();
  void set_allocated_kpis(::DynStacking::RollingMill::DataModel::Performance* kpis);
  private:
  const ::DynStacking::RollingMill::DataModel::Performance& _internal_kpis() const;
  ::DynStacking::RollingMill::DataModel::Performance* _internal_mutable_kpis();
  public:
  void unsafe_arena_set_allocated_kpis(
      ::DynStacking::RollingMill::DataModel::Performance* kpis);
  ::DynStacking::RollingMill::DataModel::Performance* unsafe_arena_release_kpis();

  // .DynStacking.RollingMill.DataModel.Uncertainties ObservationData = 13;
  bool has_observationdata() const;
  private:
  bool _internal_has_observationdata() const;
  public:
  void clear_observationdata();
  const ::DynStacking::RollingMill::DataModel::Uncertainties& observationdata() const;
  PROTOBUF_NODISCARD ::DynStacking::RollingMill::DataModel::Uncertainties* release_observationdata();
  ::DynStacking::RollingMill::DataModel::Uncertainties* mutable_observationdata();
  void set_allocated_observationdata(::DynStacking::RollingMill::DataModel::Uncertainties* observationdata);
  private:
  const ::DynStacking::RollingMill::DataModel::Uncertainties& _internal_observationdata() const;
  ::DynStacking::RollingMill::DataModel::Uncertainties* _internal_mutable_observationdata();
  public:
  void unsafe_arena_set_allocated_observationdata(
      ::DynStacking::RollingMill::DataModel::Uncertainties* observationdata);
  ::DynStacking::RollingMill::DataModel::Uncertainties* unsafe_arena_release_observationdata();

  // double Width = 3;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // int32 Height = 2;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.RollingMill.DataModel.World)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Location > locations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Block > blocksatslabyard_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Arrival > arrivalsfromslabyard_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::MoveRequest > moverequests_;
    ::DynStacking::RollingMill::DataModel::TimeStamp* now_;
    ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* cranemoves_;
    ::DynStacking::RollingMill::DataModel::CraneSchedule* craneschedule_;
    ::DynStacking::RollingMill::DataModel::Crane* shufflecrane_;
    ::DynStacking::RollingMill::DataModel::Crane* handovercrane_;
    ::DynStacking::RollingMill::DataModel::Performance* kpis_;
    ::DynStacking::RollingMill::DataModel::Uncertainties* observationdata_;
    double width_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollingmill_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Arrival

// int32 Vehicle = 1;
inline void Arrival::clear_vehicle() {
  _impl_.vehicle_ = 0;
}
inline int32_t Arrival::_internal_vehicle() const {
  return _impl_.vehicle_;
}
inline int32_t Arrival::vehicle() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Arrival.Vehicle)
  return _internal_vehicle();
}
inline void Arrival::_internal_set_vehicle(int32_t value) {
  
  _impl_.vehicle_ = value;
}
inline void Arrival::set_vehicle(int32_t value) {
  _internal_set_vehicle(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Arrival.Vehicle)
}

// .DynStacking.RollingMill.DataModel.Stack Load = 2;
inline bool Arrival::_internal_has_load() const {
  return this != internal_default_instance() && _impl_.load_ != nullptr;
}
inline bool Arrival::has_load() const {
  return _internal_has_load();
}
inline void Arrival::clear_load() {
  if (GetArenaForAllocation() == nullptr && _impl_.load_ != nullptr) {
    delete _impl_.load_;
  }
  _impl_.load_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::Stack& Arrival::_internal_load() const {
  const ::DynStacking::RollingMill::DataModel::Stack* p = _impl_.load_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::Stack&>(
      ::DynStacking::RollingMill::DataModel::_Stack_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::Stack& Arrival::load() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Arrival.Load)
  return _internal_load();
}
inline void Arrival::unsafe_arena_set_allocated_load(
    ::DynStacking::RollingMill::DataModel::Stack* load) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.load_);
  }
  _impl_.load_ = load;
  if (load) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.Arrival.Load)
}
inline ::DynStacking::RollingMill::DataModel::Stack* Arrival::release_load() {
  
  ::DynStacking::RollingMill::DataModel::Stack* temp = _impl_.load_;
  _impl_.load_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::Stack* Arrival::unsafe_arena_release_load() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.Arrival.Load)
  
  ::DynStacking::RollingMill::DataModel::Stack* temp = _impl_.load_;
  _impl_.load_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::Stack* Arrival::_internal_mutable_load() {
  
  if (_impl_.load_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::Stack>(GetArenaForAllocation());
    _impl_.load_ = p;
  }
  return _impl_.load_;
}
inline ::DynStacking::RollingMill::DataModel::Stack* Arrival::mutable_load() {
  ::DynStacking::RollingMill::DataModel::Stack* _msg = _internal_mutable_load();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.Arrival.Load)
  return _msg;
}
inline void Arrival::set_allocated_load(::DynStacking::RollingMill::DataModel::Stack* load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.load_;
  }
  if (load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(load);
    if (message_arena != submessage_arena) {
      load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.load_ = load;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.Arrival.Load)
}

// .DynStacking.RollingMill.DataModel.TimeStamp ArrivalEstimate = 3;
inline bool Arrival::_internal_has_arrivalestimate() const {
  return this != internal_default_instance() && _impl_.arrivalestimate_ != nullptr;
}
inline bool Arrival::has_arrivalestimate() const {
  return _internal_has_arrivalestimate();
}
inline void Arrival::clear_arrivalestimate() {
  if (GetArenaForAllocation() == nullptr && _impl_.arrivalestimate_ != nullptr) {
    delete _impl_.arrivalestimate_;
  }
  _impl_.arrivalestimate_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::TimeStamp& Arrival::_internal_arrivalestimate() const {
  const ::DynStacking::RollingMill::DataModel::TimeStamp* p = _impl_.arrivalestimate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::TimeStamp&>(
      ::DynStacking::RollingMill::DataModel::_TimeStamp_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::TimeStamp& Arrival::arrivalestimate() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Arrival.ArrivalEstimate)
  return _internal_arrivalestimate();
}
inline void Arrival::unsafe_arena_set_allocated_arrivalestimate(
    ::DynStacking::RollingMill::DataModel::TimeStamp* arrivalestimate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arrivalestimate_);
  }
  _impl_.arrivalestimate_ = arrivalestimate;
  if (arrivalestimate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.Arrival.ArrivalEstimate)
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* Arrival::release_arrivalestimate() {
  
  ::DynStacking::RollingMill::DataModel::TimeStamp* temp = _impl_.arrivalestimate_;
  _impl_.arrivalestimate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* Arrival::unsafe_arena_release_arrivalestimate() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.Arrival.ArrivalEstimate)
  
  ::DynStacking::RollingMill::DataModel::TimeStamp* temp = _impl_.arrivalestimate_;
  _impl_.arrivalestimate_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* Arrival::_internal_mutable_arrivalestimate() {
  
  if (_impl_.arrivalestimate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::TimeStamp>(GetArenaForAllocation());
    _impl_.arrivalestimate_ = p;
  }
  return _impl_.arrivalestimate_;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* Arrival::mutable_arrivalestimate() {
  ::DynStacking::RollingMill::DataModel::TimeStamp* _msg = _internal_mutable_arrivalestimate();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.Arrival.ArrivalEstimate)
  return _msg;
}
inline void Arrival::set_allocated_arrivalestimate(::DynStacking::RollingMill::DataModel::TimeStamp* arrivalestimate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.arrivalestimate_;
  }
  if (arrivalestimate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(arrivalestimate);
    if (message_arena != submessage_arena) {
      arrivalestimate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arrivalestimate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.arrivalestimate_ = arrivalestimate;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.Arrival.ArrivalEstimate)
}

// -------------------------------------------------------------------

// Block

// int32 Id = 1;
inline void Block::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Block::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Block::id() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Block.Id)
  return _internal_id();
}
inline void Block::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Block::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Block.Id)
}

// int32 Sequence = 2;
inline void Block::clear_sequence() {
  _impl_.sequence_ = 0;
}
inline int32_t Block::_internal_sequence() const {
  return _impl_.sequence_;
}
inline int32_t Block::sequence() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Block.Sequence)
  return _internal_sequence();
}
inline void Block::_internal_set_sequence(int32_t value) {
  
  _impl_.sequence_ = value;
}
inline void Block::set_sequence(int32_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Block.Sequence)
}

// .DynStacking.RollingMill.DataModel.MillTypes Type = 3;
inline void Block::clear_type() {
  _impl_.type_ = 0;
}
inline ::DynStacking::RollingMill::DataModel::MillTypes Block::_internal_type() const {
  return static_cast< ::DynStacking::RollingMill::DataModel::MillTypes >(_impl_.type_);
}
inline ::DynStacking::RollingMill::DataModel::MillTypes Block::type() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Block.Type)
  return _internal_type();
}
inline void Block::_internal_set_type(::DynStacking::RollingMill::DataModel::MillTypes value) {
  
  _impl_.type_ = value;
}
inline void Block::set_type(::DynStacking::RollingMill::DataModel::MillTypes value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Block.Type)
}

// int32 ProgramId = 4;
inline void Block::clear_programid() {
  _impl_.programid_ = 0;
}
inline int32_t Block::_internal_programid() const {
  return _impl_.programid_;
}
inline int32_t Block::programid() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Block.ProgramId)
  return _internal_programid();
}
inline void Block::_internal_set_programid(int32_t value) {
  
  _impl_.programid_ = value;
}
inline void Block::set_programid(int32_t value) {
  _internal_set_programid(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Block.ProgramId)
}

// .DynStacking.RollingMill.DataModel.TimeStamp Arrived = 5;
inline bool Block::_internal_has_arrived() const {
  return this != internal_default_instance() && _impl_.arrived_ != nullptr;
}
inline bool Block::has_arrived() const {
  return _internal_has_arrived();
}
inline void Block::clear_arrived() {
  if (GetArenaForAllocation() == nullptr && _impl_.arrived_ != nullptr) {
    delete _impl_.arrived_;
  }
  _impl_.arrived_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::TimeStamp& Block::_internal_arrived() const {
  const ::DynStacking::RollingMill::DataModel::TimeStamp* p = _impl_.arrived_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::TimeStamp&>(
      ::DynStacking::RollingMill::DataModel::_TimeStamp_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::TimeStamp& Block::arrived() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Block.Arrived)
  return _internal_arrived();
}
inline void Block::unsafe_arena_set_allocated_arrived(
    ::DynStacking::RollingMill::DataModel::TimeStamp* arrived) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arrived_);
  }
  _impl_.arrived_ = arrived;
  if (arrived) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.Block.Arrived)
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* Block::release_arrived() {
  
  ::DynStacking::RollingMill::DataModel::TimeStamp* temp = _impl_.arrived_;
  _impl_.arrived_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* Block::unsafe_arena_release_arrived() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.Block.Arrived)
  
  ::DynStacking::RollingMill::DataModel::TimeStamp* temp = _impl_.arrived_;
  _impl_.arrived_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* Block::_internal_mutable_arrived() {
  
  if (_impl_.arrived_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::TimeStamp>(GetArenaForAllocation());
    _impl_.arrived_ = p;
  }
  return _impl_.arrived_;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* Block::mutable_arrived() {
  ::DynStacking::RollingMill::DataModel::TimeStamp* _msg = _internal_mutable_arrived();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.Block.Arrived)
  return _msg;
}
inline void Block::set_allocated_arrived(::DynStacking::RollingMill::DataModel::TimeStamp* arrived) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.arrived_;
  }
  if (arrived) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(arrived);
    if (message_arena != submessage_arena) {
      arrived = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arrived, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.arrived_ = arrived;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.Block.Arrived)
}

// bool Rolled = 6;
inline void Block::clear_rolled() {
  _impl_.rolled_ = false;
}
inline bool Block::_internal_rolled() const {
  return _impl_.rolled_;
}
inline bool Block::rolled() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Block.Rolled)
  return _internal_rolled();
}
inline void Block::_internal_set_rolled(bool value) {
  
  _impl_.rolled_ = value;
}
inline void Block::set_rolled(bool value) {
  _internal_set_rolled(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Block.Rolled)
}

// -------------------------------------------------------------------

// Crane

// int32 Id = 1;
inline void Crane::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Crane::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Crane::id() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Crane.Id)
  return _internal_id();
}
inline void Crane::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Crane::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Crane.Id)
}

// .DynStacking.RollingMill.DataModel.Stack Load = 2;
inline bool Crane::_internal_has_load() const {
  return this != internal_default_instance() && _impl_.load_ != nullptr;
}
inline bool Crane::has_load() const {
  return _internal_has_load();
}
inline void Crane::clear_load() {
  if (GetArenaForAllocation() == nullptr && _impl_.load_ != nullptr) {
    delete _impl_.load_;
  }
  _impl_.load_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::Stack& Crane::_internal_load() const {
  const ::DynStacking::RollingMill::DataModel::Stack* p = _impl_.load_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::Stack&>(
      ::DynStacking::RollingMill::DataModel::_Stack_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::Stack& Crane::load() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Crane.Load)
  return _internal_load();
}
inline void Crane::unsafe_arena_set_allocated_load(
    ::DynStacking::RollingMill::DataModel::Stack* load) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.load_);
  }
  _impl_.load_ = load;
  if (load) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.Crane.Load)
}
inline ::DynStacking::RollingMill::DataModel::Stack* Crane::release_load() {
  
  ::DynStacking::RollingMill::DataModel::Stack* temp = _impl_.load_;
  _impl_.load_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::Stack* Crane::unsafe_arena_release_load() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.Crane.Load)
  
  ::DynStacking::RollingMill::DataModel::Stack* temp = _impl_.load_;
  _impl_.load_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::Stack* Crane::_internal_mutable_load() {
  
  if (_impl_.load_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::Stack>(GetArenaForAllocation());
    _impl_.load_ = p;
  }
  return _impl_.load_;
}
inline ::DynStacking::RollingMill::DataModel::Stack* Crane::mutable_load() {
  ::DynStacking::RollingMill::DataModel::Stack* _msg = _internal_mutable_load();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.Crane.Load)
  return _msg;
}
inline void Crane::set_allocated_load(::DynStacking::RollingMill::DataModel::Stack* load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.load_;
  }
  if (load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(load);
    if (message_arena != submessage_arena) {
      load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.load_ = load;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.Crane.Load)
}

// double GirderPosition = 3;
inline void Crane::clear_girderposition() {
  _impl_.girderposition_ = 0;
}
inline double Crane::_internal_girderposition() const {
  return _impl_.girderposition_;
}
inline double Crane::girderposition() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Crane.GirderPosition)
  return _internal_girderposition();
}
inline void Crane::_internal_set_girderposition(double value) {
  
  _impl_.girderposition_ = value;
}
inline void Crane::set_girderposition(double value) {
  _internal_set_girderposition(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Crane.GirderPosition)
}

// double HoistLevel = 4;
inline void Crane::clear_hoistlevel() {
  _impl_.hoistlevel_ = 0;
}
inline double Crane::_internal_hoistlevel() const {
  return _impl_.hoistlevel_;
}
inline double Crane::hoistlevel() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Crane.HoistLevel)
  return _internal_hoistlevel();
}
inline void Crane::_internal_set_hoistlevel(double value) {
  
  _impl_.hoistlevel_ = value;
}
inline void Crane::set_hoistlevel(double value) {
  _internal_set_hoistlevel(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Crane.HoistLevel)
}

// int32 CraneCapacity = 5;
inline void Crane::clear_cranecapacity() {
  _impl_.cranecapacity_ = 0;
}
inline int32_t Crane::_internal_cranecapacity() const {
  return _impl_.cranecapacity_;
}
inline int32_t Crane::cranecapacity() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Crane.CraneCapacity)
  return _internal_cranecapacity();
}
inline void Crane::_internal_set_cranecapacity(int32_t value) {
  
  _impl_.cranecapacity_ = value;
}
inline void Crane::set_cranecapacity(int32_t value) {
  _internal_set_cranecapacity(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Crane.CraneCapacity)
}

// double Width = 6;
inline void Crane::clear_width() {
  _impl_.width_ = 0;
}
inline double Crane::_internal_width() const {
  return _impl_.width_;
}
inline double Crane::width() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Crane.Width)
  return _internal_width();
}
inline void Crane::_internal_set_width(double value) {
  
  _impl_.width_ = value;
}
inline void Crane::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Crane.Width)
}

// double MinPosition = 7;
inline void Crane::clear_minposition() {
  _impl_.minposition_ = 0;
}
inline double Crane::_internal_minposition() const {
  return _impl_.minposition_;
}
inline double Crane::minposition() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Crane.MinPosition)
  return _internal_minposition();
}
inline void Crane::_internal_set_minposition(double value) {
  
  _impl_.minposition_ = value;
}
inline void Crane::set_minposition(double value) {
  _internal_set_minposition(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Crane.MinPosition)
}

// double MaxPosition = 8;
inline void Crane::clear_maxposition() {
  _impl_.maxposition_ = 0;
}
inline double Crane::_internal_maxposition() const {
  return _impl_.maxposition_;
}
inline double Crane::maxposition() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Crane.MaxPosition)
  return _internal_maxposition();
}
inline void Crane::_internal_set_maxposition(double value) {
  
  _impl_.maxposition_ = value;
}
inline void Crane::set_maxposition(double value) {
  _internal_set_maxposition(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Crane.MaxPosition)
}

// -------------------------------------------------------------------

// CraneMove

// int32 Id = 1;
inline void CraneMove::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t CraneMove::_internal_id() const {
  return _impl_.id_;
}
inline int32_t CraneMove::id() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneMove.Id)
  return _internal_id();
}
inline void CraneMove::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void CraneMove::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.CraneMove.Id)
}

// .DynStacking.RollingMill.DataModel.MoveType Type = 2;
inline void CraneMove::clear_type() {
  _impl_.type_ = 0;
}
inline ::DynStacking::RollingMill::DataModel::MoveType CraneMove::_internal_type() const {
  return static_cast< ::DynStacking::RollingMill::DataModel::MoveType >(_impl_.type_);
}
inline ::DynStacking::RollingMill::DataModel::MoveType CraneMove::type() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneMove.Type)
  return _internal_type();
}
inline void CraneMove::_internal_set_type(::DynStacking::RollingMill::DataModel::MoveType value) {
  
  _impl_.type_ = value;
}
inline void CraneMove::set_type(::DynStacking::RollingMill::DataModel::MoveType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.CraneMove.Type)
}

// int32 PickupLocationId = 3;
inline void CraneMove::clear_pickuplocationid() {
  _impl_.pickuplocationid_ = 0;
}
inline int32_t CraneMove::_internal_pickuplocationid() const {
  return _impl_.pickuplocationid_;
}
inline int32_t CraneMove::pickuplocationid() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneMove.PickupLocationId)
  return _internal_pickuplocationid();
}
inline void CraneMove::_internal_set_pickuplocationid(int32_t value) {
  
  _impl_.pickuplocationid_ = value;
}
inline void CraneMove::set_pickuplocationid(int32_t value) {
  _internal_set_pickuplocationid(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.CraneMove.PickupLocationId)
}

// int32 DropoffLocationId = 4;
inline void CraneMove::clear_dropofflocationid() {
  _impl_.dropofflocationid_ = 0;
}
inline int32_t CraneMove::_internal_dropofflocationid() const {
  return _impl_.dropofflocationid_;
}
inline int32_t CraneMove::dropofflocationid() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneMove.DropoffLocationId)
  return _internal_dropofflocationid();
}
inline void CraneMove::_internal_set_dropofflocationid(int32_t value) {
  
  _impl_.dropofflocationid_ = value;
}
inline void CraneMove::set_dropofflocationid(int32_t value) {
  _internal_set_dropofflocationid(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.CraneMove.DropoffLocationId)
}

// int32 Amount = 7;
inline void CraneMove::clear_amount() {
  _impl_.amount_ = 0;
}
inline int32_t CraneMove::_internal_amount() const {
  return _impl_.amount_;
}
inline int32_t CraneMove::amount() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneMove.Amount)
  return _internal_amount();
}
inline void CraneMove::_internal_set_amount(int32_t value) {
  
  _impl_.amount_ = value;
}
inline void CraneMove::set_amount(int32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.CraneMove.Amount)
}

// .DynStacking.RollingMill.DataModel.TimeStamp ReleaseTime = 8;
inline bool CraneMove::_internal_has_releasetime() const {
  return this != internal_default_instance() && _impl_.releasetime_ != nullptr;
}
inline bool CraneMove::has_releasetime() const {
  return _internal_has_releasetime();
}
inline void CraneMove::clear_releasetime() {
  if (GetArenaForAllocation() == nullptr && _impl_.releasetime_ != nullptr) {
    delete _impl_.releasetime_;
  }
  _impl_.releasetime_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::TimeStamp& CraneMove::_internal_releasetime() const {
  const ::DynStacking::RollingMill::DataModel::TimeStamp* p = _impl_.releasetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::TimeStamp&>(
      ::DynStacking::RollingMill::DataModel::_TimeStamp_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::TimeStamp& CraneMove::releasetime() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneMove.ReleaseTime)
  return _internal_releasetime();
}
inline void CraneMove::unsafe_arena_set_allocated_releasetime(
    ::DynStacking::RollingMill::DataModel::TimeStamp* releasetime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.releasetime_);
  }
  _impl_.releasetime_ = releasetime;
  if (releasetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.CraneMove.ReleaseTime)
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* CraneMove::release_releasetime() {
  
  ::DynStacking::RollingMill::DataModel::TimeStamp* temp = _impl_.releasetime_;
  _impl_.releasetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* CraneMove::unsafe_arena_release_releasetime() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.CraneMove.ReleaseTime)
  
  ::DynStacking::RollingMill::DataModel::TimeStamp* temp = _impl_.releasetime_;
  _impl_.releasetime_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* CraneMove::_internal_mutable_releasetime() {
  
  if (_impl_.releasetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::TimeStamp>(GetArenaForAllocation());
    _impl_.releasetime_ = p;
  }
  return _impl_.releasetime_;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* CraneMove::mutable_releasetime() {
  ::DynStacking::RollingMill::DataModel::TimeStamp* _msg = _internal_mutable_releasetime();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.CraneMove.ReleaseTime)
  return _msg;
}
inline void CraneMove::set_allocated_releasetime(::DynStacking::RollingMill::DataModel::TimeStamp* releasetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.releasetime_;
  }
  if (releasetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(releasetime);
    if (message_arena != submessage_arena) {
      releasetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, releasetime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.releasetime_ = releasetime;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.CraneMove.ReleaseTime)
}

// .DynStacking.RollingMill.DataModel.TimeStamp DueDate = 9;
inline bool CraneMove::_internal_has_duedate() const {
  return this != internal_default_instance() && _impl_.duedate_ != nullptr;
}
inline bool CraneMove::has_duedate() const {
  return _internal_has_duedate();
}
inline void CraneMove::clear_duedate() {
  if (GetArenaForAllocation() == nullptr && _impl_.duedate_ != nullptr) {
    delete _impl_.duedate_;
  }
  _impl_.duedate_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::TimeStamp& CraneMove::_internal_duedate() const {
  const ::DynStacking::RollingMill::DataModel::TimeStamp* p = _impl_.duedate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::TimeStamp&>(
      ::DynStacking::RollingMill::DataModel::_TimeStamp_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::TimeStamp& CraneMove::duedate() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneMove.DueDate)
  return _internal_duedate();
}
inline void CraneMove::unsafe_arena_set_allocated_duedate(
    ::DynStacking::RollingMill::DataModel::TimeStamp* duedate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duedate_);
  }
  _impl_.duedate_ = duedate;
  if (duedate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.CraneMove.DueDate)
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* CraneMove::release_duedate() {
  
  ::DynStacking::RollingMill::DataModel::TimeStamp* temp = _impl_.duedate_;
  _impl_.duedate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* CraneMove::unsafe_arena_release_duedate() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.CraneMove.DueDate)
  
  ::DynStacking::RollingMill::DataModel::TimeStamp* temp = _impl_.duedate_;
  _impl_.duedate_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* CraneMove::_internal_mutable_duedate() {
  
  if (_impl_.duedate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::TimeStamp>(GetArenaForAllocation());
    _impl_.duedate_ = p;
  }
  return _impl_.duedate_;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* CraneMove::mutable_duedate() {
  ::DynStacking::RollingMill::DataModel::TimeStamp* _msg = _internal_mutable_duedate();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.CraneMove.DueDate)
  return _msg;
}
inline void CraneMove::set_allocated_duedate(::DynStacking::RollingMill::DataModel::TimeStamp* duedate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.duedate_;
  }
  if (duedate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(duedate);
    if (message_arena != submessage_arena) {
      duedate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duedate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.duedate_ = duedate;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.CraneMove.DueDate)
}

// int32 RequiredCraneId = 10;
inline void CraneMove::clear_requiredcraneid() {
  _impl_.requiredcraneid_ = 0;
}
inline int32_t CraneMove::_internal_requiredcraneid() const {
  return _impl_.requiredcraneid_;
}
inline int32_t CraneMove::requiredcraneid() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneMove.RequiredCraneId)
  return _internal_requiredcraneid();
}
inline void CraneMove::_internal_set_requiredcraneid(int32_t value) {
  
  _impl_.requiredcraneid_ = value;
}
inline void CraneMove::set_requiredcraneid(int32_t value) {
  _internal_set_requiredcraneid(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.CraneMove.RequiredCraneId)
}

// repeated int32 ProtobufPredecessorIds = 11 [packed = false];
inline int CraneMove::_internal_protobufpredecessorids_size() const {
  return _impl_.protobufpredecessorids_.size();
}
inline int CraneMove::protobufpredecessorids_size() const {
  return _internal_protobufpredecessorids_size();
}
inline void CraneMove::clear_protobufpredecessorids() {
  _impl_.protobufpredecessorids_.Clear();
}
inline int32_t CraneMove::_internal_protobufpredecessorids(int index) const {
  return _impl_.protobufpredecessorids_.Get(index);
}
inline int32_t CraneMove::protobufpredecessorids(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneMove.ProtobufPredecessorIds)
  return _internal_protobufpredecessorids(index);
}
inline void CraneMove::set_protobufpredecessorids(int index, int32_t value) {
  _impl_.protobufpredecessorids_.Set(index, value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.CraneMove.ProtobufPredecessorIds)
}
inline void CraneMove::_internal_add_protobufpredecessorids(int32_t value) {
  _impl_.protobufpredecessorids_.Add(value);
}
inline void CraneMove::add_protobufpredecessorids(int32_t value) {
  _internal_add_protobufpredecessorids(value);
  // @@protoc_insertion_point(field_add:DynStacking.RollingMill.DataModel.CraneMove.ProtobufPredecessorIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CraneMove::_internal_protobufpredecessorids() const {
  return _impl_.protobufpredecessorids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CraneMove::protobufpredecessorids() const {
  // @@protoc_insertion_point(field_list:DynStacking.RollingMill.DataModel.CraneMove.ProtobufPredecessorIds)
  return _internal_protobufpredecessorids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CraneMove::_internal_mutable_protobufpredecessorids() {
  return &_impl_.protobufpredecessorids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CraneMove::mutable_protobufpredecessorids() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.RollingMill.DataModel.CraneMove.ProtobufPredecessorIds)
  return _internal_mutable_protobufpredecessorids();
}

// repeated int32 ProtobufMovedBlockIds = 12 [packed = false];
inline int CraneMove::_internal_protobufmovedblockids_size() const {
  return _impl_.protobufmovedblockids_.size();
}
inline int CraneMove::protobufmovedblockids_size() const {
  return _internal_protobufmovedblockids_size();
}
inline void CraneMove::clear_protobufmovedblockids() {
  _impl_.protobufmovedblockids_.Clear();
}
inline int32_t CraneMove::_internal_protobufmovedblockids(int index) const {
  return _impl_.protobufmovedblockids_.Get(index);
}
inline int32_t CraneMove::protobufmovedblockids(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneMove.ProtobufMovedBlockIds)
  return _internal_protobufmovedblockids(index);
}
inline void CraneMove::set_protobufmovedblockids(int index, int32_t value) {
  _impl_.protobufmovedblockids_.Set(index, value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.CraneMove.ProtobufMovedBlockIds)
}
inline void CraneMove::_internal_add_protobufmovedblockids(int32_t value) {
  _impl_.protobufmovedblockids_.Add(value);
}
inline void CraneMove::add_protobufmovedblockids(int32_t value) {
  _internal_add_protobufmovedblockids(value);
  // @@protoc_insertion_point(field_add:DynStacking.RollingMill.DataModel.CraneMove.ProtobufMovedBlockIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CraneMove::_internal_protobufmovedblockids() const {
  return _impl_.protobufmovedblockids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CraneMove::protobufmovedblockids() const {
  // @@protoc_insertion_point(field_list:DynStacking.RollingMill.DataModel.CraneMove.ProtobufMovedBlockIds)
  return _internal_protobufmovedblockids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CraneMove::_internal_mutable_protobufmovedblockids() {
  return &_impl_.protobufmovedblockids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CraneMove::mutable_protobufmovedblockids() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.RollingMill.DataModel.CraneMove.ProtobufMovedBlockIds)
  return _internal_mutable_protobufmovedblockids();
}

// -------------------------------------------------------------------

// CraneSchedule

// int32 ScheduleNr = 1;
inline void CraneSchedule::clear_schedulenr() {
  _impl_.schedulenr_ = 0;
}
inline int32_t CraneSchedule::_internal_schedulenr() const {
  return _impl_.schedulenr_;
}
inline int32_t CraneSchedule::schedulenr() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneSchedule.ScheduleNr)
  return _internal_schedulenr();
}
inline void CraneSchedule::_internal_set_schedulenr(int32_t value) {
  
  _impl_.schedulenr_ = value;
}
inline void CraneSchedule::set_schedulenr(int32_t value) {
  _internal_set_schedulenr(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.CraneSchedule.ScheduleNr)
}

// repeated .DynStacking.RollingMill.DataModel.CraneScheduleActivity Activities = 2;
inline int CraneSchedule::_internal_activities_size() const {
  return _impl_.activities_.size();
}
inline int CraneSchedule::activities_size() const {
  return _internal_activities_size();
}
inline void CraneSchedule::clear_activities() {
  _impl_.activities_.Clear();
}
inline ::DynStacking::RollingMill::DataModel::CraneScheduleActivity* CraneSchedule::mutable_activities(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.CraneSchedule.Activities)
  return _impl_.activities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::CraneScheduleActivity >*
CraneSchedule::mutable_activities() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.RollingMill.DataModel.CraneSchedule.Activities)
  return &_impl_.activities_;
}
inline const ::DynStacking::RollingMill::DataModel::CraneScheduleActivity& CraneSchedule::_internal_activities(int index) const {
  return _impl_.activities_.Get(index);
}
inline const ::DynStacking::RollingMill::DataModel::CraneScheduleActivity& CraneSchedule::activities(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneSchedule.Activities)
  return _internal_activities(index);
}
inline ::DynStacking::RollingMill::DataModel::CraneScheduleActivity* CraneSchedule::_internal_add_activities() {
  return _impl_.activities_.Add();
}
inline ::DynStacking::RollingMill::DataModel::CraneScheduleActivity* CraneSchedule::add_activities() {
  ::DynStacking::RollingMill::DataModel::CraneScheduleActivity* _add = _internal_add_activities();
  // @@protoc_insertion_point(field_add:DynStacking.RollingMill.DataModel.CraneSchedule.Activities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::CraneScheduleActivity >&
CraneSchedule::activities() const {
  // @@protoc_insertion_point(field_list:DynStacking.RollingMill.DataModel.CraneSchedule.Activities)
  return _impl_.activities_;
}

// -------------------------------------------------------------------

// CraneScheduleActivity

// int32 MoveId = 1;
inline void CraneScheduleActivity::clear_moveid() {
  _impl_.moveid_ = 0;
}
inline int32_t CraneScheduleActivity::_internal_moveid() const {
  return _impl_.moveid_;
}
inline int32_t CraneScheduleActivity::moveid() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneScheduleActivity.MoveId)
  return _internal_moveid();
}
inline void CraneScheduleActivity::_internal_set_moveid(int32_t value) {
  
  _impl_.moveid_ = value;
}
inline void CraneScheduleActivity::set_moveid(int32_t value) {
  _internal_set_moveid(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.CraneScheduleActivity.MoveId)
}

// int32 CraneId = 2;
inline void CraneScheduleActivity::clear_craneid() {
  _impl_.craneid_ = 0;
}
inline int32_t CraneScheduleActivity::_internal_craneid() const {
  return _impl_.craneid_;
}
inline int32_t CraneScheduleActivity::craneid() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneScheduleActivity.CraneId)
  return _internal_craneid();
}
inline void CraneScheduleActivity::_internal_set_craneid(int32_t value) {
  
  _impl_.craneid_ = value;
}
inline void CraneScheduleActivity::set_craneid(int32_t value) {
  _internal_set_craneid(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.CraneScheduleActivity.CraneId)
}

// int32 Priority = 3;
inline void CraneScheduleActivity::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t CraneScheduleActivity::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t CraneScheduleActivity::priority() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneScheduleActivity.Priority)
  return _internal_priority();
}
inline void CraneScheduleActivity::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void CraneScheduleActivity::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.CraneScheduleActivity.Priority)
}

// .DynStacking.RollingMill.DataModel.CraneScheduleActivityState State = 4;
inline void CraneScheduleActivity::clear_state() {
  _impl_.state_ = 0;
}
inline ::DynStacking::RollingMill::DataModel::CraneScheduleActivityState CraneScheduleActivity::_internal_state() const {
  return static_cast< ::DynStacking::RollingMill::DataModel::CraneScheduleActivityState >(_impl_.state_);
}
inline ::DynStacking::RollingMill::DataModel::CraneScheduleActivityState CraneScheduleActivity::state() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.CraneScheduleActivity.State)
  return _internal_state();
}
inline void CraneScheduleActivity::_internal_set_state(::DynStacking::RollingMill::DataModel::CraneScheduleActivityState value) {
  
  _impl_.state_ = value;
}
inline void CraneScheduleActivity::set_state(::DynStacking::RollingMill::DataModel::CraneScheduleActivityState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.CraneScheduleActivity.State)
}

// -------------------------------------------------------------------

// Location

// int32 Id = 1;
inline void Location::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Location::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Location::id() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Location.Id)
  return _internal_id();
}
inline void Location::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Location::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Location.Id)
}

// double GirderPosition = 2;
inline void Location::clear_girderposition() {
  _impl_.girderposition_ = 0;
}
inline double Location::_internal_girderposition() const {
  return _impl_.girderposition_;
}
inline double Location::girderposition() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Location.GirderPosition)
  return _internal_girderposition();
}
inline void Location::_internal_set_girderposition(double value) {
  
  _impl_.girderposition_ = value;
}
inline void Location::set_girderposition(double value) {
  _internal_set_girderposition(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Location.GirderPosition)
}

// int32 MaxHeight = 3;
inline void Location::clear_maxheight() {
  _impl_.maxheight_ = 0;
}
inline int32_t Location::_internal_maxheight() const {
  return _impl_.maxheight_;
}
inline int32_t Location::maxheight() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Location.MaxHeight)
  return _internal_maxheight();
}
inline void Location::_internal_set_maxheight(int32_t value) {
  
  _impl_.maxheight_ = value;
}
inline void Location::set_maxheight(int32_t value) {
  _internal_set_maxheight(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Location.MaxHeight)
}

// .DynStacking.RollingMill.DataModel.Stack Stack = 4;
inline bool Location::_internal_has_stack() const {
  return this != internal_default_instance() && _impl_.stack_ != nullptr;
}
inline bool Location::has_stack() const {
  return _internal_has_stack();
}
inline void Location::clear_stack() {
  if (GetArenaForAllocation() == nullptr && _impl_.stack_ != nullptr) {
    delete _impl_.stack_;
  }
  _impl_.stack_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::Stack& Location::_internal_stack() const {
  const ::DynStacking::RollingMill::DataModel::Stack* p = _impl_.stack_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::Stack&>(
      ::DynStacking::RollingMill::DataModel::_Stack_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::Stack& Location::stack() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Location.Stack)
  return _internal_stack();
}
inline void Location::unsafe_arena_set_allocated_stack(
    ::DynStacking::RollingMill::DataModel::Stack* stack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stack_);
  }
  _impl_.stack_ = stack;
  if (stack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.Location.Stack)
}
inline ::DynStacking::RollingMill::DataModel::Stack* Location::release_stack() {
  
  ::DynStacking::RollingMill::DataModel::Stack* temp = _impl_.stack_;
  _impl_.stack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::Stack* Location::unsafe_arena_release_stack() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.Location.Stack)
  
  ::DynStacking::RollingMill::DataModel::Stack* temp = _impl_.stack_;
  _impl_.stack_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::Stack* Location::_internal_mutable_stack() {
  
  if (_impl_.stack_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::Stack>(GetArenaForAllocation());
    _impl_.stack_ = p;
  }
  return _impl_.stack_;
}
inline ::DynStacking::RollingMill::DataModel::Stack* Location::mutable_stack() {
  ::DynStacking::RollingMill::DataModel::Stack* _msg = _internal_mutable_stack();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.Location.Stack)
  return _msg;
}
inline void Location::set_allocated_stack(::DynStacking::RollingMill::DataModel::Stack* stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stack_;
  }
  if (stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stack);
    if (message_arena != submessage_arena) {
      stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stack, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stack_ = stack;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.Location.Stack)
}

// .DynStacking.RollingMill.DataModel.StackTypes Type = 5;
inline void Location::clear_type() {
  _impl_.type_ = 0;
}
inline ::DynStacking::RollingMill::DataModel::StackTypes Location::_internal_type() const {
  return static_cast< ::DynStacking::RollingMill::DataModel::StackTypes >(_impl_.type_);
}
inline ::DynStacking::RollingMill::DataModel::StackTypes Location::type() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Location.Type)
  return _internal_type();
}
inline void Location::_internal_set_type(::DynStacking::RollingMill::DataModel::StackTypes value) {
  
  _impl_.type_ = value;
}
inline void Location::set_type(::DynStacking::RollingMill::DataModel::StackTypes value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Location.Type)
}

// .DynStacking.RollingMill.DataModel.MillTypes MillType = 6;
inline void Location::clear_milltype() {
  _impl_.milltype_ = 0;
}
inline ::DynStacking::RollingMill::DataModel::MillTypes Location::_internal_milltype() const {
  return static_cast< ::DynStacking::RollingMill::DataModel::MillTypes >(_impl_.milltype_);
}
inline ::DynStacking::RollingMill::DataModel::MillTypes Location::milltype() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Location.MillType)
  return _internal_milltype();
}
inline void Location::_internal_set_milltype(::DynStacking::RollingMill::DataModel::MillTypes value) {
  
  _impl_.milltype_ = value;
}
inline void Location::set_milltype(::DynStacking::RollingMill::DataModel::MillTypes value) {
  _internal_set_milltype(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Location.MillType)
}

// -------------------------------------------------------------------

// MoveRequest

// int32 Id = 1;
inline void MoveRequest::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t MoveRequest::_internal_id() const {
  return _impl_.id_;
}
inline int32_t MoveRequest::id() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.MoveRequest.Id)
  return _internal_id();
}
inline void MoveRequest::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void MoveRequest::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.MoveRequest.Id)
}

// int32 TargetLocationId = 2;
inline void MoveRequest::clear_targetlocationid() {
  _impl_.targetlocationid_ = 0;
}
inline int32_t MoveRequest::_internal_targetlocationid() const {
  return _impl_.targetlocationid_;
}
inline int32_t MoveRequest::targetlocationid() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.MoveRequest.TargetLocationId)
  return _internal_targetlocationid();
}
inline void MoveRequest::_internal_set_targetlocationid(int32_t value) {
  
  _impl_.targetlocationid_ = value;
}
inline void MoveRequest::set_targetlocationid(int32_t value) {
  _internal_set_targetlocationid(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.MoveRequest.TargetLocationId)
}

// int32 BlockId = 3;
inline void MoveRequest::clear_blockid() {
  _impl_.blockid_ = 0;
}
inline int32_t MoveRequest::_internal_blockid() const {
  return _impl_.blockid_;
}
inline int32_t MoveRequest::blockid() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.MoveRequest.BlockId)
  return _internal_blockid();
}
inline void MoveRequest::_internal_set_blockid(int32_t value) {
  
  _impl_.blockid_ = value;
}
inline void MoveRequest::set_blockid(int32_t value) {
  _internal_set_blockid(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.MoveRequest.BlockId)
}

// .DynStacking.RollingMill.DataModel.TimeStamp DueDate = 4;
inline bool MoveRequest::_internal_has_duedate() const {
  return this != internal_default_instance() && _impl_.duedate_ != nullptr;
}
inline bool MoveRequest::has_duedate() const {
  return _internal_has_duedate();
}
inline void MoveRequest::clear_duedate() {
  if (GetArenaForAllocation() == nullptr && _impl_.duedate_ != nullptr) {
    delete _impl_.duedate_;
  }
  _impl_.duedate_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::TimeStamp& MoveRequest::_internal_duedate() const {
  const ::DynStacking::RollingMill::DataModel::TimeStamp* p = _impl_.duedate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::TimeStamp&>(
      ::DynStacking::RollingMill::DataModel::_TimeStamp_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::TimeStamp& MoveRequest::duedate() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.MoveRequest.DueDate)
  return _internal_duedate();
}
inline void MoveRequest::unsafe_arena_set_allocated_duedate(
    ::DynStacking::RollingMill::DataModel::TimeStamp* duedate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duedate_);
  }
  _impl_.duedate_ = duedate;
  if (duedate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.MoveRequest.DueDate)
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* MoveRequest::release_duedate() {
  
  ::DynStacking::RollingMill::DataModel::TimeStamp* temp = _impl_.duedate_;
  _impl_.duedate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* MoveRequest::unsafe_arena_release_duedate() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.MoveRequest.DueDate)
  
  ::DynStacking::RollingMill::DataModel::TimeStamp* temp = _impl_.duedate_;
  _impl_.duedate_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* MoveRequest::_internal_mutable_duedate() {
  
  if (_impl_.duedate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::TimeStamp>(GetArenaForAllocation());
    _impl_.duedate_ = p;
  }
  return _impl_.duedate_;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* MoveRequest::mutable_duedate() {
  ::DynStacking::RollingMill::DataModel::TimeStamp* _msg = _internal_mutable_duedate();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.MoveRequest.DueDate)
  return _msg;
}
inline void MoveRequest::set_allocated_duedate(::DynStacking::RollingMill::DataModel::TimeStamp* duedate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.duedate_;
  }
  if (duedate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(duedate);
    if (message_arena != submessage_arena) {
      duedate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duedate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.duedate_ = duedate;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.MoveRequest.DueDate)
}

// -------------------------------------------------------------------

// Performance

// int32 CraneManipulations = 1;
inline void Performance::clear_cranemanipulations() {
  _impl_.cranemanipulations_ = 0;
}
inline int32_t Performance::_internal_cranemanipulations() const {
  return _impl_.cranemanipulations_;
}
inline int32_t Performance::cranemanipulations() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Performance.CraneManipulations)
  return _internal_cranemanipulations();
}
inline void Performance::_internal_set_cranemanipulations(int32_t value) {
  
  _impl_.cranemanipulations_ = value;
}
inline void Performance::set_cranemanipulations(int32_t value) {
  _internal_set_cranemanipulations(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Performance.CraneManipulations)
}

// double ServiceLevelMean = 2;
inline void Performance::clear_servicelevelmean() {
  _impl_.servicelevelmean_ = 0;
}
inline double Performance::_internal_servicelevelmean() const {
  return _impl_.servicelevelmean_;
}
inline double Performance::servicelevelmean() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Performance.ServiceLevelMean)
  return _internal_servicelevelmean();
}
inline void Performance::_internal_set_servicelevelmean(double value) {
  
  _impl_.servicelevelmean_ = value;
}
inline void Performance::set_servicelevelmean(double value) {
  _internal_set_servicelevelmean(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Performance.ServiceLevelMean)
}

// double LeadTimeMean = 3;
inline void Performance::clear_leadtimemean() {
  _impl_.leadtimemean_ = 0;
}
inline double Performance::_internal_leadtimemean() const {
  return _impl_.leadtimemean_;
}
inline double Performance::leadtimemean() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Performance.LeadTimeMean)
  return _internal_leadtimemean();
}
inline void Performance::_internal_set_leadtimemean(double value) {
  
  _impl_.leadtimemean_ = value;
}
inline void Performance::set_leadtimemean(double value) {
  _internal_set_leadtimemean(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Performance.LeadTimeMean)
}

// int32 DeliveredBlocks = 4;
inline void Performance::clear_deliveredblocks() {
  _impl_.deliveredblocks_ = 0;
}
inline int32_t Performance::_internal_deliveredblocks() const {
  return _impl_.deliveredblocks_;
}
inline int32_t Performance::deliveredblocks() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Performance.DeliveredBlocks)
  return _internal_deliveredblocks();
}
inline void Performance::_internal_set_deliveredblocks(int32_t value) {
  
  _impl_.deliveredblocks_ = value;
}
inline void Performance::set_deliveredblocks(int32_t value) {
  _internal_set_deliveredblocks(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Performance.DeliveredBlocks)
}

// int32 TotalBlocksOnTime = 5;
inline void Performance::clear_totalblocksontime() {
  _impl_.totalblocksontime_ = 0;
}
inline int32_t Performance::_internal_totalblocksontime() const {
  return _impl_.totalblocksontime_;
}
inline int32_t Performance::totalblocksontime() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Performance.TotalBlocksOnTime)
  return _internal_totalblocksontime();
}
inline void Performance::_internal_set_totalblocksontime(int32_t value) {
  
  _impl_.totalblocksontime_ = value;
}
inline void Performance::set_totalblocksontime(int32_t value) {
  _internal_set_totalblocksontime(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Performance.TotalBlocksOnTime)
}

// double TardinessMean = 6;
inline void Performance::clear_tardinessmean() {
  _impl_.tardinessmean_ = 0;
}
inline double Performance::_internal_tardinessmean() const {
  return _impl_.tardinessmean_;
}
inline double Performance::tardinessmean() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Performance.TardinessMean)
  return _internal_tardinessmean();
}
inline void Performance::_internal_set_tardinessmean(double value) {
  
  _impl_.tardinessmean_ = value;
}
inline void Performance::set_tardinessmean(double value) {
  _internal_set_tardinessmean(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Performance.TardinessMean)
}

// double ShuffleBufferUtilizationMean = 7;
inline void Performance::clear_shufflebufferutilizationmean() {
  _impl_.shufflebufferutilizationmean_ = 0;
}
inline double Performance::_internal_shufflebufferutilizationmean() const {
  return _impl_.shufflebufferutilizationmean_;
}
inline double Performance::shufflebufferutilizationmean() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Performance.ShuffleBufferUtilizationMean)
  return _internal_shufflebufferutilizationmean();
}
inline void Performance::_internal_set_shufflebufferutilizationmean(double value) {
  
  _impl_.shufflebufferutilizationmean_ = value;
}
inline void Performance::set_shufflebufferutilizationmean(double value) {
  _internal_set_shufflebufferutilizationmean(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Performance.ShuffleBufferUtilizationMean)
}

// double SortedBufferUtilizationMean = 8;
inline void Performance::clear_sortedbufferutilizationmean() {
  _impl_.sortedbufferutilizationmean_ = 0;
}
inline double Performance::_internal_sortedbufferutilizationmean() const {
  return _impl_.sortedbufferutilizationmean_;
}
inline double Performance::sortedbufferutilizationmean() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Performance.SortedBufferUtilizationMean)
  return _internal_sortedbufferutilizationmean();
}
inline void Performance::_internal_set_sortedbufferutilizationmean(double value) {
  
  _impl_.sortedbufferutilizationmean_ = value;
}
inline void Performance::set_sortedbufferutilizationmean(double value) {
  _internal_set_sortedbufferutilizationmean(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Performance.SortedBufferUtilizationMean)
}

// double ShuffleCraneUtilizationMean = 9;
inline void Performance::clear_shufflecraneutilizationmean() {
  _impl_.shufflecraneutilizationmean_ = 0;
}
inline double Performance::_internal_shufflecraneutilizationmean() const {
  return _impl_.shufflecraneutilizationmean_;
}
inline double Performance::shufflecraneutilizationmean() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Performance.ShuffleCraneUtilizationMean)
  return _internal_shufflecraneutilizationmean();
}
inline void Performance::_internal_set_shufflecraneutilizationmean(double value) {
  
  _impl_.shufflecraneutilizationmean_ = value;
}
inline void Performance::set_shufflecraneutilizationmean(double value) {
  _internal_set_shufflecraneutilizationmean(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Performance.ShuffleCraneUtilizationMean)
}

// double HandoverCraneUtilizationMean = 10;
inline void Performance::clear_handovercraneutilizationmean() {
  _impl_.handovercraneutilizationmean_ = 0;
}
inline double Performance::_internal_handovercraneutilizationmean() const {
  return _impl_.handovercraneutilizationmean_;
}
inline double Performance::handovercraneutilizationmean() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Performance.HandoverCraneUtilizationMean)
  return _internal_handovercraneutilizationmean();
}
inline void Performance::_internal_set_handovercraneutilizationmean(double value) {
  
  _impl_.handovercraneutilizationmean_ = value;
}
inline void Performance::set_handovercraneutilizationmean(double value) {
  _internal_set_handovercraneutilizationmean(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Performance.HandoverCraneUtilizationMean)
}

// double MillAUtilizationMean = 11;
inline void Performance::clear_millautilizationmean() {
  _impl_.millautilizationmean_ = 0;
}
inline double Performance::_internal_millautilizationmean() const {
  return _impl_.millautilizationmean_;
}
inline double Performance::millautilizationmean() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Performance.MillAUtilizationMean)
  return _internal_millautilizationmean();
}
inline void Performance::_internal_set_millautilizationmean(double value) {
  
  _impl_.millautilizationmean_ = value;
}
inline void Performance::set_millautilizationmean(double value) {
  _internal_set_millautilizationmean(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Performance.MillAUtilizationMean)
}

// double MillBUtilizationMean = 12;
inline void Performance::clear_millbutilizationmean() {
  _impl_.millbutilizationmean_ = 0;
}
inline double Performance::_internal_millbutilizationmean() const {
  return _impl_.millbutilizationmean_;
}
inline double Performance::millbutilizationmean() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Performance.MillBUtilizationMean)
  return _internal_millbutilizationmean();
}
inline void Performance::_internal_set_millbutilizationmean(double value) {
  
  _impl_.millbutilizationmean_ = value;
}
inline void Performance::set_millbutilizationmean(double value) {
  _internal_set_millbutilizationmean(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Performance.MillBUtilizationMean)
}

// int32 RollingProgramMessups = 13;
inline void Performance::clear_rollingprogrammessups() {
  _impl_.rollingprogrammessups_ = 0;
}
inline int32_t Performance::_internal_rollingprogrammessups() const {
  return _impl_.rollingprogrammessups_;
}
inline int32_t Performance::rollingprogrammessups() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Performance.RollingProgramMessups)
  return _internal_rollingprogrammessups();
}
inline void Performance::_internal_set_rollingprogrammessups(int32_t value) {
  
  _impl_.rollingprogrammessups_ = value;
}
inline void Performance::set_rollingprogrammessups(int32_t value) {
  _internal_set_rollingprogrammessups(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Performance.RollingProgramMessups)
}

// double BlockedMillTime = 14;
inline void Performance::clear_blockedmilltime() {
  _impl_.blockedmilltime_ = 0;
}
inline double Performance::_internal_blockedmilltime() const {
  return _impl_.blockedmilltime_;
}
inline double Performance::blockedmilltime() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Performance.BlockedMillTime)
  return _internal_blockedmilltime();
}
inline void Performance::_internal_set_blockedmilltime(double value) {
  
  _impl_.blockedmilltime_ = value;
}
inline void Performance::set_blockedmilltime(double value) {
  _internal_set_blockedmilltime(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Performance.BlockedMillTime)
}

// -------------------------------------------------------------------

// PlannedCraneMoves

// int32 SequenceNr = 1;
inline void PlannedCraneMoves::clear_sequencenr() {
  _impl_.sequencenr_ = 0;
}
inline int32_t PlannedCraneMoves::_internal_sequencenr() const {
  return _impl_.sequencenr_;
}
inline int32_t PlannedCraneMoves::sequencenr() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.PlannedCraneMoves.SequenceNr)
  return _internal_sequencenr();
}
inline void PlannedCraneMoves::_internal_set_sequencenr(int32_t value) {
  
  _impl_.sequencenr_ = value;
}
inline void PlannedCraneMoves::set_sequencenr(int32_t value) {
  _internal_set_sequencenr(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.PlannedCraneMoves.SequenceNr)
}

// repeated .DynStacking.RollingMill.DataModel.CraneMove Moves = 2;
inline int PlannedCraneMoves::_internal_moves_size() const {
  return _impl_.moves_.size();
}
inline int PlannedCraneMoves::moves_size() const {
  return _internal_moves_size();
}
inline void PlannedCraneMoves::clear_moves() {
  _impl_.moves_.Clear();
}
inline ::DynStacking::RollingMill::DataModel::CraneMove* PlannedCraneMoves::mutable_moves(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.PlannedCraneMoves.Moves)
  return _impl_.moves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::CraneMove >*
PlannedCraneMoves::mutable_moves() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.RollingMill.DataModel.PlannedCraneMoves.Moves)
  return &_impl_.moves_;
}
inline const ::DynStacking::RollingMill::DataModel::CraneMove& PlannedCraneMoves::_internal_moves(int index) const {
  return _impl_.moves_.Get(index);
}
inline const ::DynStacking::RollingMill::DataModel::CraneMove& PlannedCraneMoves::moves(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.PlannedCraneMoves.Moves)
  return _internal_moves(index);
}
inline ::DynStacking::RollingMill::DataModel::CraneMove* PlannedCraneMoves::_internal_add_moves() {
  return _impl_.moves_.Add();
}
inline ::DynStacking::RollingMill::DataModel::CraneMove* PlannedCraneMoves::add_moves() {
  ::DynStacking::RollingMill::DataModel::CraneMove* _add = _internal_add_moves();
  // @@protoc_insertion_point(field_add:DynStacking.RollingMill.DataModel.PlannedCraneMoves.Moves)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::CraneMove >&
PlannedCraneMoves::moves() const {
  // @@protoc_insertion_point(field_list:DynStacking.RollingMill.DataModel.PlannedCraneMoves.Moves)
  return _impl_.moves_;
}

// -------------------------------------------------------------------

// Stack

// repeated .DynStacking.RollingMill.DataModel.Block BottomToTop = 1;
inline int Stack::_internal_bottomtotop_size() const {
  return _impl_.bottomtotop_.size();
}
inline int Stack::bottomtotop_size() const {
  return _internal_bottomtotop_size();
}
inline void Stack::clear_bottomtotop() {
  _impl_.bottomtotop_.Clear();
}
inline ::DynStacking::RollingMill::DataModel::Block* Stack::mutable_bottomtotop(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.Stack.BottomToTop)
  return _impl_.bottomtotop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Block >*
Stack::mutable_bottomtotop() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.RollingMill.DataModel.Stack.BottomToTop)
  return &_impl_.bottomtotop_;
}
inline const ::DynStacking::RollingMill::DataModel::Block& Stack::_internal_bottomtotop(int index) const {
  return _impl_.bottomtotop_.Get(index);
}
inline const ::DynStacking::RollingMill::DataModel::Block& Stack::bottomtotop(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Stack.BottomToTop)
  return _internal_bottomtotop(index);
}
inline ::DynStacking::RollingMill::DataModel::Block* Stack::_internal_add_bottomtotop() {
  return _impl_.bottomtotop_.Add();
}
inline ::DynStacking::RollingMill::DataModel::Block* Stack::add_bottomtotop() {
  ::DynStacking::RollingMill::DataModel::Block* _add = _internal_add_bottomtotop();
  // @@protoc_insertion_point(field_add:DynStacking.RollingMill.DataModel.Stack.BottomToTop)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Block >&
Stack::bottomtotop() const {
  // @@protoc_insertion_point(field_list:DynStacking.RollingMill.DataModel.Stack.BottomToTop)
  return _impl_.bottomtotop_;
}

// -------------------------------------------------------------------

// TimeStamp

// int64 MilliSeconds = 1;
inline void TimeStamp::clear_milliseconds() {
  _impl_.milliseconds_ = int64_t{0};
}
inline int64_t TimeStamp::_internal_milliseconds() const {
  return _impl_.milliseconds_;
}
inline int64_t TimeStamp::milliseconds() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.TimeStamp.MilliSeconds)
  return _internal_milliseconds();
}
inline void TimeStamp::_internal_set_milliseconds(int64_t value) {
  
  _impl_.milliseconds_ = value;
}
inline void TimeStamp::set_milliseconds(int64_t value) {
  _internal_set_milliseconds(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.TimeStamp.MilliSeconds)
}

// -------------------------------------------------------------------

// Uncertainties

// repeated double ArrivalIntervals = 1 [packed = false];
inline int Uncertainties::_internal_arrivalintervals_size() const {
  return _impl_.arrivalintervals_.size();
}
inline int Uncertainties::arrivalintervals_size() const {
  return _internal_arrivalintervals_size();
}
inline void Uncertainties::clear_arrivalintervals() {
  _impl_.arrivalintervals_.Clear();
}
inline double Uncertainties::_internal_arrivalintervals(int index) const {
  return _impl_.arrivalintervals_.Get(index);
}
inline double Uncertainties::arrivalintervals(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Uncertainties.ArrivalIntervals)
  return _internal_arrivalintervals(index);
}
inline void Uncertainties::set_arrivalintervals(int index, double value) {
  _impl_.arrivalintervals_.Set(index, value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Uncertainties.ArrivalIntervals)
}
inline void Uncertainties::_internal_add_arrivalintervals(double value) {
  _impl_.arrivalintervals_.Add(value);
}
inline void Uncertainties::add_arrivalintervals(double value) {
  _internal_add_arrivalintervals(value);
  // @@protoc_insertion_point(field_add:DynStacking.RollingMill.DataModel.Uncertainties.ArrivalIntervals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Uncertainties::_internal_arrivalintervals() const {
  return _impl_.arrivalintervals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Uncertainties::arrivalintervals() const {
  // @@protoc_insertion_point(field_list:DynStacking.RollingMill.DataModel.Uncertainties.ArrivalIntervals)
  return _internal_arrivalintervals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Uncertainties::_internal_mutable_arrivalintervals() {
  return &_impl_.arrivalintervals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Uncertainties::mutable_arrivalintervals() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.RollingMill.DataModel.Uncertainties.ArrivalIntervals)
  return _internal_mutable_arrivalintervals();
}

// repeated double CraneMoveTimes = 2 [packed = false];
inline int Uncertainties::_internal_cranemovetimes_size() const {
  return _impl_.cranemovetimes_.size();
}
inline int Uncertainties::cranemovetimes_size() const {
  return _internal_cranemovetimes_size();
}
inline void Uncertainties::clear_cranemovetimes() {
  _impl_.cranemovetimes_.Clear();
}
inline double Uncertainties::_internal_cranemovetimes(int index) const {
  return _impl_.cranemovetimes_.Get(index);
}
inline double Uncertainties::cranemovetimes(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Uncertainties.CraneMoveTimes)
  return _internal_cranemovetimes(index);
}
inline void Uncertainties::set_cranemovetimes(int index, double value) {
  _impl_.cranemovetimes_.Set(index, value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Uncertainties.CraneMoveTimes)
}
inline void Uncertainties::_internal_add_cranemovetimes(double value) {
  _impl_.cranemovetimes_.Add(value);
}
inline void Uncertainties::add_cranemovetimes(double value) {
  _internal_add_cranemovetimes(value);
  // @@protoc_insertion_point(field_add:DynStacking.RollingMill.DataModel.Uncertainties.CraneMoveTimes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Uncertainties::_internal_cranemovetimes() const {
  return _impl_.cranemovetimes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Uncertainties::cranemovetimes() const {
  // @@protoc_insertion_point(field_list:DynStacking.RollingMill.DataModel.Uncertainties.CraneMoveTimes)
  return _internal_cranemovetimes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Uncertainties::_internal_mutable_cranemovetimes() {
  return &_impl_.cranemovetimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Uncertainties::mutable_cranemovetimes() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.RollingMill.DataModel.Uncertainties.CraneMoveTimes)
  return _internal_mutable_cranemovetimes();
}

// repeated double MillBlockIntervals = 3 [packed = false];
inline int Uncertainties::_internal_millblockintervals_size() const {
  return _impl_.millblockintervals_.size();
}
inline int Uncertainties::millblockintervals_size() const {
  return _internal_millblockintervals_size();
}
inline void Uncertainties::clear_millblockintervals() {
  _impl_.millblockintervals_.Clear();
}
inline double Uncertainties::_internal_millblockintervals(int index) const {
  return _impl_.millblockintervals_.Get(index);
}
inline double Uncertainties::millblockintervals(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.Uncertainties.MillBlockIntervals)
  return _internal_millblockintervals(index);
}
inline void Uncertainties::set_millblockintervals(int index, double value) {
  _impl_.millblockintervals_.Set(index, value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.Uncertainties.MillBlockIntervals)
}
inline void Uncertainties::_internal_add_millblockintervals(double value) {
  _impl_.millblockintervals_.Add(value);
}
inline void Uncertainties::add_millblockintervals(double value) {
  _internal_add_millblockintervals(value);
  // @@protoc_insertion_point(field_add:DynStacking.RollingMill.DataModel.Uncertainties.MillBlockIntervals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Uncertainties::_internal_millblockintervals() const {
  return _impl_.millblockintervals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Uncertainties::millblockintervals() const {
  // @@protoc_insertion_point(field_list:DynStacking.RollingMill.DataModel.Uncertainties.MillBlockIntervals)
  return _internal_millblockintervals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Uncertainties::_internal_mutable_millblockintervals() {
  return &_impl_.millblockintervals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Uncertainties::mutable_millblockintervals() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.RollingMill.DataModel.Uncertainties.MillBlockIntervals)
  return _internal_mutable_millblockintervals();
}

// -------------------------------------------------------------------

// World

// .DynStacking.RollingMill.DataModel.TimeStamp Now = 1;
inline bool World::_internal_has_now() const {
  return this != internal_default_instance() && _impl_.now_ != nullptr;
}
inline bool World::has_now() const {
  return _internal_has_now();
}
inline void World::clear_now() {
  if (GetArenaForAllocation() == nullptr && _impl_.now_ != nullptr) {
    delete _impl_.now_;
  }
  _impl_.now_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::TimeStamp& World::_internal_now() const {
  const ::DynStacking::RollingMill::DataModel::TimeStamp* p = _impl_.now_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::TimeStamp&>(
      ::DynStacking::RollingMill::DataModel::_TimeStamp_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::TimeStamp& World::now() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.World.Now)
  return _internal_now();
}
inline void World::unsafe_arena_set_allocated_now(
    ::DynStacking::RollingMill::DataModel::TimeStamp* now) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.now_);
  }
  _impl_.now_ = now;
  if (now) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.World.Now)
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* World::release_now() {
  
  ::DynStacking::RollingMill::DataModel::TimeStamp* temp = _impl_.now_;
  _impl_.now_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* World::unsafe_arena_release_now() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.World.Now)
  
  ::DynStacking::RollingMill::DataModel::TimeStamp* temp = _impl_.now_;
  _impl_.now_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* World::_internal_mutable_now() {
  
  if (_impl_.now_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::TimeStamp>(GetArenaForAllocation());
    _impl_.now_ = p;
  }
  return _impl_.now_;
}
inline ::DynStacking::RollingMill::DataModel::TimeStamp* World::mutable_now() {
  ::DynStacking::RollingMill::DataModel::TimeStamp* _msg = _internal_mutable_now();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.World.Now)
  return _msg;
}
inline void World::set_allocated_now(::DynStacking::RollingMill::DataModel::TimeStamp* now) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.now_;
  }
  if (now) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(now);
    if (message_arena != submessage_arena) {
      now = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, now, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.now_ = now;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.World.Now)
}

// int32 Height = 2;
inline void World::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t World::_internal_height() const {
  return _impl_.height_;
}
inline int32_t World::height() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.World.Height)
  return _internal_height();
}
inline void World::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void World::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.World.Height)
}

// double Width = 3;
inline void World::clear_width() {
  _impl_.width_ = 0;
}
inline double World::_internal_width() const {
  return _impl_.width_;
}
inline double World::width() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.World.Width)
  return _internal_width();
}
inline void World::_internal_set_width(double value) {
  
  _impl_.width_ = value;
}
inline void World::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:DynStacking.RollingMill.DataModel.World.Width)
}

// repeated .DynStacking.RollingMill.DataModel.Location Locations = 4;
inline int World::_internal_locations_size() const {
  return _impl_.locations_.size();
}
inline int World::locations_size() const {
  return _internal_locations_size();
}
inline void World::clear_locations() {
  _impl_.locations_.Clear();
}
inline ::DynStacking::RollingMill::DataModel::Location* World::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.World.Locations)
  return _impl_.locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Location >*
World::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.RollingMill.DataModel.World.Locations)
  return &_impl_.locations_;
}
inline const ::DynStacking::RollingMill::DataModel::Location& World::_internal_locations(int index) const {
  return _impl_.locations_.Get(index);
}
inline const ::DynStacking::RollingMill::DataModel::Location& World::locations(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.World.Locations)
  return _internal_locations(index);
}
inline ::DynStacking::RollingMill::DataModel::Location* World::_internal_add_locations() {
  return _impl_.locations_.Add();
}
inline ::DynStacking::RollingMill::DataModel::Location* World::add_locations() {
  ::DynStacking::RollingMill::DataModel::Location* _add = _internal_add_locations();
  // @@protoc_insertion_point(field_add:DynStacking.RollingMill.DataModel.World.Locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Location >&
World::locations() const {
  // @@protoc_insertion_point(field_list:DynStacking.RollingMill.DataModel.World.Locations)
  return _impl_.locations_;
}

// repeated .DynStacking.RollingMill.DataModel.Block BlocksAtSlabYard = 5;
inline int World::_internal_blocksatslabyard_size() const {
  return _impl_.blocksatslabyard_.size();
}
inline int World::blocksatslabyard_size() const {
  return _internal_blocksatslabyard_size();
}
inline void World::clear_blocksatslabyard() {
  _impl_.blocksatslabyard_.Clear();
}
inline ::DynStacking::RollingMill::DataModel::Block* World::mutable_blocksatslabyard(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.World.BlocksAtSlabYard)
  return _impl_.blocksatslabyard_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Block >*
World::mutable_blocksatslabyard() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.RollingMill.DataModel.World.BlocksAtSlabYard)
  return &_impl_.blocksatslabyard_;
}
inline const ::DynStacking::RollingMill::DataModel::Block& World::_internal_blocksatslabyard(int index) const {
  return _impl_.blocksatslabyard_.Get(index);
}
inline const ::DynStacking::RollingMill::DataModel::Block& World::blocksatslabyard(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.World.BlocksAtSlabYard)
  return _internal_blocksatslabyard(index);
}
inline ::DynStacking::RollingMill::DataModel::Block* World::_internal_add_blocksatslabyard() {
  return _impl_.blocksatslabyard_.Add();
}
inline ::DynStacking::RollingMill::DataModel::Block* World::add_blocksatslabyard() {
  ::DynStacking::RollingMill::DataModel::Block* _add = _internal_add_blocksatslabyard();
  // @@protoc_insertion_point(field_add:DynStacking.RollingMill.DataModel.World.BlocksAtSlabYard)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Block >&
World::blocksatslabyard() const {
  // @@protoc_insertion_point(field_list:DynStacking.RollingMill.DataModel.World.BlocksAtSlabYard)
  return _impl_.blocksatslabyard_;
}

// repeated .DynStacking.RollingMill.DataModel.Arrival ArrivalsFromSlabYard = 6;
inline int World::_internal_arrivalsfromslabyard_size() const {
  return _impl_.arrivalsfromslabyard_.size();
}
inline int World::arrivalsfromslabyard_size() const {
  return _internal_arrivalsfromslabyard_size();
}
inline void World::clear_arrivalsfromslabyard() {
  _impl_.arrivalsfromslabyard_.Clear();
}
inline ::DynStacking::RollingMill::DataModel::Arrival* World::mutable_arrivalsfromslabyard(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.World.ArrivalsFromSlabYard)
  return _impl_.arrivalsfromslabyard_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Arrival >*
World::mutable_arrivalsfromslabyard() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.RollingMill.DataModel.World.ArrivalsFromSlabYard)
  return &_impl_.arrivalsfromslabyard_;
}
inline const ::DynStacking::RollingMill::DataModel::Arrival& World::_internal_arrivalsfromslabyard(int index) const {
  return _impl_.arrivalsfromslabyard_.Get(index);
}
inline const ::DynStacking::RollingMill::DataModel::Arrival& World::arrivalsfromslabyard(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.World.ArrivalsFromSlabYard)
  return _internal_arrivalsfromslabyard(index);
}
inline ::DynStacking::RollingMill::DataModel::Arrival* World::_internal_add_arrivalsfromslabyard() {
  return _impl_.arrivalsfromslabyard_.Add();
}
inline ::DynStacking::RollingMill::DataModel::Arrival* World::add_arrivalsfromslabyard() {
  ::DynStacking::RollingMill::DataModel::Arrival* _add = _internal_add_arrivalsfromslabyard();
  // @@protoc_insertion_point(field_add:DynStacking.RollingMill.DataModel.World.ArrivalsFromSlabYard)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::Arrival >&
World::arrivalsfromslabyard() const {
  // @@protoc_insertion_point(field_list:DynStacking.RollingMill.DataModel.World.ArrivalsFromSlabYard)
  return _impl_.arrivalsfromslabyard_;
}

// .DynStacking.RollingMill.DataModel.PlannedCraneMoves CraneMoves = 7;
inline bool World::_internal_has_cranemoves() const {
  return this != internal_default_instance() && _impl_.cranemoves_ != nullptr;
}
inline bool World::has_cranemoves() const {
  return _internal_has_cranemoves();
}
inline void World::clear_cranemoves() {
  if (GetArenaForAllocation() == nullptr && _impl_.cranemoves_ != nullptr) {
    delete _impl_.cranemoves_;
  }
  _impl_.cranemoves_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::PlannedCraneMoves& World::_internal_cranemoves() const {
  const ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* p = _impl_.cranemoves_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::PlannedCraneMoves&>(
      ::DynStacking::RollingMill::DataModel::_PlannedCraneMoves_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::PlannedCraneMoves& World::cranemoves() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.World.CraneMoves)
  return _internal_cranemoves();
}
inline void World::unsafe_arena_set_allocated_cranemoves(
    ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* cranemoves) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cranemoves_);
  }
  _impl_.cranemoves_ = cranemoves;
  if (cranemoves) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.World.CraneMoves)
}
inline ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* World::release_cranemoves() {
  
  ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* temp = _impl_.cranemoves_;
  _impl_.cranemoves_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* World::unsafe_arena_release_cranemoves() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.World.CraneMoves)
  
  ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* temp = _impl_.cranemoves_;
  _impl_.cranemoves_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* World::_internal_mutable_cranemoves() {
  
  if (_impl_.cranemoves_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::PlannedCraneMoves>(GetArenaForAllocation());
    _impl_.cranemoves_ = p;
  }
  return _impl_.cranemoves_;
}
inline ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* World::mutable_cranemoves() {
  ::DynStacking::RollingMill::DataModel::PlannedCraneMoves* _msg = _internal_mutable_cranemoves();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.World.CraneMoves)
  return _msg;
}
inline void World::set_allocated_cranemoves(::DynStacking::RollingMill::DataModel::PlannedCraneMoves* cranemoves) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cranemoves_;
  }
  if (cranemoves) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cranemoves);
    if (message_arena != submessage_arena) {
      cranemoves = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cranemoves, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cranemoves_ = cranemoves;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.World.CraneMoves)
}

// repeated .DynStacking.RollingMill.DataModel.MoveRequest MoveRequests = 8;
inline int World::_internal_moverequests_size() const {
  return _impl_.moverequests_.size();
}
inline int World::moverequests_size() const {
  return _internal_moverequests_size();
}
inline void World::clear_moverequests() {
  _impl_.moverequests_.Clear();
}
inline ::DynStacking::RollingMill::DataModel::MoveRequest* World::mutable_moverequests(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.World.MoveRequests)
  return _impl_.moverequests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::MoveRequest >*
World::mutable_moverequests() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.RollingMill.DataModel.World.MoveRequests)
  return &_impl_.moverequests_;
}
inline const ::DynStacking::RollingMill::DataModel::MoveRequest& World::_internal_moverequests(int index) const {
  return _impl_.moverequests_.Get(index);
}
inline const ::DynStacking::RollingMill::DataModel::MoveRequest& World::moverequests(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.World.MoveRequests)
  return _internal_moverequests(index);
}
inline ::DynStacking::RollingMill::DataModel::MoveRequest* World::_internal_add_moverequests() {
  return _impl_.moverequests_.Add();
}
inline ::DynStacking::RollingMill::DataModel::MoveRequest* World::add_moverequests() {
  ::DynStacking::RollingMill::DataModel::MoveRequest* _add = _internal_add_moverequests();
  // @@protoc_insertion_point(field_add:DynStacking.RollingMill.DataModel.World.MoveRequests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::RollingMill::DataModel::MoveRequest >&
World::moverequests() const {
  // @@protoc_insertion_point(field_list:DynStacking.RollingMill.DataModel.World.MoveRequests)
  return _impl_.moverequests_;
}

// .DynStacking.RollingMill.DataModel.CraneSchedule CraneSchedule = 9;
inline bool World::_internal_has_craneschedule() const {
  return this != internal_default_instance() && _impl_.craneschedule_ != nullptr;
}
inline bool World::has_craneschedule() const {
  return _internal_has_craneschedule();
}
inline void World::clear_craneschedule() {
  if (GetArenaForAllocation() == nullptr && _impl_.craneschedule_ != nullptr) {
    delete _impl_.craneschedule_;
  }
  _impl_.craneschedule_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::CraneSchedule& World::_internal_craneschedule() const {
  const ::DynStacking::RollingMill::DataModel::CraneSchedule* p = _impl_.craneschedule_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::CraneSchedule&>(
      ::DynStacking::RollingMill::DataModel::_CraneSchedule_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::CraneSchedule& World::craneschedule() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.World.CraneSchedule)
  return _internal_craneschedule();
}
inline void World::unsafe_arena_set_allocated_craneschedule(
    ::DynStacking::RollingMill::DataModel::CraneSchedule* craneschedule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.craneschedule_);
  }
  _impl_.craneschedule_ = craneschedule;
  if (craneschedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.World.CraneSchedule)
}
inline ::DynStacking::RollingMill::DataModel::CraneSchedule* World::release_craneschedule() {
  
  ::DynStacking::RollingMill::DataModel::CraneSchedule* temp = _impl_.craneschedule_;
  _impl_.craneschedule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::CraneSchedule* World::unsafe_arena_release_craneschedule() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.World.CraneSchedule)
  
  ::DynStacking::RollingMill::DataModel::CraneSchedule* temp = _impl_.craneschedule_;
  _impl_.craneschedule_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::CraneSchedule* World::_internal_mutable_craneschedule() {
  
  if (_impl_.craneschedule_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::CraneSchedule>(GetArenaForAllocation());
    _impl_.craneschedule_ = p;
  }
  return _impl_.craneschedule_;
}
inline ::DynStacking::RollingMill::DataModel::CraneSchedule* World::mutable_craneschedule() {
  ::DynStacking::RollingMill::DataModel::CraneSchedule* _msg = _internal_mutable_craneschedule();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.World.CraneSchedule)
  return _msg;
}
inline void World::set_allocated_craneschedule(::DynStacking::RollingMill::DataModel::CraneSchedule* craneschedule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.craneschedule_;
  }
  if (craneschedule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(craneschedule);
    if (message_arena != submessage_arena) {
      craneschedule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, craneschedule, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.craneschedule_ = craneschedule;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.World.CraneSchedule)
}

// .DynStacking.RollingMill.DataModel.Crane ShuffleCrane = 10;
inline bool World::_internal_has_shufflecrane() const {
  return this != internal_default_instance() && _impl_.shufflecrane_ != nullptr;
}
inline bool World::has_shufflecrane() const {
  return _internal_has_shufflecrane();
}
inline void World::clear_shufflecrane() {
  if (GetArenaForAllocation() == nullptr && _impl_.shufflecrane_ != nullptr) {
    delete _impl_.shufflecrane_;
  }
  _impl_.shufflecrane_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::Crane& World::_internal_shufflecrane() const {
  const ::DynStacking::RollingMill::DataModel::Crane* p = _impl_.shufflecrane_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::Crane&>(
      ::DynStacking::RollingMill::DataModel::_Crane_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::Crane& World::shufflecrane() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.World.ShuffleCrane)
  return _internal_shufflecrane();
}
inline void World::unsafe_arena_set_allocated_shufflecrane(
    ::DynStacking::RollingMill::DataModel::Crane* shufflecrane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shufflecrane_);
  }
  _impl_.shufflecrane_ = shufflecrane;
  if (shufflecrane) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.World.ShuffleCrane)
}
inline ::DynStacking::RollingMill::DataModel::Crane* World::release_shufflecrane() {
  
  ::DynStacking::RollingMill::DataModel::Crane* temp = _impl_.shufflecrane_;
  _impl_.shufflecrane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::Crane* World::unsafe_arena_release_shufflecrane() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.World.ShuffleCrane)
  
  ::DynStacking::RollingMill::DataModel::Crane* temp = _impl_.shufflecrane_;
  _impl_.shufflecrane_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::Crane* World::_internal_mutable_shufflecrane() {
  
  if (_impl_.shufflecrane_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::Crane>(GetArenaForAllocation());
    _impl_.shufflecrane_ = p;
  }
  return _impl_.shufflecrane_;
}
inline ::DynStacking::RollingMill::DataModel::Crane* World::mutable_shufflecrane() {
  ::DynStacking::RollingMill::DataModel::Crane* _msg = _internal_mutable_shufflecrane();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.World.ShuffleCrane)
  return _msg;
}
inline void World::set_allocated_shufflecrane(::DynStacking::RollingMill::DataModel::Crane* shufflecrane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shufflecrane_;
  }
  if (shufflecrane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shufflecrane);
    if (message_arena != submessage_arena) {
      shufflecrane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shufflecrane, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shufflecrane_ = shufflecrane;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.World.ShuffleCrane)
}

// .DynStacking.RollingMill.DataModel.Crane HandoverCrane = 11;
inline bool World::_internal_has_handovercrane() const {
  return this != internal_default_instance() && _impl_.handovercrane_ != nullptr;
}
inline bool World::has_handovercrane() const {
  return _internal_has_handovercrane();
}
inline void World::clear_handovercrane() {
  if (GetArenaForAllocation() == nullptr && _impl_.handovercrane_ != nullptr) {
    delete _impl_.handovercrane_;
  }
  _impl_.handovercrane_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::Crane& World::_internal_handovercrane() const {
  const ::DynStacking::RollingMill::DataModel::Crane* p = _impl_.handovercrane_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::Crane&>(
      ::DynStacking::RollingMill::DataModel::_Crane_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::Crane& World::handovercrane() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.World.HandoverCrane)
  return _internal_handovercrane();
}
inline void World::unsafe_arena_set_allocated_handovercrane(
    ::DynStacking::RollingMill::DataModel::Crane* handovercrane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handovercrane_);
  }
  _impl_.handovercrane_ = handovercrane;
  if (handovercrane) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.World.HandoverCrane)
}
inline ::DynStacking::RollingMill::DataModel::Crane* World::release_handovercrane() {
  
  ::DynStacking::RollingMill::DataModel::Crane* temp = _impl_.handovercrane_;
  _impl_.handovercrane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::Crane* World::unsafe_arena_release_handovercrane() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.World.HandoverCrane)
  
  ::DynStacking::RollingMill::DataModel::Crane* temp = _impl_.handovercrane_;
  _impl_.handovercrane_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::Crane* World::_internal_mutable_handovercrane() {
  
  if (_impl_.handovercrane_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::Crane>(GetArenaForAllocation());
    _impl_.handovercrane_ = p;
  }
  return _impl_.handovercrane_;
}
inline ::DynStacking::RollingMill::DataModel::Crane* World::mutable_handovercrane() {
  ::DynStacking::RollingMill::DataModel::Crane* _msg = _internal_mutable_handovercrane();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.World.HandoverCrane)
  return _msg;
}
inline void World::set_allocated_handovercrane(::DynStacking::RollingMill::DataModel::Crane* handovercrane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.handovercrane_;
  }
  if (handovercrane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(handovercrane);
    if (message_arena != submessage_arena) {
      handovercrane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handovercrane, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.handovercrane_ = handovercrane;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.World.HandoverCrane)
}

// .DynStacking.RollingMill.DataModel.Performance KPIs = 12;
inline bool World::_internal_has_kpis() const {
  return this != internal_default_instance() && _impl_.kpis_ != nullptr;
}
inline bool World::has_kpis() const {
  return _internal_has_kpis();
}
inline void World::clear_kpis() {
  if (GetArenaForAllocation() == nullptr && _impl_.kpis_ != nullptr) {
    delete _impl_.kpis_;
  }
  _impl_.kpis_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::Performance& World::_internal_kpis() const {
  const ::DynStacking::RollingMill::DataModel::Performance* p = _impl_.kpis_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::Performance&>(
      ::DynStacking::RollingMill::DataModel::_Performance_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::Performance& World::kpis() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.World.KPIs)
  return _internal_kpis();
}
inline void World::unsafe_arena_set_allocated_kpis(
    ::DynStacking::RollingMill::DataModel::Performance* kpis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kpis_);
  }
  _impl_.kpis_ = kpis;
  if (kpis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.World.KPIs)
}
inline ::DynStacking::RollingMill::DataModel::Performance* World::release_kpis() {
  
  ::DynStacking::RollingMill::DataModel::Performance* temp = _impl_.kpis_;
  _impl_.kpis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::Performance* World::unsafe_arena_release_kpis() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.World.KPIs)
  
  ::DynStacking::RollingMill::DataModel::Performance* temp = _impl_.kpis_;
  _impl_.kpis_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::Performance* World::_internal_mutable_kpis() {
  
  if (_impl_.kpis_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::Performance>(GetArenaForAllocation());
    _impl_.kpis_ = p;
  }
  return _impl_.kpis_;
}
inline ::DynStacking::RollingMill::DataModel::Performance* World::mutable_kpis() {
  ::DynStacking::RollingMill::DataModel::Performance* _msg = _internal_mutable_kpis();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.World.KPIs)
  return _msg;
}
inline void World::set_allocated_kpis(::DynStacking::RollingMill::DataModel::Performance* kpis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kpis_;
  }
  if (kpis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kpis);
    if (message_arena != submessage_arena) {
      kpis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kpis, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kpis_ = kpis;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.World.KPIs)
}

// .DynStacking.RollingMill.DataModel.Uncertainties ObservationData = 13;
inline bool World::_internal_has_observationdata() const {
  return this != internal_default_instance() && _impl_.observationdata_ != nullptr;
}
inline bool World::has_observationdata() const {
  return _internal_has_observationdata();
}
inline void World::clear_observationdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.observationdata_ != nullptr) {
    delete _impl_.observationdata_;
  }
  _impl_.observationdata_ = nullptr;
}
inline const ::DynStacking::RollingMill::DataModel::Uncertainties& World::_internal_observationdata() const {
  const ::DynStacking::RollingMill::DataModel::Uncertainties* p = _impl_.observationdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::RollingMill::DataModel::Uncertainties&>(
      ::DynStacking::RollingMill::DataModel::_Uncertainties_default_instance_);
}
inline const ::DynStacking::RollingMill::DataModel::Uncertainties& World::observationdata() const {
  // @@protoc_insertion_point(field_get:DynStacking.RollingMill.DataModel.World.ObservationData)
  return _internal_observationdata();
}
inline void World::unsafe_arena_set_allocated_observationdata(
    ::DynStacking::RollingMill::DataModel::Uncertainties* observationdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observationdata_);
  }
  _impl_.observationdata_ = observationdata;
  if (observationdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.RollingMill.DataModel.World.ObservationData)
}
inline ::DynStacking::RollingMill::DataModel::Uncertainties* World::release_observationdata() {
  
  ::DynStacking::RollingMill::DataModel::Uncertainties* temp = _impl_.observationdata_;
  _impl_.observationdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::Uncertainties* World::unsafe_arena_release_observationdata() {
  // @@protoc_insertion_point(field_release:DynStacking.RollingMill.DataModel.World.ObservationData)
  
  ::DynStacking::RollingMill::DataModel::Uncertainties* temp = _impl_.observationdata_;
  _impl_.observationdata_ = nullptr;
  return temp;
}
inline ::DynStacking::RollingMill::DataModel::Uncertainties* World::_internal_mutable_observationdata() {
  
  if (_impl_.observationdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::RollingMill::DataModel::Uncertainties>(GetArenaForAllocation());
    _impl_.observationdata_ = p;
  }
  return _impl_.observationdata_;
}
inline ::DynStacking::RollingMill::DataModel::Uncertainties* World::mutable_observationdata() {
  ::DynStacking::RollingMill::DataModel::Uncertainties* _msg = _internal_mutable_observationdata();
  // @@protoc_insertion_point(field_mutable:DynStacking.RollingMill.DataModel.World.ObservationData)
  return _msg;
}
inline void World::set_allocated_observationdata(::DynStacking::RollingMill::DataModel::Uncertainties* observationdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.observationdata_;
  }
  if (observationdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(observationdata);
    if (message_arena != submessage_arena) {
      observationdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observationdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.observationdata_ = observationdata;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.RollingMill.DataModel.World.ObservationData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataModel
}  // namespace RollingMill
}  // namespace DynStacking

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DynStacking::RollingMill::DataModel::CraneScheduleActivityState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DynStacking::RollingMill::DataModel::CraneScheduleActivityState>() {
  return ::DynStacking::RollingMill::DataModel::CraneScheduleActivityState_descriptor();
}
template <> struct is_proto_enum< ::DynStacking::RollingMill::DataModel::MillTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DynStacking::RollingMill::DataModel::MillTypes>() {
  return ::DynStacking::RollingMill::DataModel::MillTypes_descriptor();
}
template <> struct is_proto_enum< ::DynStacking::RollingMill::DataModel::MoveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DynStacking::RollingMill::DataModel::MoveType>() {
  return ::DynStacking::RollingMill::DataModel::MoveType_descriptor();
}
template <> struct is_proto_enum< ::DynStacking::RollingMill::DataModel::StackTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DynStacking::RollingMill::DataModel::StackTypes>() {
  return ::DynStacking::RollingMill::DataModel::StackTypes_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rollingmill_5fmodel_2eproto
