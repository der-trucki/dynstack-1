// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hotstorage_model.proto

#include "hotstorage_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DynStacking {
namespace HotStorage {
namespace DataModel {
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.release_)*/nullptr
  , /*decltype(_impl_.due_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.ready_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
PROTOBUF_CONSTEXPR Crane::Crane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.load_)*/nullptr
  , /*decltype(_impl_.schedule_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.locationid_)*/0
  , /*decltype(_impl_.girderposition_)*/0
  , /*decltype(_impl_.hoistposition_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CraneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CraneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CraneDefaultTypeInternal() {}
  union {
    Crane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CraneDefaultTypeInternal _Crane_default_instance_;
PROTOBUF_CONSTEXPR CraneMove::CraneMove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blockid_)*/0
  , /*decltype(_impl_.sourceid_)*/0
  , /*decltype(_impl_.targetid_)*/0
  , /*decltype(_impl_.sequence_)*/0
  , /*decltype(_impl_.emptymove_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CraneMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CraneMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CraneMoveDefaultTypeInternal() {}
  union {
    CraneMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CraneMoveDefaultTypeInternal _CraneMove_default_instance_;
PROTOBUF_CONSTEXPR CraneSchedule::CraneSchedule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.moves_)*/{}
  , /*decltype(_impl_.sequencenr_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CraneScheduleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CraneScheduleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CraneScheduleDefaultTypeInternal() {}
  union {
    CraneSchedule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CraneScheduleDefaultTypeInternal _CraneSchedule_default_instance_;
PROTOBUF_CONSTEXPR Handover::Handover(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.ready_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HandoverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandoverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandoverDefaultTypeInternal() {}
  union {
    Handover _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandoverDefaultTypeInternal _Handover_default_instance_;
PROTOBUF_CONSTEXPR Performance::Performance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servicelevelmean_)*/0
  , /*decltype(_impl_.cranemanipulations_)*/0
  , /*decltype(_impl_.deliveredblocks_)*/0
  , /*decltype(_impl_.leadtimemean_)*/0
  , /*decltype(_impl_.blockedarrivaltime_)*/0
  , /*decltype(_impl_.tardinessmean_)*/0
  , /*decltype(_impl_.bufferutilizationmean_)*/0
  , /*decltype(_impl_.craneutilizationmean_)*/0
  , /*decltype(_impl_.handoverutilizationmean_)*/0
  , /*decltype(_impl_.upstreamutilizationmean_)*/0
  , /*decltype(_impl_.totalblocksontime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerformanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerformanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerformanceDefaultTypeInternal() {}
  union {
    Performance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerformanceDefaultTypeInternal _Performance_default_instance_;
PROTOBUF_CONSTEXPR Stack::Stack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bottomtotop_)*/{}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.maxheight_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StackDefaultTypeInternal() {}
  union {
    Stack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StackDefaultTypeInternal _Stack_default_instance_;
PROTOBUF_CONSTEXPR TimeStamp::TimeStamp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.milliseconds_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeStampDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeStampDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeStampDefaultTypeInternal() {}
  union {
    TimeStamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeStampDefaultTypeInternal _TimeStamp_default_instance_;
PROTOBUF_CONSTEXPR Uncertainties::Uncertainties(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arrivalintervals_)*/{}
  , /*decltype(_impl_.cranemovetimes_)*/{}
  , /*decltype(_impl_.handoverreadyintervals_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UncertaintiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UncertaintiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UncertaintiesDefaultTypeInternal() {}
  union {
    Uncertainties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UncertaintiesDefaultTypeInternal _Uncertainties_default_instance_;
PROTOBUF_CONSTEXPR World::World(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buffers_)*/{}
  , /*decltype(_impl_.invalidmoves_)*/{}
  , /*decltype(_impl_.now_)*/nullptr
  , /*decltype(_impl_.production_)*/nullptr
  , /*decltype(_impl_.handover_)*/nullptr
  , /*decltype(_impl_.crane_)*/nullptr
  , /*decltype(_impl_.kpis_)*/nullptr
  , /*decltype(_impl_.observationdata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldDefaultTypeInternal() {}
  union {
    World _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldDefaultTypeInternal _World_default_instance_;
}  // namespace DataModel
}  // namespace HotStorage
}  // namespace DynStacking
static ::_pb::Metadata file_level_metadata_hotstorage_5fmodel_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_hotstorage_5fmodel_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_hotstorage_5fmodel_2eproto = nullptr;

const uint32_t TableStruct_hotstorage_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Block, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Block, _impl_.release_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Block, _impl_.due_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Block, _impl_.ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Crane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Crane, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Crane, _impl_.locationid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Crane, _impl_.load_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Crane, _impl_.schedule_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Crane, _impl_.girderposition_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Crane, _impl_.hoistposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneMove, _impl_.blockid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneMove, _impl_.sourceid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneMove, _impl_.targetid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneMove, _impl_.sequence_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneMove, _impl_.emptymove_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneSchedule, _impl_.moves_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneSchedule, _impl_.sequencenr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Handover, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Handover, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Handover, _impl_.ready_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Handover, _impl_.block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, _impl_.cranemanipulations_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, _impl_.servicelevelmean_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, _impl_.leadtimemean_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, _impl_.deliveredblocks_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, _impl_.totalblocksontime_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, _impl_.blockedarrivaltime_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, _impl_.tardinessmean_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, _impl_.bufferutilizationmean_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, _impl_.craneutilizationmean_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, _impl_.handoverutilizationmean_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, _impl_.upstreamutilizationmean_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Stack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Stack, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Stack, _impl_.maxheight_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Stack, _impl_.bottomtotop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::TimeStamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::TimeStamp, _impl_.milliseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Uncertainties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Uncertainties, _impl_.arrivalintervals_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Uncertainties, _impl_.cranemovetimes_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Uncertainties, _impl_.handoverreadyintervals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, _impl_.now_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, _impl_.production_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, _impl_.buffers_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, _impl_.handover_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, _impl_.crane_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, _impl_.kpis_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, _impl_.observationdata_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, _impl_.invalidmoves_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DynStacking::HotStorage::DataModel::Block)},
  { 10, -1, -1, sizeof(::DynStacking::HotStorage::DataModel::Crane)},
  { 22, -1, -1, sizeof(::DynStacking::HotStorage::DataModel::CraneMove)},
  { 33, -1, -1, sizeof(::DynStacking::HotStorage::DataModel::CraneSchedule)},
  { 41, -1, -1, sizeof(::DynStacking::HotStorage::DataModel::Handover)},
  { 50, -1, -1, sizeof(::DynStacking::HotStorage::DataModel::Performance)},
  { 67, -1, -1, sizeof(::DynStacking::HotStorage::DataModel::Stack)},
  { 76, -1, -1, sizeof(::DynStacking::HotStorage::DataModel::TimeStamp)},
  { 83, -1, -1, sizeof(::DynStacking::HotStorage::DataModel::Uncertainties)},
  { 92, -1, -1, sizeof(::DynStacking::HotStorage::DataModel::World)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DynStacking::HotStorage::DataModel::_Block_default_instance_._instance,
  &::DynStacking::HotStorage::DataModel::_Crane_default_instance_._instance,
  &::DynStacking::HotStorage::DataModel::_CraneMove_default_instance_._instance,
  &::DynStacking::HotStorage::DataModel::_CraneSchedule_default_instance_._instance,
  &::DynStacking::HotStorage::DataModel::_Handover_default_instance_._instance,
  &::DynStacking::HotStorage::DataModel::_Performance_default_instance_._instance,
  &::DynStacking::HotStorage::DataModel::_Stack_default_instance_._instance,
  &::DynStacking::HotStorage::DataModel::_TimeStamp_default_instance_._instance,
  &::DynStacking::HotStorage::DataModel::_Uncertainties_default_instance_._instance,
  &::DynStacking::HotStorage::DataModel::_World_default_instance_._instance,
};

const char descriptor_table_protodef_hotstorage_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026hotstorage_model.proto\022 DynStacking.Ho"
  "tStorage.DataModel\"\232\001\n\005Block\022\n\n\002Id\030\001 \001(\005"
  "\022<\n\007Release\030\002 \001(\0132+.DynStacking.HotStora"
  "ge.DataModel.TimeStamp\0228\n\003Due\030\003 \001(\0132+.Dy"
  "nStacking.HotStorage.DataModel.TimeStamp"
  "\022\r\n\005Ready\030\004 \001(\010\"\320\001\n\005Crane\022\n\n\002Id\030\001 \001(\005\022\022\n"
  "\nLocationId\030\002 \001(\005\0225\n\004Load\030\003 \001(\0132\'.DynSta"
  "cking.HotStorage.DataModel.Block\022A\n\010Sche"
  "dule\030\004 \001(\0132/.DynStacking.HotStorage.Data"
  "Model.CraneSchedule\022\026\n\016GirderPosition\030\005 "
  "\001(\001\022\025\n\rHoistPosition\030\006 \001(\001\"e\n\tCraneMove\022"
  "\017\n\007BlockId\030\001 \001(\005\022\020\n\010SourceId\030\002 \001(\005\022\020\n\010Ta"
  "rgetId\030\003 \001(\005\022\020\n\010Sequence\030\004 \001(\005\022\021\n\tEmptyM"
  "ove\030\005 \001(\010\"_\n\rCraneSchedule\022:\n\005Moves\030\001 \003("
  "\0132+.DynStacking.HotStorage.DataModel.Cra"
  "neMove\022\022\n\nSequenceNr\030\002 \001(\005\"]\n\010Handover\022\n"
  "\n\002Id\030\001 \001(\005\022\r\n\005Ready\030\002 \001(\010\0226\n\005Block\030\003 \001(\013"
  "2\'.DynStacking.HotStorage.DataModel.Bloc"
  "k\"\277\002\n\013Performance\022\032\n\022CraneManipulations\030"
  "\001 \001(\005\022\030\n\020ServiceLevelMean\030\002 \001(\001\022\024\n\014LeadT"
  "imeMean\030\003 \001(\001\022\027\n\017DeliveredBlocks\030\004 \001(\005\022\031"
  "\n\021TotalBlocksOnTime\030\005 \001(\005\022\032\n\022BlockedArri"
  "valTime\030\006 \001(\001\022\025\n\rTardinessMean\030\007 \001(\001\022\035\n\025"
  "BufferUtilizationMean\030\010 \001(\001\022\034\n\024CraneUtil"
  "izationMean\030\t \001(\001\022\037\n\027HandoverUtilization"
  "Mean\030\n \001(\001\022\037\n\027UpstreamUtilizationMean\030\013 "
  "\001(\001\"d\n\005Stack\022\n\n\002Id\030\001 \001(\005\022\021\n\tMaxHeight\030\002 "
  "\001(\005\022<\n\013BottomToTop\030\003 \003(\0132\'.DynStacking.H"
  "otStorage.DataModel.Block\"!\n\tTimeStamp\022\024"
  "\n\014MilliSeconds\030\001 \001(\003\"m\n\rUncertainties\022\034\n"
  "\020ArrivalIntervals\030\001 \003(\001B\002\020\000\022\032\n\016CraneMove"
  "Times\030\002 \003(\001B\002\020\000\022\"\n\026HandoverReadyInterval"
  "s\030\003 \003(\001B\002\020\000\"\370\003\n\005World\0228\n\003Now\030\001 \001(\0132+.Dyn"
  "Stacking.HotStorage.DataModel.TimeStamp\022"
  ";\n\nProduction\030\002 \001(\0132\'.DynStacking.HotSto"
  "rage.DataModel.Stack\0228\n\007Buffers\030\003 \003(\0132\'."
  "DynStacking.HotStorage.DataModel.Stack\022<"
  "\n\010Handover\030\004 \001(\0132*.DynStacking.HotStorag"
  "e.DataModel.Handover\0226\n\005Crane\030\005 \001(\0132\'.Dy"
  "nStacking.HotStorage.DataModel.Crane\022;\n\004"
  "KPIs\030\006 \001(\0132-.DynStacking.HotStorage.Data"
  "Model.Performance\022H\n\017ObservationData\030\007 \001"
  "(\0132/.DynStacking.HotStorage.DataModel.Un"
  "certainties\022A\n\014InvalidMoves\030\010 \003(\0132+.DynS"
  "tacking.HotStorage.DataModel.CraneMoveb\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_hotstorage_5fmodel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_hotstorage_5fmodel_2eproto = {
    false, false, 1806, descriptor_table_protodef_hotstorage_5fmodel_2eproto,
    "hotstorage_model.proto",
    &descriptor_table_hotstorage_5fmodel_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_hotstorage_5fmodel_2eproto::offsets,
    file_level_metadata_hotstorage_5fmodel_2eproto, file_level_enum_descriptors_hotstorage_5fmodel_2eproto,
    file_level_service_descriptors_hotstorage_5fmodel_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_hotstorage_5fmodel_2eproto_getter() {
  return &descriptor_table_hotstorage_5fmodel_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_hotstorage_5fmodel_2eproto(&descriptor_table_hotstorage_5fmodel_2eproto);
namespace DynStacking {
namespace HotStorage {
namespace DataModel {

// ===================================================================

class Block::_Internal {
 public:
  static const ::DynStacking::HotStorage::DataModel::TimeStamp& release(const Block* msg);
  static const ::DynStacking::HotStorage::DataModel::TimeStamp& due(const Block* msg);
};

const ::DynStacking::HotStorage::DataModel::TimeStamp&
Block::_Internal::release(const Block* msg) {
  return *msg->_impl_.release_;
}
const ::DynStacking::HotStorage::DataModel::TimeStamp&
Block::_Internal::due(const Block* msg) {
  return *msg->_impl_.due_;
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Block* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.release_){nullptr}
    , decltype(_impl_.due_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.ready_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_release()) {
    _this->_impl_.release_ = new ::DynStacking::HotStorage::DataModel::TimeStamp(*from._impl_.release_);
  }
  if (from._internal_has_due()) {
    _this->_impl_.due_ = new ::DynStacking::HotStorage::DataModel::TimeStamp(*from._impl_.due_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ready_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ready_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.Block)
}

inline void Block::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.release_){nullptr}
    , decltype(_impl_.due_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.ready_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.release_;
  if (this != internal_default_instance()) delete _impl_.due_;
}

void Block::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.release_ != nullptr) {
    delete _impl_.release_;
  }
  _impl_.release_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.due_ != nullptr) {
    delete _impl_.due_;
  }
  _impl_.due_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ready_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ready_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.TimeStamp Release = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_release(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.TimeStamp Due = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_due(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Ready = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .DynStacking.HotStorage.DataModel.TimeStamp Release = 2;
  if (this->_internal_has_release()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::release(this),
        _Internal::release(this).GetCachedSize(), target, stream);
  }

  // .DynStacking.HotStorage.DataModel.TimeStamp Due = 3;
  if (this->_internal_has_due()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::due(this),
        _Internal::due(this).GetCachedSize(), target, stream);
  }

  // bool Ready = 4;
  if (this->_internal_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DynStacking.HotStorage.DataModel.TimeStamp Release = 2;
  if (this->_internal_has_release()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.release_);
  }

  // .DynStacking.HotStorage.DataModel.TimeStamp Due = 3;
  if (this->_internal_has_due()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.due_);
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // bool Ready = 4;
  if (this->_internal_ready() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }


void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Block*>(&to_msg);
  auto& from = static_cast<const Block&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.Block)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_release()) {
    _this->_internal_mutable_release()->::DynStacking::HotStorage::DataModel::TimeStamp::MergeFrom(
        from._internal_release());
  }
  if (from._internal_has_due()) {
    _this->_internal_mutable_due()->::DynStacking::HotStorage::DataModel::TimeStamp::MergeFrom(
        from._internal_due());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_ready() != 0) {
    _this->_internal_set_ready(from._internal_ready());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, _impl_.ready_)
      + sizeof(Block::_impl_.ready_)
      - PROTOBUF_FIELD_OFFSET(Block, _impl_.release_)>(
          reinterpret_cast<char*>(&_impl_.release_),
          reinterpret_cast<char*>(&other->_impl_.release_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotstorage_5fmodel_2eproto_getter, &descriptor_table_hotstorage_5fmodel_2eproto_once,
      file_level_metadata_hotstorage_5fmodel_2eproto[0]);
}

// ===================================================================

class Crane::_Internal {
 public:
  static const ::DynStacking::HotStorage::DataModel::Block& load(const Crane* msg);
  static const ::DynStacking::HotStorage::DataModel::CraneSchedule& schedule(const Crane* msg);
};

const ::DynStacking::HotStorage::DataModel::Block&
Crane::_Internal::load(const Crane* msg) {
  return *msg->_impl_.load_;
}
const ::DynStacking::HotStorage::DataModel::CraneSchedule&
Crane::_Internal::schedule(const Crane* msg) {
  return *msg->_impl_.schedule_;
}
Crane::Crane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.Crane)
}
Crane::Crane(const Crane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Crane* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.load_){nullptr}
    , decltype(_impl_.schedule_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.locationid_){}
    , decltype(_impl_.girderposition_){}
    , decltype(_impl_.hoistposition_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_load()) {
    _this->_impl_.load_ = new ::DynStacking::HotStorage::DataModel::Block(*from._impl_.load_);
  }
  if (from._internal_has_schedule()) {
    _this->_impl_.schedule_ = new ::DynStacking::HotStorage::DataModel::CraneSchedule(*from._impl_.schedule_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hoistposition_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.hoistposition_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.Crane)
}

inline void Crane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.load_){nullptr}
    , decltype(_impl_.schedule_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.locationid_){0}
    , decltype(_impl_.girderposition_){0}
    , decltype(_impl_.hoistposition_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Crane::~Crane() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.Crane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Crane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.load_;
  if (this != internal_default_instance()) delete _impl_.schedule_;
}

void Crane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Crane::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.Crane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.load_ != nullptr) {
    delete _impl_.load_;
  }
  _impl_.load_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.schedule_ != nullptr) {
    delete _impl_.schedule_;
  }
  _impl_.schedule_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hoistposition_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.hoistposition_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Crane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LocationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.locationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.Block Load = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_load(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.CraneSchedule Schedule = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_schedule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double GirderPosition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.girderposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double HoistPosition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.hoistposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Crane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.Crane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 LocationId = 2;
  if (this->_internal_locationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_locationid(), target);
  }

  // .DynStacking.HotStorage.DataModel.Block Load = 3;
  if (this->_internal_has_load()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::load(this),
        _Internal::load(this).GetCachedSize(), target, stream);
  }

  // .DynStacking.HotStorage.DataModel.CraneSchedule Schedule = 4;
  if (this->_internal_has_schedule()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::schedule(this),
        _Internal::schedule(this).GetCachedSize(), target, stream);
  }

  // double GirderPosition = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_girderposition = this->_internal_girderposition();
  uint64_t raw_girderposition;
  memcpy(&raw_girderposition, &tmp_girderposition, sizeof(tmp_girderposition));
  if (raw_girderposition != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_girderposition(), target);
  }

  // double HoistPosition = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hoistposition = this->_internal_hoistposition();
  uint64_t raw_hoistposition;
  memcpy(&raw_hoistposition, &tmp_hoistposition, sizeof(tmp_hoistposition));
  if (raw_hoistposition != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_hoistposition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.Crane)
  return target;
}

size_t Crane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.Crane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DynStacking.HotStorage.DataModel.Block Load = 3;
  if (this->_internal_has_load()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.load_);
  }

  // .DynStacking.HotStorage.DataModel.CraneSchedule Schedule = 4;
  if (this->_internal_has_schedule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schedule_);
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 LocationId = 2;
  if (this->_internal_locationid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_locationid());
  }

  // double GirderPosition = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_girderposition = this->_internal_girderposition();
  uint64_t raw_girderposition;
  memcpy(&raw_girderposition, &tmp_girderposition, sizeof(tmp_girderposition));
  if (raw_girderposition != 0) {
    total_size += 1 + 8;
  }

  // double HoistPosition = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hoistposition = this->_internal_hoistposition();
  uint64_t raw_hoistposition;
  memcpy(&raw_hoistposition, &tmp_hoistposition, sizeof(tmp_hoistposition));
  if (raw_hoistposition != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Crane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Crane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Crane::GetClassData() const { return &_class_data_; }


void Crane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Crane*>(&to_msg);
  auto& from = static_cast<const Crane&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.Crane)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_load()) {
    _this->_internal_mutable_load()->::DynStacking::HotStorage::DataModel::Block::MergeFrom(
        from._internal_load());
  }
  if (from._internal_has_schedule()) {
    _this->_internal_mutable_schedule()->::DynStacking::HotStorage::DataModel::CraneSchedule::MergeFrom(
        from._internal_schedule());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_locationid() != 0) {
    _this->_internal_set_locationid(from._internal_locationid());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_girderposition = from._internal_girderposition();
  uint64_t raw_girderposition;
  memcpy(&raw_girderposition, &tmp_girderposition, sizeof(tmp_girderposition));
  if (raw_girderposition != 0) {
    _this->_internal_set_girderposition(from._internal_girderposition());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hoistposition = from._internal_hoistposition();
  uint64_t raw_hoistposition;
  memcpy(&raw_hoistposition, &tmp_hoistposition, sizeof(tmp_hoistposition));
  if (raw_hoistposition != 0) {
    _this->_internal_set_hoistposition(from._internal_hoistposition());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Crane::CopyFrom(const Crane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.Crane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crane::IsInitialized() const {
  return true;
}

void Crane::InternalSwap(Crane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Crane, _impl_.hoistposition_)
      + sizeof(Crane::_impl_.hoistposition_)
      - PROTOBUF_FIELD_OFFSET(Crane, _impl_.load_)>(
          reinterpret_cast<char*>(&_impl_.load_),
          reinterpret_cast<char*>(&other->_impl_.load_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Crane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotstorage_5fmodel_2eproto_getter, &descriptor_table_hotstorage_5fmodel_2eproto_once,
      file_level_metadata_hotstorage_5fmodel_2eproto[1]);
}

// ===================================================================

class CraneMove::_Internal {
 public:
};

CraneMove::CraneMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.CraneMove)
}
CraneMove::CraneMove(const CraneMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CraneMove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blockid_){}
    , decltype(_impl_.sourceid_){}
    , decltype(_impl_.targetid_){}
    , decltype(_impl_.sequence_){}
    , decltype(_impl_.emptymove_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.blockid_, &from._impl_.blockid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.emptymove_) -
    reinterpret_cast<char*>(&_impl_.blockid_)) + sizeof(_impl_.emptymove_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.CraneMove)
}

inline void CraneMove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blockid_){0}
    , decltype(_impl_.sourceid_){0}
    , decltype(_impl_.targetid_){0}
    , decltype(_impl_.sequence_){0}
    , decltype(_impl_.emptymove_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CraneMove::~CraneMove() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.CraneMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CraneMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CraneMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CraneMove::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.CraneMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.blockid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.emptymove_) -
      reinterpret_cast<char*>(&_impl_.blockid_)) + sizeof(_impl_.emptymove_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CraneMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 BlockId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.blockid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SourceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sourceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TargetId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool EmptyMove = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.emptymove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CraneMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.CraneMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BlockId = 1;
  if (this->_internal_blockid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_blockid(), target);
  }

  // int32 SourceId = 2;
  if (this->_internal_sourceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_sourceid(), target);
  }

  // int32 TargetId = 3;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_targetid(), target);
  }

  // int32 Sequence = 4;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_sequence(), target);
  }

  // bool EmptyMove = 5;
  if (this->_internal_emptymove() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_emptymove(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.CraneMove)
  return target;
}

size_t CraneMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.CraneMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 BlockId = 1;
  if (this->_internal_blockid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_blockid());
  }

  // int32 SourceId = 2;
  if (this->_internal_sourceid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sourceid());
  }

  // int32 TargetId = 3;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_targetid());
  }

  // int32 Sequence = 4;
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequence());
  }

  // bool EmptyMove = 5;
  if (this->_internal_emptymove() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CraneMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CraneMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CraneMove::GetClassData() const { return &_class_data_; }


void CraneMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CraneMove*>(&to_msg);
  auto& from = static_cast<const CraneMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.CraneMove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_blockid() != 0) {
    _this->_internal_set_blockid(from._internal_blockid());
  }
  if (from._internal_sourceid() != 0) {
    _this->_internal_set_sourceid(from._internal_sourceid());
  }
  if (from._internal_targetid() != 0) {
    _this->_internal_set_targetid(from._internal_targetid());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_emptymove() != 0) {
    _this->_internal_set_emptymove(from._internal_emptymove());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CraneMove::CopyFrom(const CraneMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.CraneMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CraneMove::IsInitialized() const {
  return true;
}

void CraneMove::InternalSwap(CraneMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CraneMove, _impl_.emptymove_)
      + sizeof(CraneMove::_impl_.emptymove_)
      - PROTOBUF_FIELD_OFFSET(CraneMove, _impl_.blockid_)>(
          reinterpret_cast<char*>(&_impl_.blockid_),
          reinterpret_cast<char*>(&other->_impl_.blockid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CraneMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotstorage_5fmodel_2eproto_getter, &descriptor_table_hotstorage_5fmodel_2eproto_once,
      file_level_metadata_hotstorage_5fmodel_2eproto[2]);
}

// ===================================================================

class CraneSchedule::_Internal {
 public:
};

CraneSchedule::CraneSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.CraneSchedule)
}
CraneSchedule::CraneSchedule(const CraneSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CraneSchedule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.moves_){from._impl_.moves_}
    , decltype(_impl_.sequencenr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sequencenr_ = from._impl_.sequencenr_;
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.CraneSchedule)
}

inline void CraneSchedule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.moves_){arena}
    , decltype(_impl_.sequencenr_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CraneSchedule::~CraneSchedule() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.CraneSchedule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CraneSchedule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.moves_.~RepeatedPtrField();
}

void CraneSchedule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CraneSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.CraneSchedule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.moves_.Clear();
  _impl_.sequencenr_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CraneSchedule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DynStacking.HotStorage.DataModel.CraneMove Moves = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_moves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 SequenceNr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sequencenr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CraneSchedule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.CraneSchedule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DynStacking.HotStorage.DataModel.CraneMove Moves = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_moves_size()); i < n; i++) {
    const auto& repfield = this->_internal_moves(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 SequenceNr = 2;
  if (this->_internal_sequencenr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequencenr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.CraneSchedule)
  return target;
}

size_t CraneSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.CraneSchedule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DynStacking.HotStorage.DataModel.CraneMove Moves = 1;
  total_size += 1UL * this->_internal_moves_size();
  for (const auto& msg : this->_impl_.moves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 SequenceNr = 2;
  if (this->_internal_sequencenr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequencenr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CraneSchedule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CraneSchedule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CraneSchedule::GetClassData() const { return &_class_data_; }


void CraneSchedule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CraneSchedule*>(&to_msg);
  auto& from = static_cast<const CraneSchedule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.CraneSchedule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.moves_.MergeFrom(from._impl_.moves_);
  if (from._internal_sequencenr() != 0) {
    _this->_internal_set_sequencenr(from._internal_sequencenr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CraneSchedule::CopyFrom(const CraneSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.CraneSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CraneSchedule::IsInitialized() const {
  return true;
}

void CraneSchedule::InternalSwap(CraneSchedule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.moves_.InternalSwap(&other->_impl_.moves_);
  swap(_impl_.sequencenr_, other->_impl_.sequencenr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CraneSchedule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotstorage_5fmodel_2eproto_getter, &descriptor_table_hotstorage_5fmodel_2eproto_once,
      file_level_metadata_hotstorage_5fmodel_2eproto[3]);
}

// ===================================================================

class Handover::_Internal {
 public:
  static const ::DynStacking::HotStorage::DataModel::Block& block(const Handover* msg);
};

const ::DynStacking::HotStorage::DataModel::Block&
Handover::_Internal::block(const Handover* msg) {
  return *msg->_impl_.block_;
}
Handover::Handover(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.Handover)
}
Handover::Handover(const Handover& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Handover* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.ready_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    _this->_impl_.block_ = new ::DynStacking::HotStorage::DataModel::Block(*from._impl_.block_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ready_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ready_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.Handover)
}

inline void Handover::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.ready_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Handover::~Handover() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.Handover)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Handover::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.block_;
}

void Handover::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Handover::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.Handover)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.block_ != nullptr) {
    delete _impl_.block_;
  }
  _impl_.block_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ready_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ready_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Handover::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Ready = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.Block Block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Handover::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.Handover)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bool Ready = 2;
  if (this->_internal_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ready(), target);
  }

  // .DynStacking.HotStorage.DataModel.Block Block = 3;
  if (this->_internal_has_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::block(this),
        _Internal::block(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.Handover)
  return target;
}

size_t Handover::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.Handover)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DynStacking.HotStorage.DataModel.Block Block = 3;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_);
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // bool Ready = 2;
  if (this->_internal_ready() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Handover::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Handover::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Handover::GetClassData() const { return &_class_data_; }


void Handover::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Handover*>(&to_msg);
  auto& from = static_cast<const Handover&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.Handover)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _this->_internal_mutable_block()->::DynStacking::HotStorage::DataModel::Block::MergeFrom(
        from._internal_block());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_ready() != 0) {
    _this->_internal_set_ready(from._internal_ready());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Handover::CopyFrom(const Handover& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.Handover)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handover::IsInitialized() const {
  return true;
}

void Handover::InternalSwap(Handover* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Handover, _impl_.ready_)
      + sizeof(Handover::_impl_.ready_)
      - PROTOBUF_FIELD_OFFSET(Handover, _impl_.block_)>(
          reinterpret_cast<char*>(&_impl_.block_),
          reinterpret_cast<char*>(&other->_impl_.block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Handover::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotstorage_5fmodel_2eproto_getter, &descriptor_table_hotstorage_5fmodel_2eproto_once,
      file_level_metadata_hotstorage_5fmodel_2eproto[4]);
}

// ===================================================================

class Performance::_Internal {
 public:
};

Performance::Performance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.Performance)
}
Performance::Performance(const Performance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Performance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servicelevelmean_){}
    , decltype(_impl_.cranemanipulations_){}
    , decltype(_impl_.deliveredblocks_){}
    , decltype(_impl_.leadtimemean_){}
    , decltype(_impl_.blockedarrivaltime_){}
    , decltype(_impl_.tardinessmean_){}
    , decltype(_impl_.bufferutilizationmean_){}
    , decltype(_impl_.craneutilizationmean_){}
    , decltype(_impl_.handoverutilizationmean_){}
    , decltype(_impl_.upstreamutilizationmean_){}
    , decltype(_impl_.totalblocksontime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.servicelevelmean_, &from._impl_.servicelevelmean_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.totalblocksontime_) -
    reinterpret_cast<char*>(&_impl_.servicelevelmean_)) + sizeof(_impl_.totalblocksontime_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.Performance)
}

inline void Performance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servicelevelmean_){0}
    , decltype(_impl_.cranemanipulations_){0}
    , decltype(_impl_.deliveredblocks_){0}
    , decltype(_impl_.leadtimemean_){0}
    , decltype(_impl_.blockedarrivaltime_){0}
    , decltype(_impl_.tardinessmean_){0}
    , decltype(_impl_.bufferutilizationmean_){0}
    , decltype(_impl_.craneutilizationmean_){0}
    , decltype(_impl_.handoverutilizationmean_){0}
    , decltype(_impl_.upstreamutilizationmean_){0}
    , decltype(_impl_.totalblocksontime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Performance::~Performance() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.Performance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Performance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Performance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Performance::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.Performance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.servicelevelmean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.totalblocksontime_) -
      reinterpret_cast<char*>(&_impl_.servicelevelmean_)) + sizeof(_impl_.totalblocksontime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Performance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 CraneManipulations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cranemanipulations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double ServiceLevelMean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.servicelevelmean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double LeadTimeMean = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.leadtimemean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 DeliveredBlocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.deliveredblocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TotalBlocksOnTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.totalblocksontime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double BlockedArrivalTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.blockedarrivaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double TardinessMean = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.tardinessmean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double BufferUtilizationMean = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.bufferutilizationmean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double CraneUtilizationMean = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.craneutilizationmean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double HandoverUtilizationMean = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.handoverutilizationmean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double UpstreamUtilizationMean = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.upstreamutilizationmean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Performance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.Performance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CraneManipulations = 1;
  if (this->_internal_cranemanipulations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cranemanipulations(), target);
  }

  // double ServiceLevelMean = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_servicelevelmean = this->_internal_servicelevelmean();
  uint64_t raw_servicelevelmean;
  memcpy(&raw_servicelevelmean, &tmp_servicelevelmean, sizeof(tmp_servicelevelmean));
  if (raw_servicelevelmean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_servicelevelmean(), target);
  }

  // double LeadTimeMean = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_leadtimemean = this->_internal_leadtimemean();
  uint64_t raw_leadtimemean;
  memcpy(&raw_leadtimemean, &tmp_leadtimemean, sizeof(tmp_leadtimemean));
  if (raw_leadtimemean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_leadtimemean(), target);
  }

  // int32 DeliveredBlocks = 4;
  if (this->_internal_deliveredblocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_deliveredblocks(), target);
  }

  // int32 TotalBlocksOnTime = 5;
  if (this->_internal_totalblocksontime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_totalblocksontime(), target);
  }

  // double BlockedArrivalTime = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_blockedarrivaltime = this->_internal_blockedarrivaltime();
  uint64_t raw_blockedarrivaltime;
  memcpy(&raw_blockedarrivaltime, &tmp_blockedarrivaltime, sizeof(tmp_blockedarrivaltime));
  if (raw_blockedarrivaltime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_blockedarrivaltime(), target);
  }

  // double TardinessMean = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tardinessmean = this->_internal_tardinessmean();
  uint64_t raw_tardinessmean;
  memcpy(&raw_tardinessmean, &tmp_tardinessmean, sizeof(tmp_tardinessmean));
  if (raw_tardinessmean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_tardinessmean(), target);
  }

  // double BufferUtilizationMean = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bufferutilizationmean = this->_internal_bufferutilizationmean();
  uint64_t raw_bufferutilizationmean;
  memcpy(&raw_bufferutilizationmean, &tmp_bufferutilizationmean, sizeof(tmp_bufferutilizationmean));
  if (raw_bufferutilizationmean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_bufferutilizationmean(), target);
  }

  // double CraneUtilizationMean = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_craneutilizationmean = this->_internal_craneutilizationmean();
  uint64_t raw_craneutilizationmean;
  memcpy(&raw_craneutilizationmean, &tmp_craneutilizationmean, sizeof(tmp_craneutilizationmean));
  if (raw_craneutilizationmean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_craneutilizationmean(), target);
  }

  // double HandoverUtilizationMean = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_handoverutilizationmean = this->_internal_handoverutilizationmean();
  uint64_t raw_handoverutilizationmean;
  memcpy(&raw_handoverutilizationmean, &tmp_handoverutilizationmean, sizeof(tmp_handoverutilizationmean));
  if (raw_handoverutilizationmean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_handoverutilizationmean(), target);
  }

  // double UpstreamUtilizationMean = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upstreamutilizationmean = this->_internal_upstreamutilizationmean();
  uint64_t raw_upstreamutilizationmean;
  memcpy(&raw_upstreamutilizationmean, &tmp_upstreamutilizationmean, sizeof(tmp_upstreamutilizationmean));
  if (raw_upstreamutilizationmean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_upstreamutilizationmean(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.Performance)
  return target;
}

size_t Performance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.Performance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ServiceLevelMean = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_servicelevelmean = this->_internal_servicelevelmean();
  uint64_t raw_servicelevelmean;
  memcpy(&raw_servicelevelmean, &tmp_servicelevelmean, sizeof(tmp_servicelevelmean));
  if (raw_servicelevelmean != 0) {
    total_size += 1 + 8;
  }

  // int32 CraneManipulations = 1;
  if (this->_internal_cranemanipulations() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cranemanipulations());
  }

  // int32 DeliveredBlocks = 4;
  if (this->_internal_deliveredblocks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_deliveredblocks());
  }

  // double LeadTimeMean = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_leadtimemean = this->_internal_leadtimemean();
  uint64_t raw_leadtimemean;
  memcpy(&raw_leadtimemean, &tmp_leadtimemean, sizeof(tmp_leadtimemean));
  if (raw_leadtimemean != 0) {
    total_size += 1 + 8;
  }

  // double BlockedArrivalTime = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_blockedarrivaltime = this->_internal_blockedarrivaltime();
  uint64_t raw_blockedarrivaltime;
  memcpy(&raw_blockedarrivaltime, &tmp_blockedarrivaltime, sizeof(tmp_blockedarrivaltime));
  if (raw_blockedarrivaltime != 0) {
    total_size += 1 + 8;
  }

  // double TardinessMean = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tardinessmean = this->_internal_tardinessmean();
  uint64_t raw_tardinessmean;
  memcpy(&raw_tardinessmean, &tmp_tardinessmean, sizeof(tmp_tardinessmean));
  if (raw_tardinessmean != 0) {
    total_size += 1 + 8;
  }

  // double BufferUtilizationMean = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bufferutilizationmean = this->_internal_bufferutilizationmean();
  uint64_t raw_bufferutilizationmean;
  memcpy(&raw_bufferutilizationmean, &tmp_bufferutilizationmean, sizeof(tmp_bufferutilizationmean));
  if (raw_bufferutilizationmean != 0) {
    total_size += 1 + 8;
  }

  // double CraneUtilizationMean = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_craneutilizationmean = this->_internal_craneutilizationmean();
  uint64_t raw_craneutilizationmean;
  memcpy(&raw_craneutilizationmean, &tmp_craneutilizationmean, sizeof(tmp_craneutilizationmean));
  if (raw_craneutilizationmean != 0) {
    total_size += 1 + 8;
  }

  // double HandoverUtilizationMean = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_handoverutilizationmean = this->_internal_handoverutilizationmean();
  uint64_t raw_handoverutilizationmean;
  memcpy(&raw_handoverutilizationmean, &tmp_handoverutilizationmean, sizeof(tmp_handoverutilizationmean));
  if (raw_handoverutilizationmean != 0) {
    total_size += 1 + 8;
  }

  // double UpstreamUtilizationMean = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upstreamutilizationmean = this->_internal_upstreamutilizationmean();
  uint64_t raw_upstreamutilizationmean;
  memcpy(&raw_upstreamutilizationmean, &tmp_upstreamutilizationmean, sizeof(tmp_upstreamutilizationmean));
  if (raw_upstreamutilizationmean != 0) {
    total_size += 1 + 8;
  }

  // int32 TotalBlocksOnTime = 5;
  if (this->_internal_totalblocksontime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_totalblocksontime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Performance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Performance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Performance::GetClassData() const { return &_class_data_; }


void Performance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Performance*>(&to_msg);
  auto& from = static_cast<const Performance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.Performance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_servicelevelmean = from._internal_servicelevelmean();
  uint64_t raw_servicelevelmean;
  memcpy(&raw_servicelevelmean, &tmp_servicelevelmean, sizeof(tmp_servicelevelmean));
  if (raw_servicelevelmean != 0) {
    _this->_internal_set_servicelevelmean(from._internal_servicelevelmean());
  }
  if (from._internal_cranemanipulations() != 0) {
    _this->_internal_set_cranemanipulations(from._internal_cranemanipulations());
  }
  if (from._internal_deliveredblocks() != 0) {
    _this->_internal_set_deliveredblocks(from._internal_deliveredblocks());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_leadtimemean = from._internal_leadtimemean();
  uint64_t raw_leadtimemean;
  memcpy(&raw_leadtimemean, &tmp_leadtimemean, sizeof(tmp_leadtimemean));
  if (raw_leadtimemean != 0) {
    _this->_internal_set_leadtimemean(from._internal_leadtimemean());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_blockedarrivaltime = from._internal_blockedarrivaltime();
  uint64_t raw_blockedarrivaltime;
  memcpy(&raw_blockedarrivaltime, &tmp_blockedarrivaltime, sizeof(tmp_blockedarrivaltime));
  if (raw_blockedarrivaltime != 0) {
    _this->_internal_set_blockedarrivaltime(from._internal_blockedarrivaltime());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tardinessmean = from._internal_tardinessmean();
  uint64_t raw_tardinessmean;
  memcpy(&raw_tardinessmean, &tmp_tardinessmean, sizeof(tmp_tardinessmean));
  if (raw_tardinessmean != 0) {
    _this->_internal_set_tardinessmean(from._internal_tardinessmean());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bufferutilizationmean = from._internal_bufferutilizationmean();
  uint64_t raw_bufferutilizationmean;
  memcpy(&raw_bufferutilizationmean, &tmp_bufferutilizationmean, sizeof(tmp_bufferutilizationmean));
  if (raw_bufferutilizationmean != 0) {
    _this->_internal_set_bufferutilizationmean(from._internal_bufferutilizationmean());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_craneutilizationmean = from._internal_craneutilizationmean();
  uint64_t raw_craneutilizationmean;
  memcpy(&raw_craneutilizationmean, &tmp_craneutilizationmean, sizeof(tmp_craneutilizationmean));
  if (raw_craneutilizationmean != 0) {
    _this->_internal_set_craneutilizationmean(from._internal_craneutilizationmean());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_handoverutilizationmean = from._internal_handoverutilizationmean();
  uint64_t raw_handoverutilizationmean;
  memcpy(&raw_handoverutilizationmean, &tmp_handoverutilizationmean, sizeof(tmp_handoverutilizationmean));
  if (raw_handoverutilizationmean != 0) {
    _this->_internal_set_handoverutilizationmean(from._internal_handoverutilizationmean());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upstreamutilizationmean = from._internal_upstreamutilizationmean();
  uint64_t raw_upstreamutilizationmean;
  memcpy(&raw_upstreamutilizationmean, &tmp_upstreamutilizationmean, sizeof(tmp_upstreamutilizationmean));
  if (raw_upstreamutilizationmean != 0) {
    _this->_internal_set_upstreamutilizationmean(from._internal_upstreamutilizationmean());
  }
  if (from._internal_totalblocksontime() != 0) {
    _this->_internal_set_totalblocksontime(from._internal_totalblocksontime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Performance::CopyFrom(const Performance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.Performance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Performance::IsInitialized() const {
  return true;
}

void Performance::InternalSwap(Performance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Performance, _impl_.totalblocksontime_)
      + sizeof(Performance::_impl_.totalblocksontime_)
      - PROTOBUF_FIELD_OFFSET(Performance, _impl_.servicelevelmean_)>(
          reinterpret_cast<char*>(&_impl_.servicelevelmean_),
          reinterpret_cast<char*>(&other->_impl_.servicelevelmean_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Performance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotstorage_5fmodel_2eproto_getter, &descriptor_table_hotstorage_5fmodel_2eproto_once,
      file_level_metadata_hotstorage_5fmodel_2eproto[5]);
}

// ===================================================================

class Stack::_Internal {
 public:
};

Stack::Stack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.Stack)
}
Stack::Stack(const Stack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Stack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bottomtotop_){from._impl_.bottomtotop_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.maxheight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxheight_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.maxheight_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.Stack)
}

inline void Stack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bottomtotop_){arena}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.maxheight_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Stack::~Stack() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.Stack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bottomtotop_.~RepeatedPtrField();
}

void Stack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stack::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.Stack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bottomtotop_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxheight_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.maxheight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxHeight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maxheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DynStacking.HotStorage.DataModel.Block BottomToTop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bottomtotop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.Stack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 MaxHeight = 2;
  if (this->_internal_maxheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxheight(), target);
  }

  // repeated .DynStacking.HotStorage.DataModel.Block BottomToTop = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bottomtotop_size()); i < n; i++) {
    const auto& repfield = this->_internal_bottomtotop(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.Stack)
  return target;
}

size_t Stack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.Stack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DynStacking.HotStorage.DataModel.Block BottomToTop = 3;
  total_size += 1UL * this->_internal_bottomtotop_size();
  for (const auto& msg : this->_impl_.bottomtotop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 MaxHeight = 2;
  if (this->_internal_maxheight() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxheight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Stack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stack::GetClassData() const { return &_class_data_; }


void Stack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Stack*>(&to_msg);
  auto& from = static_cast<const Stack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.Stack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bottomtotop_.MergeFrom(from._impl_.bottomtotop_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_maxheight() != 0) {
    _this->_internal_set_maxheight(from._internal_maxheight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stack::CopyFrom(const Stack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.Stack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stack::IsInitialized() const {
  return true;
}

void Stack::InternalSwap(Stack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bottomtotop_.InternalSwap(&other->_impl_.bottomtotop_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stack, _impl_.maxheight_)
      + sizeof(Stack::_impl_.maxheight_)
      - PROTOBUF_FIELD_OFFSET(Stack, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotstorage_5fmodel_2eproto_getter, &descriptor_table_hotstorage_5fmodel_2eproto_once,
      file_level_metadata_hotstorage_5fmodel_2eproto[6]);
}

// ===================================================================

class TimeStamp::_Internal {
 public:
};

TimeStamp::TimeStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.TimeStamp)
}
TimeStamp::TimeStamp(const TimeStamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeStamp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.milliseconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.milliseconds_ = from._impl_.milliseconds_;
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.TimeStamp)
}

inline void TimeStamp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.milliseconds_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimeStamp::~TimeStamp() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.TimeStamp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeStamp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeStamp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.TimeStamp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.milliseconds_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeStamp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 MilliSeconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeStamp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.TimeStamp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 MilliSeconds = 1;
  if (this->_internal_milliseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_milliseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.TimeStamp)
  return target;
}

size_t TimeStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.TimeStamp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 MilliSeconds = 1;
  if (this->_internal_milliseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_milliseconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeStamp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeStamp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeStamp::GetClassData() const { return &_class_data_; }


void TimeStamp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeStamp*>(&to_msg);
  auto& from = static_cast<const TimeStamp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.TimeStamp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_milliseconds() != 0) {
    _this->_internal_set_milliseconds(from._internal_milliseconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeStamp::CopyFrom(const TimeStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStamp::IsInitialized() const {
  return true;
}

void TimeStamp::InternalSwap(TimeStamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.milliseconds_, other->_impl_.milliseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeStamp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotstorage_5fmodel_2eproto_getter, &descriptor_table_hotstorage_5fmodel_2eproto_once,
      file_level_metadata_hotstorage_5fmodel_2eproto[7]);
}

// ===================================================================

class Uncertainties::_Internal {
 public:
};

Uncertainties::Uncertainties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.Uncertainties)
}
Uncertainties::Uncertainties(const Uncertainties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Uncertainties* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arrivalintervals_){from._impl_.arrivalintervals_}
    , decltype(_impl_.cranemovetimes_){from._impl_.cranemovetimes_}
    , decltype(_impl_.handoverreadyintervals_){from._impl_.handoverreadyintervals_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.Uncertainties)
}

inline void Uncertainties::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arrivalintervals_){arena}
    , decltype(_impl_.cranemovetimes_){arena}
    , decltype(_impl_.handoverreadyintervals_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Uncertainties::~Uncertainties() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.Uncertainties)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Uncertainties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arrivalintervals_.~RepeatedField();
  _impl_.cranemovetimes_.~RepeatedField();
  _impl_.handoverreadyintervals_.~RepeatedField();
}

void Uncertainties::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Uncertainties::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.Uncertainties)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arrivalintervals_.Clear();
  _impl_.cranemovetimes_.Clear();
  _impl_.handoverreadyintervals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uncertainties::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double ArrivalIntervals = 1 [packed = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_arrivalintervals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_arrivalintervals(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double CraneMoveTimes = 2 [packed = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cranemovetimes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_cranemovetimes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double HandoverReadyIntervals = 3 [packed = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_handoverreadyintervals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_handoverreadyintervals(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Uncertainties::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.Uncertainties)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double ArrivalIntervals = 1 [packed = false];
  for (int i = 0, n = this->_internal_arrivalintervals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_arrivalintervals(i), target);
  }

  // repeated double CraneMoveTimes = 2 [packed = false];
  for (int i = 0, n = this->_internal_cranemovetimes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_cranemovetimes(i), target);
  }

  // repeated double HandoverReadyIntervals = 3 [packed = false];
  for (int i = 0, n = this->_internal_handoverreadyintervals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_handoverreadyintervals(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.Uncertainties)
  return target;
}

size_t Uncertainties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.Uncertainties)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double ArrivalIntervals = 1 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arrivalintervals_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_arrivalintervals_size());
    total_size += data_size;
  }

  // repeated double CraneMoveTimes = 2 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cranemovetimes_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_cranemovetimes_size());
    total_size += data_size;
  }

  // repeated double HandoverReadyIntervals = 3 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_handoverreadyintervals_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_handoverreadyintervals_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Uncertainties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Uncertainties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Uncertainties::GetClassData() const { return &_class_data_; }


void Uncertainties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Uncertainties*>(&to_msg);
  auto& from = static_cast<const Uncertainties&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.Uncertainties)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arrivalintervals_.MergeFrom(from._impl_.arrivalintervals_);
  _this->_impl_.cranemovetimes_.MergeFrom(from._impl_.cranemovetimes_);
  _this->_impl_.handoverreadyintervals_.MergeFrom(from._impl_.handoverreadyintervals_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Uncertainties::CopyFrom(const Uncertainties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.Uncertainties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uncertainties::IsInitialized() const {
  return true;
}

void Uncertainties::InternalSwap(Uncertainties* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arrivalintervals_.InternalSwap(&other->_impl_.arrivalintervals_);
  _impl_.cranemovetimes_.InternalSwap(&other->_impl_.cranemovetimes_);
  _impl_.handoverreadyintervals_.InternalSwap(&other->_impl_.handoverreadyintervals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Uncertainties::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotstorage_5fmodel_2eproto_getter, &descriptor_table_hotstorage_5fmodel_2eproto_once,
      file_level_metadata_hotstorage_5fmodel_2eproto[8]);
}

// ===================================================================

class World::_Internal {
 public:
  static const ::DynStacking::HotStorage::DataModel::TimeStamp& now(const World* msg);
  static const ::DynStacking::HotStorage::DataModel::Stack& production(const World* msg);
  static const ::DynStacking::HotStorage::DataModel::Handover& handover(const World* msg);
  static const ::DynStacking::HotStorage::DataModel::Crane& crane(const World* msg);
  static const ::DynStacking::HotStorage::DataModel::Performance& kpis(const World* msg);
  static const ::DynStacking::HotStorage::DataModel::Uncertainties& observationdata(const World* msg);
};

const ::DynStacking::HotStorage::DataModel::TimeStamp&
World::_Internal::now(const World* msg) {
  return *msg->_impl_.now_;
}
const ::DynStacking::HotStorage::DataModel::Stack&
World::_Internal::production(const World* msg) {
  return *msg->_impl_.production_;
}
const ::DynStacking::HotStorage::DataModel::Handover&
World::_Internal::handover(const World* msg) {
  return *msg->_impl_.handover_;
}
const ::DynStacking::HotStorage::DataModel::Crane&
World::_Internal::crane(const World* msg) {
  return *msg->_impl_.crane_;
}
const ::DynStacking::HotStorage::DataModel::Performance&
World::_Internal::kpis(const World* msg) {
  return *msg->_impl_.kpis_;
}
const ::DynStacking::HotStorage::DataModel::Uncertainties&
World::_Internal::observationdata(const World* msg) {
  return *msg->_impl_.observationdata_;
}
World::World(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.World)
}
World::World(const World& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  World* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buffers_){from._impl_.buffers_}
    , decltype(_impl_.invalidmoves_){from._impl_.invalidmoves_}
    , decltype(_impl_.now_){nullptr}
    , decltype(_impl_.production_){nullptr}
    , decltype(_impl_.handover_){nullptr}
    , decltype(_impl_.crane_){nullptr}
    , decltype(_impl_.kpis_){nullptr}
    , decltype(_impl_.observationdata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_now()) {
    _this->_impl_.now_ = new ::DynStacking::HotStorage::DataModel::TimeStamp(*from._impl_.now_);
  }
  if (from._internal_has_production()) {
    _this->_impl_.production_ = new ::DynStacking::HotStorage::DataModel::Stack(*from._impl_.production_);
  }
  if (from._internal_has_handover()) {
    _this->_impl_.handover_ = new ::DynStacking::HotStorage::DataModel::Handover(*from._impl_.handover_);
  }
  if (from._internal_has_crane()) {
    _this->_impl_.crane_ = new ::DynStacking::HotStorage::DataModel::Crane(*from._impl_.crane_);
  }
  if (from._internal_has_kpis()) {
    _this->_impl_.kpis_ = new ::DynStacking::HotStorage::DataModel::Performance(*from._impl_.kpis_);
  }
  if (from._internal_has_observationdata()) {
    _this->_impl_.observationdata_ = new ::DynStacking::HotStorage::DataModel::Uncertainties(*from._impl_.observationdata_);
  }
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.World)
}

inline void World::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buffers_){arena}
    , decltype(_impl_.invalidmoves_){arena}
    , decltype(_impl_.now_){nullptr}
    , decltype(_impl_.production_){nullptr}
    , decltype(_impl_.handover_){nullptr}
    , decltype(_impl_.crane_){nullptr}
    , decltype(_impl_.kpis_){nullptr}
    , decltype(_impl_.observationdata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

World::~World() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.World)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void World::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buffers_.~RepeatedPtrField();
  _impl_.invalidmoves_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.now_;
  if (this != internal_default_instance()) delete _impl_.production_;
  if (this != internal_default_instance()) delete _impl_.handover_;
  if (this != internal_default_instance()) delete _impl_.crane_;
  if (this != internal_default_instance()) delete _impl_.kpis_;
  if (this != internal_default_instance()) delete _impl_.observationdata_;
}

void World::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void World::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.World)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buffers_.Clear();
  _impl_.invalidmoves_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.now_ != nullptr) {
    delete _impl_.now_;
  }
  _impl_.now_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.production_ != nullptr) {
    delete _impl_.production_;
  }
  _impl_.production_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.handover_ != nullptr) {
    delete _impl_.handover_;
  }
  _impl_.handover_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.crane_ != nullptr) {
    delete _impl_.crane_;
  }
  _impl_.crane_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kpis_ != nullptr) {
    delete _impl_.kpis_;
  }
  _impl_.kpis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.observationdata_ != nullptr) {
    delete _impl_.observationdata_;
  }
  _impl_.observationdata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* World::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DynStacking.HotStorage.DataModel.TimeStamp Now = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_now(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.Stack Production = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_production(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DynStacking.HotStorage.DataModel.Stack Buffers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.Handover Handover = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_handover(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.Crane Crane = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_crane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.Performance KPIs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_kpis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.Uncertainties ObservationData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_observationdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DynStacking.HotStorage.DataModel.CraneMove InvalidMoves = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invalidmoves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* World::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.World)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DynStacking.HotStorage.DataModel.TimeStamp Now = 1;
  if (this->_internal_has_now()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::now(this),
        _Internal::now(this).GetCachedSize(), target, stream);
  }

  // .DynStacking.HotStorage.DataModel.Stack Production = 2;
  if (this->_internal_has_production()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::production(this),
        _Internal::production(this).GetCachedSize(), target, stream);
  }

  // repeated .DynStacking.HotStorage.DataModel.Stack Buffers = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buffers_size()); i < n; i++) {
    const auto& repfield = this->_internal_buffers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .DynStacking.HotStorage.DataModel.Handover Handover = 4;
  if (this->_internal_has_handover()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::handover(this),
        _Internal::handover(this).GetCachedSize(), target, stream);
  }

  // .DynStacking.HotStorage.DataModel.Crane Crane = 5;
  if (this->_internal_has_crane()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::crane(this),
        _Internal::crane(this).GetCachedSize(), target, stream);
  }

  // .DynStacking.HotStorage.DataModel.Performance KPIs = 6;
  if (this->_internal_has_kpis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::kpis(this),
        _Internal::kpis(this).GetCachedSize(), target, stream);
  }

  // .DynStacking.HotStorage.DataModel.Uncertainties ObservationData = 7;
  if (this->_internal_has_observationdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::observationdata(this),
        _Internal::observationdata(this).GetCachedSize(), target, stream);
  }

  // repeated .DynStacking.HotStorage.DataModel.CraneMove InvalidMoves = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_invalidmoves_size()); i < n; i++) {
    const auto& repfield = this->_internal_invalidmoves(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.World)
  return target;
}

size_t World::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.World)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DynStacking.HotStorage.DataModel.Stack Buffers = 3;
  total_size += 1UL * this->_internal_buffers_size();
  for (const auto& msg : this->_impl_.buffers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DynStacking.HotStorage.DataModel.CraneMove InvalidMoves = 8;
  total_size += 1UL * this->_internal_invalidmoves_size();
  for (const auto& msg : this->_impl_.invalidmoves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DynStacking.HotStorage.DataModel.TimeStamp Now = 1;
  if (this->_internal_has_now()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.now_);
  }

  // .DynStacking.HotStorage.DataModel.Stack Production = 2;
  if (this->_internal_has_production()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.production_);
  }

  // .DynStacking.HotStorage.DataModel.Handover Handover = 4;
  if (this->_internal_has_handover()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.handover_);
  }

  // .DynStacking.HotStorage.DataModel.Crane Crane = 5;
  if (this->_internal_has_crane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.crane_);
  }

  // .DynStacking.HotStorage.DataModel.Performance KPIs = 6;
  if (this->_internal_has_kpis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kpis_);
  }

  // .DynStacking.HotStorage.DataModel.Uncertainties ObservationData = 7;
  if (this->_internal_has_observationdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.observationdata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData World::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    World::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*World::GetClassData() const { return &_class_data_; }


void World::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<World*>(&to_msg);
  auto& from = static_cast<const World&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.World)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buffers_.MergeFrom(from._impl_.buffers_);
  _this->_impl_.invalidmoves_.MergeFrom(from._impl_.invalidmoves_);
  if (from._internal_has_now()) {
    _this->_internal_mutable_now()->::DynStacking::HotStorage::DataModel::TimeStamp::MergeFrom(
        from._internal_now());
  }
  if (from._internal_has_production()) {
    _this->_internal_mutable_production()->::DynStacking::HotStorage::DataModel::Stack::MergeFrom(
        from._internal_production());
  }
  if (from._internal_has_handover()) {
    _this->_internal_mutable_handover()->::DynStacking::HotStorage::DataModel::Handover::MergeFrom(
        from._internal_handover());
  }
  if (from._internal_has_crane()) {
    _this->_internal_mutable_crane()->::DynStacking::HotStorage::DataModel::Crane::MergeFrom(
        from._internal_crane());
  }
  if (from._internal_has_kpis()) {
    _this->_internal_mutable_kpis()->::DynStacking::HotStorage::DataModel::Performance::MergeFrom(
        from._internal_kpis());
  }
  if (from._internal_has_observationdata()) {
    _this->_internal_mutable_observationdata()->::DynStacking::HotStorage::DataModel::Uncertainties::MergeFrom(
        from._internal_observationdata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void World::CopyFrom(const World& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.World)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World::IsInitialized() const {
  return true;
}

void World::InternalSwap(World* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buffers_.InternalSwap(&other->_impl_.buffers_);
  _impl_.invalidmoves_.InternalSwap(&other->_impl_.invalidmoves_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(World, _impl_.observationdata_)
      + sizeof(World::_impl_.observationdata_)
      - PROTOBUF_FIELD_OFFSET(World, _impl_.now_)>(
          reinterpret_cast<char*>(&_impl_.now_),
          reinterpret_cast<char*>(&other->_impl_.now_));
}

::PROTOBUF_NAMESPACE_ID::Metadata World::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hotstorage_5fmodel_2eproto_getter, &descriptor_table_hotstorage_5fmodel_2eproto_once,
      file_level_metadata_hotstorage_5fmodel_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DataModel
}  // namespace HotStorage
}  // namespace DynStacking
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::Block*
Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::Crane*
Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::Crane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::Crane >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::CraneMove*
Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::CraneMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::CraneMove >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::CraneSchedule*
Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::CraneSchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::CraneSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::Handover*
Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::Handover >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::Handover >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::Performance*
Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::Performance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::Performance >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::Stack*
Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::Stack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::Stack >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::TimeStamp*
Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::TimeStamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::TimeStamp >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::Uncertainties*
Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::Uncertainties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::Uncertainties >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::World*
Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::World >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::World >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
