// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hotstorage_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hotstorage_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hotstorage_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hotstorage_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hotstorage_5fmodel_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hotstorage_5fmodel_2eproto;
namespace DynStacking {
namespace HotStorage {
namespace DataModel {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Crane;
struct CraneDefaultTypeInternal;
extern CraneDefaultTypeInternal _Crane_default_instance_;
class CraneMove;
struct CraneMoveDefaultTypeInternal;
extern CraneMoveDefaultTypeInternal _CraneMove_default_instance_;
class CraneSchedule;
struct CraneScheduleDefaultTypeInternal;
extern CraneScheduleDefaultTypeInternal _CraneSchedule_default_instance_;
class Handover;
struct HandoverDefaultTypeInternal;
extern HandoverDefaultTypeInternal _Handover_default_instance_;
class Performance;
struct PerformanceDefaultTypeInternal;
extern PerformanceDefaultTypeInternal _Performance_default_instance_;
class Stack;
struct StackDefaultTypeInternal;
extern StackDefaultTypeInternal _Stack_default_instance_;
class TimeStamp;
struct TimeStampDefaultTypeInternal;
extern TimeStampDefaultTypeInternal _TimeStamp_default_instance_;
class Uncertainties;
struct UncertaintiesDefaultTypeInternal;
extern UncertaintiesDefaultTypeInternal _Uncertainties_default_instance_;
class World;
struct WorldDefaultTypeInternal;
extern WorldDefaultTypeInternal _World_default_instance_;
}  // namespace DataModel
}  // namespace HotStorage
}  // namespace DynStacking
PROTOBUF_NAMESPACE_OPEN
template<> ::DynStacking::HotStorage::DataModel::Block* Arena::CreateMaybeMessage<::DynStacking::HotStorage::DataModel::Block>(Arena*);
template<> ::DynStacking::HotStorage::DataModel::Crane* Arena::CreateMaybeMessage<::DynStacking::HotStorage::DataModel::Crane>(Arena*);
template<> ::DynStacking::HotStorage::DataModel::CraneMove* Arena::CreateMaybeMessage<::DynStacking::HotStorage::DataModel::CraneMove>(Arena*);
template<> ::DynStacking::HotStorage::DataModel::CraneSchedule* Arena::CreateMaybeMessage<::DynStacking::HotStorage::DataModel::CraneSchedule>(Arena*);
template<> ::DynStacking::HotStorage::DataModel::Handover* Arena::CreateMaybeMessage<::DynStacking::HotStorage::DataModel::Handover>(Arena*);
template<> ::DynStacking::HotStorage::DataModel::Performance* Arena::CreateMaybeMessage<::DynStacking::HotStorage::DataModel::Performance>(Arena*);
template<> ::DynStacking::HotStorage::DataModel::Stack* Arena::CreateMaybeMessage<::DynStacking::HotStorage::DataModel::Stack>(Arena*);
template<> ::DynStacking::HotStorage::DataModel::TimeStamp* Arena::CreateMaybeMessage<::DynStacking::HotStorage::DataModel::TimeStamp>(Arena*);
template<> ::DynStacking::HotStorage::DataModel::Uncertainties* Arena::CreateMaybeMessage<::DynStacking::HotStorage::DataModel::Uncertainties>(Arena*);
template<> ::DynStacking::HotStorage::DataModel::World* Arena::CreateMaybeMessage<::DynStacking::HotStorage::DataModel::World>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DynStacking {
namespace HotStorage {
namespace DataModel {

// ===================================================================

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.HotStorage.DataModel.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Block& from) {
    Block::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.HotStorage.DataModel.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReleaseFieldNumber = 2,
    kDueFieldNumber = 3,
    kIdFieldNumber = 1,
    kReadyFieldNumber = 4,
  };
  // .DynStacking.HotStorage.DataModel.TimeStamp Release = 2;
  bool has_release() const;
  private:
  bool _internal_has_release() const;
  public:
  void clear_release();
  const ::DynStacking::HotStorage::DataModel::TimeStamp& release() const;
  PROTOBUF_NODISCARD ::DynStacking::HotStorage::DataModel::TimeStamp* release_release();
  ::DynStacking::HotStorage::DataModel::TimeStamp* mutable_release();
  void set_allocated_release(::DynStacking::HotStorage::DataModel::TimeStamp* release);
  private:
  const ::DynStacking::HotStorage::DataModel::TimeStamp& _internal_release() const;
  ::DynStacking::HotStorage::DataModel::TimeStamp* _internal_mutable_release();
  public:
  void unsafe_arena_set_allocated_release(
      ::DynStacking::HotStorage::DataModel::TimeStamp* release);
  ::DynStacking::HotStorage::DataModel::TimeStamp* unsafe_arena_release_release();

  // .DynStacking.HotStorage.DataModel.TimeStamp Due = 3;
  bool has_due() const;
  private:
  bool _internal_has_due() const;
  public:
  void clear_due();
  const ::DynStacking::HotStorage::DataModel::TimeStamp& due() const;
  PROTOBUF_NODISCARD ::DynStacking::HotStorage::DataModel::TimeStamp* release_due();
  ::DynStacking::HotStorage::DataModel::TimeStamp* mutable_due();
  void set_allocated_due(::DynStacking::HotStorage::DataModel::TimeStamp* due);
  private:
  const ::DynStacking::HotStorage::DataModel::TimeStamp& _internal_due() const;
  ::DynStacking::HotStorage::DataModel::TimeStamp* _internal_mutable_due();
  public:
  void unsafe_arena_set_allocated_due(
      ::DynStacking::HotStorage::DataModel::TimeStamp* due);
  ::DynStacking::HotStorage::DataModel::TimeStamp* unsafe_arena_release_due();

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // bool Ready = 4;
  void clear_ready();
  bool ready() const;
  void set_ready(bool value);
  private:
  bool _internal_ready() const;
  void _internal_set_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.HotStorage.DataModel.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DynStacking::HotStorage::DataModel::TimeStamp* release_;
    ::DynStacking::HotStorage::DataModel::TimeStamp* due_;
    int32_t id_;
    bool ready_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotstorage_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Crane final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.HotStorage.DataModel.Crane) */ {
 public:
  inline Crane() : Crane(nullptr) {}
  ~Crane() override;
  explicit PROTOBUF_CONSTEXPR Crane(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Crane(const Crane& from);
  Crane(Crane&& from) noexcept
    : Crane() {
    *this = ::std::move(from);
  }

  inline Crane& operator=(const Crane& from) {
    CopyFrom(from);
    return *this;
  }
  inline Crane& operator=(Crane&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Crane& default_instance() {
    return *internal_default_instance();
  }
  static inline const Crane* internal_default_instance() {
    return reinterpret_cast<const Crane*>(
               &_Crane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Crane& a, Crane& b) {
    a.Swap(&b);
  }
  inline void Swap(Crane* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Crane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Crane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Crane>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Crane& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Crane& from) {
    Crane::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Crane* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.HotStorage.DataModel.Crane";
  }
  protected:
  explicit Crane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadFieldNumber = 3,
    kScheduleFieldNumber = 4,
    kIdFieldNumber = 1,
    kLocationIdFieldNumber = 2,
    kGirderPositionFieldNumber = 5,
    kHoistPositionFieldNumber = 6,
  };
  // .DynStacking.HotStorage.DataModel.Block Load = 3;
  bool has_load() const;
  private:
  bool _internal_has_load() const;
  public:
  void clear_load();
  const ::DynStacking::HotStorage::DataModel::Block& load() const;
  PROTOBUF_NODISCARD ::DynStacking::HotStorage::DataModel::Block* release_load();
  ::DynStacking::HotStorage::DataModel::Block* mutable_load();
  void set_allocated_load(::DynStacking::HotStorage::DataModel::Block* load);
  private:
  const ::DynStacking::HotStorage::DataModel::Block& _internal_load() const;
  ::DynStacking::HotStorage::DataModel::Block* _internal_mutable_load();
  public:
  void unsafe_arena_set_allocated_load(
      ::DynStacking::HotStorage::DataModel::Block* load);
  ::DynStacking::HotStorage::DataModel::Block* unsafe_arena_release_load();

  // .DynStacking.HotStorage.DataModel.CraneSchedule Schedule = 4;
  bool has_schedule() const;
  private:
  bool _internal_has_schedule() const;
  public:
  void clear_schedule();
  const ::DynStacking::HotStorage::DataModel::CraneSchedule& schedule() const;
  PROTOBUF_NODISCARD ::DynStacking::HotStorage::DataModel::CraneSchedule* release_schedule();
  ::DynStacking::HotStorage::DataModel::CraneSchedule* mutable_schedule();
  void set_allocated_schedule(::DynStacking::HotStorage::DataModel::CraneSchedule* schedule);
  private:
  const ::DynStacking::HotStorage::DataModel::CraneSchedule& _internal_schedule() const;
  ::DynStacking::HotStorage::DataModel::CraneSchedule* _internal_mutable_schedule();
  public:
  void unsafe_arena_set_allocated_schedule(
      ::DynStacking::HotStorage::DataModel::CraneSchedule* schedule);
  ::DynStacking::HotStorage::DataModel::CraneSchedule* unsafe_arena_release_schedule();

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 LocationId = 2;
  void clear_locationid();
  int32_t locationid() const;
  void set_locationid(int32_t value);
  private:
  int32_t _internal_locationid() const;
  void _internal_set_locationid(int32_t value);
  public:

  // double GirderPosition = 5;
  void clear_girderposition();
  double girderposition() const;
  void set_girderposition(double value);
  private:
  double _internal_girderposition() const;
  void _internal_set_girderposition(double value);
  public:

  // double HoistPosition = 6;
  void clear_hoistposition();
  double hoistposition() const;
  void set_hoistposition(double value);
  private:
  double _internal_hoistposition() const;
  void _internal_set_hoistposition(double value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.HotStorage.DataModel.Crane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DynStacking::HotStorage::DataModel::Block* load_;
    ::DynStacking::HotStorage::DataModel::CraneSchedule* schedule_;
    int32_t id_;
    int32_t locationid_;
    double girderposition_;
    double hoistposition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotstorage_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class CraneMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.HotStorage.DataModel.CraneMove) */ {
 public:
  inline CraneMove() : CraneMove(nullptr) {}
  ~CraneMove() override;
  explicit PROTOBUF_CONSTEXPR CraneMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CraneMove(const CraneMove& from);
  CraneMove(CraneMove&& from) noexcept
    : CraneMove() {
    *this = ::std::move(from);
  }

  inline CraneMove& operator=(const CraneMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline CraneMove& operator=(CraneMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CraneMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const CraneMove* internal_default_instance() {
    return reinterpret_cast<const CraneMove*>(
               &_CraneMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CraneMove& a, CraneMove& b) {
    a.Swap(&b);
  }
  inline void Swap(CraneMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CraneMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CraneMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CraneMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CraneMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CraneMove& from) {
    CraneMove::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CraneMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.HotStorage.DataModel.CraneMove";
  }
  protected:
  explicit CraneMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
    kTargetIdFieldNumber = 3,
    kSequenceFieldNumber = 4,
    kEmptyMoveFieldNumber = 5,
  };
  // int32 BlockId = 1;
  void clear_blockid();
  int32_t blockid() const;
  void set_blockid(int32_t value);
  private:
  int32_t _internal_blockid() const;
  void _internal_set_blockid(int32_t value);
  public:

  // int32 SourceId = 2;
  void clear_sourceid();
  int32_t sourceid() const;
  void set_sourceid(int32_t value);
  private:
  int32_t _internal_sourceid() const;
  void _internal_set_sourceid(int32_t value);
  public:

  // int32 TargetId = 3;
  void clear_targetid();
  int32_t targetid() const;
  void set_targetid(int32_t value);
  private:
  int32_t _internal_targetid() const;
  void _internal_set_targetid(int32_t value);
  public:

  // int32 Sequence = 4;
  void clear_sequence();
  int32_t sequence() const;
  void set_sequence(int32_t value);
  private:
  int32_t _internal_sequence() const;
  void _internal_set_sequence(int32_t value);
  public:

  // bool EmptyMove = 5;
  void clear_emptymove();
  bool emptymove() const;
  void set_emptymove(bool value);
  private:
  bool _internal_emptymove() const;
  void _internal_set_emptymove(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.HotStorage.DataModel.CraneMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t blockid_;
    int32_t sourceid_;
    int32_t targetid_;
    int32_t sequence_;
    bool emptymove_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotstorage_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class CraneSchedule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.HotStorage.DataModel.CraneSchedule) */ {
 public:
  inline CraneSchedule() : CraneSchedule(nullptr) {}
  ~CraneSchedule() override;
  explicit PROTOBUF_CONSTEXPR CraneSchedule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CraneSchedule(const CraneSchedule& from);
  CraneSchedule(CraneSchedule&& from) noexcept
    : CraneSchedule() {
    *this = ::std::move(from);
  }

  inline CraneSchedule& operator=(const CraneSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline CraneSchedule& operator=(CraneSchedule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CraneSchedule& default_instance() {
    return *internal_default_instance();
  }
  static inline const CraneSchedule* internal_default_instance() {
    return reinterpret_cast<const CraneSchedule*>(
               &_CraneSchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CraneSchedule& a, CraneSchedule& b) {
    a.Swap(&b);
  }
  inline void Swap(CraneSchedule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CraneSchedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CraneSchedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CraneSchedule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CraneSchedule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CraneSchedule& from) {
    CraneSchedule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CraneSchedule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.HotStorage.DataModel.CraneSchedule";
  }
  protected:
  explicit CraneSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovesFieldNumber = 1,
    kSequenceNrFieldNumber = 2,
  };
  // repeated .DynStacking.HotStorage.DataModel.CraneMove Moves = 1;
  int moves_size() const;
  private:
  int _internal_moves_size() const;
  public:
  void clear_moves();
  ::DynStacking::HotStorage::DataModel::CraneMove* mutable_moves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::CraneMove >*
      mutable_moves();
  private:
  const ::DynStacking::HotStorage::DataModel::CraneMove& _internal_moves(int index) const;
  ::DynStacking::HotStorage::DataModel::CraneMove* _internal_add_moves();
  public:
  const ::DynStacking::HotStorage::DataModel::CraneMove& moves(int index) const;
  ::DynStacking::HotStorage::DataModel::CraneMove* add_moves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::CraneMove >&
      moves() const;

  // int32 SequenceNr = 2;
  void clear_sequencenr();
  int32_t sequencenr() const;
  void set_sequencenr(int32_t value);
  private:
  int32_t _internal_sequencenr() const;
  void _internal_set_sequencenr(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.HotStorage.DataModel.CraneSchedule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::CraneMove > moves_;
    int32_t sequencenr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotstorage_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Handover final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.HotStorage.DataModel.Handover) */ {
 public:
  inline Handover() : Handover(nullptr) {}
  ~Handover() override;
  explicit PROTOBUF_CONSTEXPR Handover(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Handover(const Handover& from);
  Handover(Handover&& from) noexcept
    : Handover() {
    *this = ::std::move(from);
  }

  inline Handover& operator=(const Handover& from) {
    CopyFrom(from);
    return *this;
  }
  inline Handover& operator=(Handover&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Handover& default_instance() {
    return *internal_default_instance();
  }
  static inline const Handover* internal_default_instance() {
    return reinterpret_cast<const Handover*>(
               &_Handover_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Handover& a, Handover& b) {
    a.Swap(&b);
  }
  inline void Swap(Handover* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Handover* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Handover* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Handover>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Handover& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Handover& from) {
    Handover::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Handover* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.HotStorage.DataModel.Handover";
  }
  protected:
  explicit Handover(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 3,
    kIdFieldNumber = 1,
    kReadyFieldNumber = 2,
  };
  // .DynStacking.HotStorage.DataModel.Block Block = 3;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::DynStacking::HotStorage::DataModel::Block& block() const;
  PROTOBUF_NODISCARD ::DynStacking::HotStorage::DataModel::Block* release_block();
  ::DynStacking::HotStorage::DataModel::Block* mutable_block();
  void set_allocated_block(::DynStacking::HotStorage::DataModel::Block* block);
  private:
  const ::DynStacking::HotStorage::DataModel::Block& _internal_block() const;
  ::DynStacking::HotStorage::DataModel::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::DynStacking::HotStorage::DataModel::Block* block);
  ::DynStacking::HotStorage::DataModel::Block* unsafe_arena_release_block();

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // bool Ready = 2;
  void clear_ready();
  bool ready() const;
  void set_ready(bool value);
  private:
  bool _internal_ready() const;
  void _internal_set_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.HotStorage.DataModel.Handover)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DynStacking::HotStorage::DataModel::Block* block_;
    int32_t id_;
    bool ready_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotstorage_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Performance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.HotStorage.DataModel.Performance) */ {
 public:
  inline Performance() : Performance(nullptr) {}
  ~Performance() override;
  explicit PROTOBUF_CONSTEXPR Performance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Performance(const Performance& from);
  Performance(Performance&& from) noexcept
    : Performance() {
    *this = ::std::move(from);
  }

  inline Performance& operator=(const Performance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Performance& operator=(Performance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Performance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Performance* internal_default_instance() {
    return reinterpret_cast<const Performance*>(
               &_Performance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Performance& a, Performance& b) {
    a.Swap(&b);
  }
  inline void Swap(Performance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Performance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Performance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Performance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Performance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Performance& from) {
    Performance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Performance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.HotStorage.DataModel.Performance";
  }
  protected:
  explicit Performance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceLevelMeanFieldNumber = 2,
    kCraneManipulationsFieldNumber = 1,
    kDeliveredBlocksFieldNumber = 4,
    kLeadTimeMeanFieldNumber = 3,
    kBlockedArrivalTimeFieldNumber = 6,
    kTardinessMeanFieldNumber = 7,
    kBufferUtilizationMeanFieldNumber = 8,
    kCraneUtilizationMeanFieldNumber = 9,
    kHandoverUtilizationMeanFieldNumber = 10,
    kUpstreamUtilizationMeanFieldNumber = 11,
    kTotalBlocksOnTimeFieldNumber = 5,
  };
  // double ServiceLevelMean = 2;
  void clear_servicelevelmean();
  double servicelevelmean() const;
  void set_servicelevelmean(double value);
  private:
  double _internal_servicelevelmean() const;
  void _internal_set_servicelevelmean(double value);
  public:

  // int32 CraneManipulations = 1;
  void clear_cranemanipulations();
  int32_t cranemanipulations() const;
  void set_cranemanipulations(int32_t value);
  private:
  int32_t _internal_cranemanipulations() const;
  void _internal_set_cranemanipulations(int32_t value);
  public:

  // int32 DeliveredBlocks = 4;
  void clear_deliveredblocks();
  int32_t deliveredblocks() const;
  void set_deliveredblocks(int32_t value);
  private:
  int32_t _internal_deliveredblocks() const;
  void _internal_set_deliveredblocks(int32_t value);
  public:

  // double LeadTimeMean = 3;
  void clear_leadtimemean();
  double leadtimemean() const;
  void set_leadtimemean(double value);
  private:
  double _internal_leadtimemean() const;
  void _internal_set_leadtimemean(double value);
  public:

  // double BlockedArrivalTime = 6;
  void clear_blockedarrivaltime();
  double blockedarrivaltime() const;
  void set_blockedarrivaltime(double value);
  private:
  double _internal_blockedarrivaltime() const;
  void _internal_set_blockedarrivaltime(double value);
  public:

  // double TardinessMean = 7;
  void clear_tardinessmean();
  double tardinessmean() const;
  void set_tardinessmean(double value);
  private:
  double _internal_tardinessmean() const;
  void _internal_set_tardinessmean(double value);
  public:

  // double BufferUtilizationMean = 8;
  void clear_bufferutilizationmean();
  double bufferutilizationmean() const;
  void set_bufferutilizationmean(double value);
  private:
  double _internal_bufferutilizationmean() const;
  void _internal_set_bufferutilizationmean(double value);
  public:

  // double CraneUtilizationMean = 9;
  void clear_craneutilizationmean();
  double craneutilizationmean() const;
  void set_craneutilizationmean(double value);
  private:
  double _internal_craneutilizationmean() const;
  void _internal_set_craneutilizationmean(double value);
  public:

  // double HandoverUtilizationMean = 10;
  void clear_handoverutilizationmean();
  double handoverutilizationmean() const;
  void set_handoverutilizationmean(double value);
  private:
  double _internal_handoverutilizationmean() const;
  void _internal_set_handoverutilizationmean(double value);
  public:

  // double UpstreamUtilizationMean = 11;
  void clear_upstreamutilizationmean();
  double upstreamutilizationmean() const;
  void set_upstreamutilizationmean(double value);
  private:
  double _internal_upstreamutilizationmean() const;
  void _internal_set_upstreamutilizationmean(double value);
  public:

  // int32 TotalBlocksOnTime = 5;
  void clear_totalblocksontime();
  int32_t totalblocksontime() const;
  void set_totalblocksontime(int32_t value);
  private:
  int32_t _internal_totalblocksontime() const;
  void _internal_set_totalblocksontime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.HotStorage.DataModel.Performance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double servicelevelmean_;
    int32_t cranemanipulations_;
    int32_t deliveredblocks_;
    double leadtimemean_;
    double blockedarrivaltime_;
    double tardinessmean_;
    double bufferutilizationmean_;
    double craneutilizationmean_;
    double handoverutilizationmean_;
    double upstreamutilizationmean_;
    int32_t totalblocksontime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotstorage_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Stack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.HotStorage.DataModel.Stack) */ {
 public:
  inline Stack() : Stack(nullptr) {}
  ~Stack() override;
  explicit PROTOBUF_CONSTEXPR Stack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stack(const Stack& from);
  Stack(Stack&& from) noexcept
    : Stack() {
    *this = ::std::move(from);
  }

  inline Stack& operator=(const Stack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stack& operator=(Stack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stack* internal_default_instance() {
    return reinterpret_cast<const Stack*>(
               &_Stack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Stack& a, Stack& b) {
    a.Swap(&b);
  }
  inline void Swap(Stack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stack& from) {
    Stack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.HotStorage.DataModel.Stack";
  }
  protected:
  explicit Stack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBottomToTopFieldNumber = 3,
    kIdFieldNumber = 1,
    kMaxHeightFieldNumber = 2,
  };
  // repeated .DynStacking.HotStorage.DataModel.Block BottomToTop = 3;
  int bottomtotop_size() const;
  private:
  int _internal_bottomtotop_size() const;
  public:
  void clear_bottomtotop();
  ::DynStacking::HotStorage::DataModel::Block* mutable_bottomtotop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::Block >*
      mutable_bottomtotop();
  private:
  const ::DynStacking::HotStorage::DataModel::Block& _internal_bottomtotop(int index) const;
  ::DynStacking::HotStorage::DataModel::Block* _internal_add_bottomtotop();
  public:
  const ::DynStacking::HotStorage::DataModel::Block& bottomtotop(int index) const;
  ::DynStacking::HotStorage::DataModel::Block* add_bottomtotop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::Block >&
      bottomtotop() const;

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 MaxHeight = 2;
  void clear_maxheight();
  int32_t maxheight() const;
  void set_maxheight(int32_t value);
  private:
  int32_t _internal_maxheight() const;
  void _internal_set_maxheight(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.HotStorage.DataModel.Stack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::Block > bottomtotop_;
    int32_t id_;
    int32_t maxheight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotstorage_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class TimeStamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.HotStorage.DataModel.TimeStamp) */ {
 public:
  inline TimeStamp() : TimeStamp(nullptr) {}
  ~TimeStamp() override;
  explicit PROTOBUF_CONSTEXPR TimeStamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeStamp(const TimeStamp& from);
  TimeStamp(TimeStamp&& from) noexcept
    : TimeStamp() {
    *this = ::std::move(from);
  }

  inline TimeStamp& operator=(const TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeStamp& operator=(TimeStamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeStamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeStamp* internal_default_instance() {
    return reinterpret_cast<const TimeStamp*>(
               &_TimeStamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TimeStamp& a, TimeStamp& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeStamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeStamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeStamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeStamp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeStamp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeStamp& from) {
    TimeStamp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeStamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.HotStorage.DataModel.TimeStamp";
  }
  protected:
  explicit TimeStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMilliSecondsFieldNumber = 1,
  };
  // int64 MilliSeconds = 1;
  void clear_milliseconds();
  int64_t milliseconds() const;
  void set_milliseconds(int64_t value);
  private:
  int64_t _internal_milliseconds() const;
  void _internal_set_milliseconds(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.HotStorage.DataModel.TimeStamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t milliseconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotstorage_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Uncertainties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.HotStorage.DataModel.Uncertainties) */ {
 public:
  inline Uncertainties() : Uncertainties(nullptr) {}
  ~Uncertainties() override;
  explicit PROTOBUF_CONSTEXPR Uncertainties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Uncertainties(const Uncertainties& from);
  Uncertainties(Uncertainties&& from) noexcept
    : Uncertainties() {
    *this = ::std::move(from);
  }

  inline Uncertainties& operator=(const Uncertainties& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uncertainties& operator=(Uncertainties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Uncertainties& default_instance() {
    return *internal_default_instance();
  }
  static inline const Uncertainties* internal_default_instance() {
    return reinterpret_cast<const Uncertainties*>(
               &_Uncertainties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Uncertainties& a, Uncertainties& b) {
    a.Swap(&b);
  }
  inline void Swap(Uncertainties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uncertainties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Uncertainties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Uncertainties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Uncertainties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Uncertainties& from) {
    Uncertainties::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uncertainties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.HotStorage.DataModel.Uncertainties";
  }
  protected:
  explicit Uncertainties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrivalIntervalsFieldNumber = 1,
    kCraneMoveTimesFieldNumber = 2,
    kHandoverReadyIntervalsFieldNumber = 3,
  };
  // repeated double ArrivalIntervals = 1 [packed = false];
  int arrivalintervals_size() const;
  private:
  int _internal_arrivalintervals_size() const;
  public:
  void clear_arrivalintervals();
  private:
  double _internal_arrivalintervals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_arrivalintervals() const;
  void _internal_add_arrivalintervals(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_arrivalintervals();
  public:
  double arrivalintervals(int index) const;
  void set_arrivalintervals(int index, double value);
  void add_arrivalintervals(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      arrivalintervals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_arrivalintervals();

  // repeated double CraneMoveTimes = 2 [packed = false];
  int cranemovetimes_size() const;
  private:
  int _internal_cranemovetimes_size() const;
  public:
  void clear_cranemovetimes();
  private:
  double _internal_cranemovetimes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_cranemovetimes() const;
  void _internal_add_cranemovetimes(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_cranemovetimes();
  public:
  double cranemovetimes(int index) const;
  void set_cranemovetimes(int index, double value);
  void add_cranemovetimes(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      cranemovetimes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_cranemovetimes();

  // repeated double HandoverReadyIntervals = 3 [packed = false];
  int handoverreadyintervals_size() const;
  private:
  int _internal_handoverreadyintervals_size() const;
  public:
  void clear_handoverreadyintervals();
  private:
  double _internal_handoverreadyintervals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_handoverreadyintervals() const;
  void _internal_add_handoverreadyintervals(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_handoverreadyintervals();
  public:
  double handoverreadyintervals(int index) const;
  void set_handoverreadyintervals(int index, double value);
  void add_handoverreadyintervals(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      handoverreadyintervals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_handoverreadyintervals();

  // @@protoc_insertion_point(class_scope:DynStacking.HotStorage.DataModel.Uncertainties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > arrivalintervals_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > cranemovetimes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > handoverreadyintervals_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotstorage_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class World final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.HotStorage.DataModel.World) */ {
 public:
  inline World() : World(nullptr) {}
  ~World() override;
  explicit PROTOBUF_CONSTEXPR World(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  World(const World& from);
  World(World&& from) noexcept
    : World() {
    *this = ::std::move(from);
  }

  inline World& operator=(const World& from) {
    CopyFrom(from);
    return *this;
  }
  inline World& operator=(World&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const World& default_instance() {
    return *internal_default_instance();
  }
  static inline const World* internal_default_instance() {
    return reinterpret_cast<const World*>(
               &_World_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(World& a, World& b) {
    a.Swap(&b);
  }
  inline void Swap(World* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(World* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  World* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<World>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const World& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const World& from) {
    World::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(World* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.HotStorage.DataModel.World";
  }
  protected:
  explicit World(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffersFieldNumber = 3,
    kInvalidMovesFieldNumber = 8,
    kNowFieldNumber = 1,
    kProductionFieldNumber = 2,
    kHandoverFieldNumber = 4,
    kCraneFieldNumber = 5,
    kKPIsFieldNumber = 6,
    kObservationDataFieldNumber = 7,
  };
  // repeated .DynStacking.HotStorage.DataModel.Stack Buffers = 3;
  int buffers_size() const;
  private:
  int _internal_buffers_size() const;
  public:
  void clear_buffers();
  ::DynStacking::HotStorage::DataModel::Stack* mutable_buffers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::Stack >*
      mutable_buffers();
  private:
  const ::DynStacking::HotStorage::DataModel::Stack& _internal_buffers(int index) const;
  ::DynStacking::HotStorage::DataModel::Stack* _internal_add_buffers();
  public:
  const ::DynStacking::HotStorage::DataModel::Stack& buffers(int index) const;
  ::DynStacking::HotStorage::DataModel::Stack* add_buffers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::Stack >&
      buffers() const;

  // repeated .DynStacking.HotStorage.DataModel.CraneMove InvalidMoves = 8;
  int invalidmoves_size() const;
  private:
  int _internal_invalidmoves_size() const;
  public:
  void clear_invalidmoves();
  ::DynStacking::HotStorage::DataModel::CraneMove* mutable_invalidmoves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::CraneMove >*
      mutable_invalidmoves();
  private:
  const ::DynStacking::HotStorage::DataModel::CraneMove& _internal_invalidmoves(int index) const;
  ::DynStacking::HotStorage::DataModel::CraneMove* _internal_add_invalidmoves();
  public:
  const ::DynStacking::HotStorage::DataModel::CraneMove& invalidmoves(int index) const;
  ::DynStacking::HotStorage::DataModel::CraneMove* add_invalidmoves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::CraneMove >&
      invalidmoves() const;

  // .DynStacking.HotStorage.DataModel.TimeStamp Now = 1;
  bool has_now() const;
  private:
  bool _internal_has_now() const;
  public:
  void clear_now();
  const ::DynStacking::HotStorage::DataModel::TimeStamp& now() const;
  PROTOBUF_NODISCARD ::DynStacking::HotStorage::DataModel::TimeStamp* release_now();
  ::DynStacking::HotStorage::DataModel::TimeStamp* mutable_now();
  void set_allocated_now(::DynStacking::HotStorage::DataModel::TimeStamp* now);
  private:
  const ::DynStacking::HotStorage::DataModel::TimeStamp& _internal_now() const;
  ::DynStacking::HotStorage::DataModel::TimeStamp* _internal_mutable_now();
  public:
  void unsafe_arena_set_allocated_now(
      ::DynStacking::HotStorage::DataModel::TimeStamp* now);
  ::DynStacking::HotStorage::DataModel::TimeStamp* unsafe_arena_release_now();

  // .DynStacking.HotStorage.DataModel.Stack Production = 2;
  bool has_production() const;
  private:
  bool _internal_has_production() const;
  public:
  void clear_production();
  const ::DynStacking::HotStorage::DataModel::Stack& production() const;
  PROTOBUF_NODISCARD ::DynStacking::HotStorage::DataModel::Stack* release_production();
  ::DynStacking::HotStorage::DataModel::Stack* mutable_production();
  void set_allocated_production(::DynStacking::HotStorage::DataModel::Stack* production);
  private:
  const ::DynStacking::HotStorage::DataModel::Stack& _internal_production() const;
  ::DynStacking::HotStorage::DataModel::Stack* _internal_mutable_production();
  public:
  void unsafe_arena_set_allocated_production(
      ::DynStacking::HotStorage::DataModel::Stack* production);
  ::DynStacking::HotStorage::DataModel::Stack* unsafe_arena_release_production();

  // .DynStacking.HotStorage.DataModel.Handover Handover = 4;
  bool has_handover() const;
  private:
  bool _internal_has_handover() const;
  public:
  void clear_handover();
  const ::DynStacking::HotStorage::DataModel::Handover& handover() const;
  PROTOBUF_NODISCARD ::DynStacking::HotStorage::DataModel::Handover* release_handover();
  ::DynStacking::HotStorage::DataModel::Handover* mutable_handover();
  void set_allocated_handover(::DynStacking::HotStorage::DataModel::Handover* handover);
  private:
  const ::DynStacking::HotStorage::DataModel::Handover& _internal_handover() const;
  ::DynStacking::HotStorage::DataModel::Handover* _internal_mutable_handover();
  public:
  void unsafe_arena_set_allocated_handover(
      ::DynStacking::HotStorage::DataModel::Handover* handover);
  ::DynStacking::HotStorage::DataModel::Handover* unsafe_arena_release_handover();

  // .DynStacking.HotStorage.DataModel.Crane Crane = 5;
  bool has_crane() const;
  private:
  bool _internal_has_crane() const;
  public:
  void clear_crane();
  const ::DynStacking::HotStorage::DataModel::Crane& crane() const;
  PROTOBUF_NODISCARD ::DynStacking::HotStorage::DataModel::Crane* release_crane();
  ::DynStacking::HotStorage::DataModel::Crane* mutable_crane();
  void set_allocated_crane(::DynStacking::HotStorage::DataModel::Crane* crane);
  private:
  const ::DynStacking::HotStorage::DataModel::Crane& _internal_crane() const;
  ::DynStacking::HotStorage::DataModel::Crane* _internal_mutable_crane();
  public:
  void unsafe_arena_set_allocated_crane(
      ::DynStacking::HotStorage::DataModel::Crane* crane);
  ::DynStacking::HotStorage::DataModel::Crane* unsafe_arena_release_crane();

  // .DynStacking.HotStorage.DataModel.Performance KPIs = 6;
  bool has_kpis() const;
  private:
  bool _internal_has_kpis() const;
  public:
  void clear_kpis();
  const ::DynStacking::HotStorage::DataModel::Performance& kpis() const;
  PROTOBUF_NODISCARD ::DynStacking::HotStorage::DataModel::Performance* release_kpis();
  ::DynStacking::HotStorage::DataModel::Performance* mutable_kpis();
  void set_allocated_kpis(::DynStacking::HotStorage::DataModel::Performance* kpis);
  private:
  const ::DynStacking::HotStorage::DataModel::Performance& _internal_kpis() const;
  ::DynStacking::HotStorage::DataModel::Performance* _internal_mutable_kpis();
  public:
  void unsafe_arena_set_allocated_kpis(
      ::DynStacking::HotStorage::DataModel::Performance* kpis);
  ::DynStacking::HotStorage::DataModel::Performance* unsafe_arena_release_kpis();

  // .DynStacking.HotStorage.DataModel.Uncertainties ObservationData = 7;
  bool has_observationdata() const;
  private:
  bool _internal_has_observationdata() const;
  public:
  void clear_observationdata();
  const ::DynStacking::HotStorage::DataModel::Uncertainties& observationdata() const;
  PROTOBUF_NODISCARD ::DynStacking::HotStorage::DataModel::Uncertainties* release_observationdata();
  ::DynStacking::HotStorage::DataModel::Uncertainties* mutable_observationdata();
  void set_allocated_observationdata(::DynStacking::HotStorage::DataModel::Uncertainties* observationdata);
  private:
  const ::DynStacking::HotStorage::DataModel::Uncertainties& _internal_observationdata() const;
  ::DynStacking::HotStorage::DataModel::Uncertainties* _internal_mutable_observationdata();
  public:
  void unsafe_arena_set_allocated_observationdata(
      ::DynStacking::HotStorage::DataModel::Uncertainties* observationdata);
  ::DynStacking::HotStorage::DataModel::Uncertainties* unsafe_arena_release_observationdata();

  // @@protoc_insertion_point(class_scope:DynStacking.HotStorage.DataModel.World)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::Stack > buffers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::CraneMove > invalidmoves_;
    ::DynStacking::HotStorage::DataModel::TimeStamp* now_;
    ::DynStacking::HotStorage::DataModel::Stack* production_;
    ::DynStacking::HotStorage::DataModel::Handover* handover_;
    ::DynStacking::HotStorage::DataModel::Crane* crane_;
    ::DynStacking::HotStorage::DataModel::Performance* kpis_;
    ::DynStacking::HotStorage::DataModel::Uncertainties* observationdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hotstorage_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// int32 Id = 1;
inline void Block::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Block::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Block::id() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Block.Id)
  return _internal_id();
}
inline void Block::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Block::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Block.Id)
}

// .DynStacking.HotStorage.DataModel.TimeStamp Release = 2;
inline bool Block::_internal_has_release() const {
  return this != internal_default_instance() && _impl_.release_ != nullptr;
}
inline bool Block::has_release() const {
  return _internal_has_release();
}
inline void Block::clear_release() {
  if (GetArenaForAllocation() == nullptr && _impl_.release_ != nullptr) {
    delete _impl_.release_;
  }
  _impl_.release_ = nullptr;
}
inline const ::DynStacking::HotStorage::DataModel::TimeStamp& Block::_internal_release() const {
  const ::DynStacking::HotStorage::DataModel::TimeStamp* p = _impl_.release_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::HotStorage::DataModel::TimeStamp&>(
      ::DynStacking::HotStorage::DataModel::_TimeStamp_default_instance_);
}
inline const ::DynStacking::HotStorage::DataModel::TimeStamp& Block::release() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Block.Release)
  return _internal_release();
}
inline void Block::unsafe_arena_set_allocated_release(
    ::DynStacking::HotStorage::DataModel::TimeStamp* release) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.release_);
  }
  _impl_.release_ = release;
  if (release) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.HotStorage.DataModel.Block.Release)
}
inline ::DynStacking::HotStorage::DataModel::TimeStamp* Block::release_release() {
  
  ::DynStacking::HotStorage::DataModel::TimeStamp* temp = _impl_.release_;
  _impl_.release_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::TimeStamp* Block::unsafe_arena_release_release() {
  // @@protoc_insertion_point(field_release:DynStacking.HotStorage.DataModel.Block.Release)
  
  ::DynStacking::HotStorage::DataModel::TimeStamp* temp = _impl_.release_;
  _impl_.release_ = nullptr;
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::TimeStamp* Block::_internal_mutable_release() {
  
  if (_impl_.release_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::HotStorage::DataModel::TimeStamp>(GetArenaForAllocation());
    _impl_.release_ = p;
  }
  return _impl_.release_;
}
inline ::DynStacking::HotStorage::DataModel::TimeStamp* Block::mutable_release() {
  ::DynStacking::HotStorage::DataModel::TimeStamp* _msg = _internal_mutable_release();
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.Block.Release)
  return _msg;
}
inline void Block::set_allocated_release(::DynStacking::HotStorage::DataModel::TimeStamp* release) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.release_;
  }
  if (release) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(release);
    if (message_arena != submessage_arena) {
      release = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.release_ = release;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.HotStorage.DataModel.Block.Release)
}

// .DynStacking.HotStorage.DataModel.TimeStamp Due = 3;
inline bool Block::_internal_has_due() const {
  return this != internal_default_instance() && _impl_.due_ != nullptr;
}
inline bool Block::has_due() const {
  return _internal_has_due();
}
inline void Block::clear_due() {
  if (GetArenaForAllocation() == nullptr && _impl_.due_ != nullptr) {
    delete _impl_.due_;
  }
  _impl_.due_ = nullptr;
}
inline const ::DynStacking::HotStorage::DataModel::TimeStamp& Block::_internal_due() const {
  const ::DynStacking::HotStorage::DataModel::TimeStamp* p = _impl_.due_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::HotStorage::DataModel::TimeStamp&>(
      ::DynStacking::HotStorage::DataModel::_TimeStamp_default_instance_);
}
inline const ::DynStacking::HotStorage::DataModel::TimeStamp& Block::due() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Block.Due)
  return _internal_due();
}
inline void Block::unsafe_arena_set_allocated_due(
    ::DynStacking::HotStorage::DataModel::TimeStamp* due) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.due_);
  }
  _impl_.due_ = due;
  if (due) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.HotStorage.DataModel.Block.Due)
}
inline ::DynStacking::HotStorage::DataModel::TimeStamp* Block::release_due() {
  
  ::DynStacking::HotStorage::DataModel::TimeStamp* temp = _impl_.due_;
  _impl_.due_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::TimeStamp* Block::unsafe_arena_release_due() {
  // @@protoc_insertion_point(field_release:DynStacking.HotStorage.DataModel.Block.Due)
  
  ::DynStacking::HotStorage::DataModel::TimeStamp* temp = _impl_.due_;
  _impl_.due_ = nullptr;
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::TimeStamp* Block::_internal_mutable_due() {
  
  if (_impl_.due_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::HotStorage::DataModel::TimeStamp>(GetArenaForAllocation());
    _impl_.due_ = p;
  }
  return _impl_.due_;
}
inline ::DynStacking::HotStorage::DataModel::TimeStamp* Block::mutable_due() {
  ::DynStacking::HotStorage::DataModel::TimeStamp* _msg = _internal_mutable_due();
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.Block.Due)
  return _msg;
}
inline void Block::set_allocated_due(::DynStacking::HotStorage::DataModel::TimeStamp* due) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.due_;
  }
  if (due) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(due);
    if (message_arena != submessage_arena) {
      due = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, due, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.due_ = due;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.HotStorage.DataModel.Block.Due)
}

// bool Ready = 4;
inline void Block::clear_ready() {
  _impl_.ready_ = false;
}
inline bool Block::_internal_ready() const {
  return _impl_.ready_;
}
inline bool Block::ready() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Block.Ready)
  return _internal_ready();
}
inline void Block::_internal_set_ready(bool value) {
  
  _impl_.ready_ = value;
}
inline void Block::set_ready(bool value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Block.Ready)
}

// -------------------------------------------------------------------

// Crane

// int32 Id = 1;
inline void Crane::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Crane::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Crane::id() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Crane.Id)
  return _internal_id();
}
inline void Crane::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Crane::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Crane.Id)
}

// int32 LocationId = 2;
inline void Crane::clear_locationid() {
  _impl_.locationid_ = 0;
}
inline int32_t Crane::_internal_locationid() const {
  return _impl_.locationid_;
}
inline int32_t Crane::locationid() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Crane.LocationId)
  return _internal_locationid();
}
inline void Crane::_internal_set_locationid(int32_t value) {
  
  _impl_.locationid_ = value;
}
inline void Crane::set_locationid(int32_t value) {
  _internal_set_locationid(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Crane.LocationId)
}

// .DynStacking.HotStorage.DataModel.Block Load = 3;
inline bool Crane::_internal_has_load() const {
  return this != internal_default_instance() && _impl_.load_ != nullptr;
}
inline bool Crane::has_load() const {
  return _internal_has_load();
}
inline void Crane::clear_load() {
  if (GetArenaForAllocation() == nullptr && _impl_.load_ != nullptr) {
    delete _impl_.load_;
  }
  _impl_.load_ = nullptr;
}
inline const ::DynStacking::HotStorage::DataModel::Block& Crane::_internal_load() const {
  const ::DynStacking::HotStorage::DataModel::Block* p = _impl_.load_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::HotStorage::DataModel::Block&>(
      ::DynStacking::HotStorage::DataModel::_Block_default_instance_);
}
inline const ::DynStacking::HotStorage::DataModel::Block& Crane::load() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Crane.Load)
  return _internal_load();
}
inline void Crane::unsafe_arena_set_allocated_load(
    ::DynStacking::HotStorage::DataModel::Block* load) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.load_);
  }
  _impl_.load_ = load;
  if (load) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.HotStorage.DataModel.Crane.Load)
}
inline ::DynStacking::HotStorage::DataModel::Block* Crane::release_load() {
  
  ::DynStacking::HotStorage::DataModel::Block* temp = _impl_.load_;
  _impl_.load_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::Block* Crane::unsafe_arena_release_load() {
  // @@protoc_insertion_point(field_release:DynStacking.HotStorage.DataModel.Crane.Load)
  
  ::DynStacking::HotStorage::DataModel::Block* temp = _impl_.load_;
  _impl_.load_ = nullptr;
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::Block* Crane::_internal_mutable_load() {
  
  if (_impl_.load_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::HotStorage::DataModel::Block>(GetArenaForAllocation());
    _impl_.load_ = p;
  }
  return _impl_.load_;
}
inline ::DynStacking::HotStorage::DataModel::Block* Crane::mutable_load() {
  ::DynStacking::HotStorage::DataModel::Block* _msg = _internal_mutable_load();
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.Crane.Load)
  return _msg;
}
inline void Crane::set_allocated_load(::DynStacking::HotStorage::DataModel::Block* load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.load_;
  }
  if (load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(load);
    if (message_arena != submessage_arena) {
      load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.load_ = load;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.HotStorage.DataModel.Crane.Load)
}

// .DynStacking.HotStorage.DataModel.CraneSchedule Schedule = 4;
inline bool Crane::_internal_has_schedule() const {
  return this != internal_default_instance() && _impl_.schedule_ != nullptr;
}
inline bool Crane::has_schedule() const {
  return _internal_has_schedule();
}
inline void Crane::clear_schedule() {
  if (GetArenaForAllocation() == nullptr && _impl_.schedule_ != nullptr) {
    delete _impl_.schedule_;
  }
  _impl_.schedule_ = nullptr;
}
inline const ::DynStacking::HotStorage::DataModel::CraneSchedule& Crane::_internal_schedule() const {
  const ::DynStacking::HotStorage::DataModel::CraneSchedule* p = _impl_.schedule_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::HotStorage::DataModel::CraneSchedule&>(
      ::DynStacking::HotStorage::DataModel::_CraneSchedule_default_instance_);
}
inline const ::DynStacking::HotStorage::DataModel::CraneSchedule& Crane::schedule() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Crane.Schedule)
  return _internal_schedule();
}
inline void Crane::unsafe_arena_set_allocated_schedule(
    ::DynStacking::HotStorage::DataModel::CraneSchedule* schedule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schedule_);
  }
  _impl_.schedule_ = schedule;
  if (schedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.HotStorage.DataModel.Crane.Schedule)
}
inline ::DynStacking::HotStorage::DataModel::CraneSchedule* Crane::release_schedule() {
  
  ::DynStacking::HotStorage::DataModel::CraneSchedule* temp = _impl_.schedule_;
  _impl_.schedule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::CraneSchedule* Crane::unsafe_arena_release_schedule() {
  // @@protoc_insertion_point(field_release:DynStacking.HotStorage.DataModel.Crane.Schedule)
  
  ::DynStacking::HotStorage::DataModel::CraneSchedule* temp = _impl_.schedule_;
  _impl_.schedule_ = nullptr;
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::CraneSchedule* Crane::_internal_mutable_schedule() {
  
  if (_impl_.schedule_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::HotStorage::DataModel::CraneSchedule>(GetArenaForAllocation());
    _impl_.schedule_ = p;
  }
  return _impl_.schedule_;
}
inline ::DynStacking::HotStorage::DataModel::CraneSchedule* Crane::mutable_schedule() {
  ::DynStacking::HotStorage::DataModel::CraneSchedule* _msg = _internal_mutable_schedule();
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.Crane.Schedule)
  return _msg;
}
inline void Crane::set_allocated_schedule(::DynStacking::HotStorage::DataModel::CraneSchedule* schedule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.schedule_;
  }
  if (schedule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schedule);
    if (message_arena != submessage_arena) {
      schedule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schedule, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.schedule_ = schedule;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.HotStorage.DataModel.Crane.Schedule)
}

// double GirderPosition = 5;
inline void Crane::clear_girderposition() {
  _impl_.girderposition_ = 0;
}
inline double Crane::_internal_girderposition() const {
  return _impl_.girderposition_;
}
inline double Crane::girderposition() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Crane.GirderPosition)
  return _internal_girderposition();
}
inline void Crane::_internal_set_girderposition(double value) {
  
  _impl_.girderposition_ = value;
}
inline void Crane::set_girderposition(double value) {
  _internal_set_girderposition(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Crane.GirderPosition)
}

// double HoistPosition = 6;
inline void Crane::clear_hoistposition() {
  _impl_.hoistposition_ = 0;
}
inline double Crane::_internal_hoistposition() const {
  return _impl_.hoistposition_;
}
inline double Crane::hoistposition() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Crane.HoistPosition)
  return _internal_hoistposition();
}
inline void Crane::_internal_set_hoistposition(double value) {
  
  _impl_.hoistposition_ = value;
}
inline void Crane::set_hoistposition(double value) {
  _internal_set_hoistposition(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Crane.HoistPosition)
}

// -------------------------------------------------------------------

// CraneMove

// int32 BlockId = 1;
inline void CraneMove::clear_blockid() {
  _impl_.blockid_ = 0;
}
inline int32_t CraneMove::_internal_blockid() const {
  return _impl_.blockid_;
}
inline int32_t CraneMove::blockid() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.CraneMove.BlockId)
  return _internal_blockid();
}
inline void CraneMove::_internal_set_blockid(int32_t value) {
  
  _impl_.blockid_ = value;
}
inline void CraneMove::set_blockid(int32_t value) {
  _internal_set_blockid(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.CraneMove.BlockId)
}

// int32 SourceId = 2;
inline void CraneMove::clear_sourceid() {
  _impl_.sourceid_ = 0;
}
inline int32_t CraneMove::_internal_sourceid() const {
  return _impl_.sourceid_;
}
inline int32_t CraneMove::sourceid() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.CraneMove.SourceId)
  return _internal_sourceid();
}
inline void CraneMove::_internal_set_sourceid(int32_t value) {
  
  _impl_.sourceid_ = value;
}
inline void CraneMove::set_sourceid(int32_t value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.CraneMove.SourceId)
}

// int32 TargetId = 3;
inline void CraneMove::clear_targetid() {
  _impl_.targetid_ = 0;
}
inline int32_t CraneMove::_internal_targetid() const {
  return _impl_.targetid_;
}
inline int32_t CraneMove::targetid() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.CraneMove.TargetId)
  return _internal_targetid();
}
inline void CraneMove::_internal_set_targetid(int32_t value) {
  
  _impl_.targetid_ = value;
}
inline void CraneMove::set_targetid(int32_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.CraneMove.TargetId)
}

// int32 Sequence = 4;
inline void CraneMove::clear_sequence() {
  _impl_.sequence_ = 0;
}
inline int32_t CraneMove::_internal_sequence() const {
  return _impl_.sequence_;
}
inline int32_t CraneMove::sequence() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.CraneMove.Sequence)
  return _internal_sequence();
}
inline void CraneMove::_internal_set_sequence(int32_t value) {
  
  _impl_.sequence_ = value;
}
inline void CraneMove::set_sequence(int32_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.CraneMove.Sequence)
}

// bool EmptyMove = 5;
inline void CraneMove::clear_emptymove() {
  _impl_.emptymove_ = false;
}
inline bool CraneMove::_internal_emptymove() const {
  return _impl_.emptymove_;
}
inline bool CraneMove::emptymove() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.CraneMove.EmptyMove)
  return _internal_emptymove();
}
inline void CraneMove::_internal_set_emptymove(bool value) {
  
  _impl_.emptymove_ = value;
}
inline void CraneMove::set_emptymove(bool value) {
  _internal_set_emptymove(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.CraneMove.EmptyMove)
}

// -------------------------------------------------------------------

// CraneSchedule

// repeated .DynStacking.HotStorage.DataModel.CraneMove Moves = 1;
inline int CraneSchedule::_internal_moves_size() const {
  return _impl_.moves_.size();
}
inline int CraneSchedule::moves_size() const {
  return _internal_moves_size();
}
inline void CraneSchedule::clear_moves() {
  _impl_.moves_.Clear();
}
inline ::DynStacking::HotStorage::DataModel::CraneMove* CraneSchedule::mutable_moves(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.CraneSchedule.Moves)
  return _impl_.moves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::CraneMove >*
CraneSchedule::mutable_moves() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.HotStorage.DataModel.CraneSchedule.Moves)
  return &_impl_.moves_;
}
inline const ::DynStacking::HotStorage::DataModel::CraneMove& CraneSchedule::_internal_moves(int index) const {
  return _impl_.moves_.Get(index);
}
inline const ::DynStacking::HotStorage::DataModel::CraneMove& CraneSchedule::moves(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.CraneSchedule.Moves)
  return _internal_moves(index);
}
inline ::DynStacking::HotStorage::DataModel::CraneMove* CraneSchedule::_internal_add_moves() {
  return _impl_.moves_.Add();
}
inline ::DynStacking::HotStorage::DataModel::CraneMove* CraneSchedule::add_moves() {
  ::DynStacking::HotStorage::DataModel::CraneMove* _add = _internal_add_moves();
  // @@protoc_insertion_point(field_add:DynStacking.HotStorage.DataModel.CraneSchedule.Moves)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::CraneMove >&
CraneSchedule::moves() const {
  // @@protoc_insertion_point(field_list:DynStacking.HotStorage.DataModel.CraneSchedule.Moves)
  return _impl_.moves_;
}

// int32 SequenceNr = 2;
inline void CraneSchedule::clear_sequencenr() {
  _impl_.sequencenr_ = 0;
}
inline int32_t CraneSchedule::_internal_sequencenr() const {
  return _impl_.sequencenr_;
}
inline int32_t CraneSchedule::sequencenr() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.CraneSchedule.SequenceNr)
  return _internal_sequencenr();
}
inline void CraneSchedule::_internal_set_sequencenr(int32_t value) {
  
  _impl_.sequencenr_ = value;
}
inline void CraneSchedule::set_sequencenr(int32_t value) {
  _internal_set_sequencenr(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.CraneSchedule.SequenceNr)
}

// -------------------------------------------------------------------

// Handover

// int32 Id = 1;
inline void Handover::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Handover::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Handover::id() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Handover.Id)
  return _internal_id();
}
inline void Handover::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Handover::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Handover.Id)
}

// bool Ready = 2;
inline void Handover::clear_ready() {
  _impl_.ready_ = false;
}
inline bool Handover::_internal_ready() const {
  return _impl_.ready_;
}
inline bool Handover::ready() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Handover.Ready)
  return _internal_ready();
}
inline void Handover::_internal_set_ready(bool value) {
  
  _impl_.ready_ = value;
}
inline void Handover::set_ready(bool value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Handover.Ready)
}

// .DynStacking.HotStorage.DataModel.Block Block = 3;
inline bool Handover::_internal_has_block() const {
  return this != internal_default_instance() && _impl_.block_ != nullptr;
}
inline bool Handover::has_block() const {
  return _internal_has_block();
}
inline void Handover::clear_block() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_ != nullptr) {
    delete _impl_.block_;
  }
  _impl_.block_ = nullptr;
}
inline const ::DynStacking::HotStorage::DataModel::Block& Handover::_internal_block() const {
  const ::DynStacking::HotStorage::DataModel::Block* p = _impl_.block_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::HotStorage::DataModel::Block&>(
      ::DynStacking::HotStorage::DataModel::_Block_default_instance_);
}
inline const ::DynStacking::HotStorage::DataModel::Block& Handover::block() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Handover.Block)
  return _internal_block();
}
inline void Handover::unsafe_arena_set_allocated_block(
    ::DynStacking::HotStorage::DataModel::Block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_);
  }
  _impl_.block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.HotStorage.DataModel.Handover.Block)
}
inline ::DynStacking::HotStorage::DataModel::Block* Handover::release_block() {
  
  ::DynStacking::HotStorage::DataModel::Block* temp = _impl_.block_;
  _impl_.block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::Block* Handover::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:DynStacking.HotStorage.DataModel.Handover.Block)
  
  ::DynStacking::HotStorage::DataModel::Block* temp = _impl_.block_;
  _impl_.block_ = nullptr;
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::Block* Handover::_internal_mutable_block() {
  
  if (_impl_.block_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::HotStorage::DataModel::Block>(GetArenaForAllocation());
    _impl_.block_ = p;
  }
  return _impl_.block_;
}
inline ::DynStacking::HotStorage::DataModel::Block* Handover::mutable_block() {
  ::DynStacking::HotStorage::DataModel::Block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.Handover.Block)
  return _msg;
}
inline void Handover::set_allocated_block(::DynStacking::HotStorage::DataModel::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.block_ = block;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.HotStorage.DataModel.Handover.Block)
}

// -------------------------------------------------------------------

// Performance

// int32 CraneManipulations = 1;
inline void Performance::clear_cranemanipulations() {
  _impl_.cranemanipulations_ = 0;
}
inline int32_t Performance::_internal_cranemanipulations() const {
  return _impl_.cranemanipulations_;
}
inline int32_t Performance::cranemanipulations() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Performance.CraneManipulations)
  return _internal_cranemanipulations();
}
inline void Performance::_internal_set_cranemanipulations(int32_t value) {
  
  _impl_.cranemanipulations_ = value;
}
inline void Performance::set_cranemanipulations(int32_t value) {
  _internal_set_cranemanipulations(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Performance.CraneManipulations)
}

// double ServiceLevelMean = 2;
inline void Performance::clear_servicelevelmean() {
  _impl_.servicelevelmean_ = 0;
}
inline double Performance::_internal_servicelevelmean() const {
  return _impl_.servicelevelmean_;
}
inline double Performance::servicelevelmean() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Performance.ServiceLevelMean)
  return _internal_servicelevelmean();
}
inline void Performance::_internal_set_servicelevelmean(double value) {
  
  _impl_.servicelevelmean_ = value;
}
inline void Performance::set_servicelevelmean(double value) {
  _internal_set_servicelevelmean(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Performance.ServiceLevelMean)
}

// double LeadTimeMean = 3;
inline void Performance::clear_leadtimemean() {
  _impl_.leadtimemean_ = 0;
}
inline double Performance::_internal_leadtimemean() const {
  return _impl_.leadtimemean_;
}
inline double Performance::leadtimemean() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Performance.LeadTimeMean)
  return _internal_leadtimemean();
}
inline void Performance::_internal_set_leadtimemean(double value) {
  
  _impl_.leadtimemean_ = value;
}
inline void Performance::set_leadtimemean(double value) {
  _internal_set_leadtimemean(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Performance.LeadTimeMean)
}

// int32 DeliveredBlocks = 4;
inline void Performance::clear_deliveredblocks() {
  _impl_.deliveredblocks_ = 0;
}
inline int32_t Performance::_internal_deliveredblocks() const {
  return _impl_.deliveredblocks_;
}
inline int32_t Performance::deliveredblocks() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Performance.DeliveredBlocks)
  return _internal_deliveredblocks();
}
inline void Performance::_internal_set_deliveredblocks(int32_t value) {
  
  _impl_.deliveredblocks_ = value;
}
inline void Performance::set_deliveredblocks(int32_t value) {
  _internal_set_deliveredblocks(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Performance.DeliveredBlocks)
}

// int32 TotalBlocksOnTime = 5;
inline void Performance::clear_totalblocksontime() {
  _impl_.totalblocksontime_ = 0;
}
inline int32_t Performance::_internal_totalblocksontime() const {
  return _impl_.totalblocksontime_;
}
inline int32_t Performance::totalblocksontime() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Performance.TotalBlocksOnTime)
  return _internal_totalblocksontime();
}
inline void Performance::_internal_set_totalblocksontime(int32_t value) {
  
  _impl_.totalblocksontime_ = value;
}
inline void Performance::set_totalblocksontime(int32_t value) {
  _internal_set_totalblocksontime(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Performance.TotalBlocksOnTime)
}

// double BlockedArrivalTime = 6;
inline void Performance::clear_blockedarrivaltime() {
  _impl_.blockedarrivaltime_ = 0;
}
inline double Performance::_internal_blockedarrivaltime() const {
  return _impl_.blockedarrivaltime_;
}
inline double Performance::blockedarrivaltime() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Performance.BlockedArrivalTime)
  return _internal_blockedarrivaltime();
}
inline void Performance::_internal_set_blockedarrivaltime(double value) {
  
  _impl_.blockedarrivaltime_ = value;
}
inline void Performance::set_blockedarrivaltime(double value) {
  _internal_set_blockedarrivaltime(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Performance.BlockedArrivalTime)
}

// double TardinessMean = 7;
inline void Performance::clear_tardinessmean() {
  _impl_.tardinessmean_ = 0;
}
inline double Performance::_internal_tardinessmean() const {
  return _impl_.tardinessmean_;
}
inline double Performance::tardinessmean() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Performance.TardinessMean)
  return _internal_tardinessmean();
}
inline void Performance::_internal_set_tardinessmean(double value) {
  
  _impl_.tardinessmean_ = value;
}
inline void Performance::set_tardinessmean(double value) {
  _internal_set_tardinessmean(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Performance.TardinessMean)
}

// double BufferUtilizationMean = 8;
inline void Performance::clear_bufferutilizationmean() {
  _impl_.bufferutilizationmean_ = 0;
}
inline double Performance::_internal_bufferutilizationmean() const {
  return _impl_.bufferutilizationmean_;
}
inline double Performance::bufferutilizationmean() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Performance.BufferUtilizationMean)
  return _internal_bufferutilizationmean();
}
inline void Performance::_internal_set_bufferutilizationmean(double value) {
  
  _impl_.bufferutilizationmean_ = value;
}
inline void Performance::set_bufferutilizationmean(double value) {
  _internal_set_bufferutilizationmean(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Performance.BufferUtilizationMean)
}

// double CraneUtilizationMean = 9;
inline void Performance::clear_craneutilizationmean() {
  _impl_.craneutilizationmean_ = 0;
}
inline double Performance::_internal_craneutilizationmean() const {
  return _impl_.craneutilizationmean_;
}
inline double Performance::craneutilizationmean() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Performance.CraneUtilizationMean)
  return _internal_craneutilizationmean();
}
inline void Performance::_internal_set_craneutilizationmean(double value) {
  
  _impl_.craneutilizationmean_ = value;
}
inline void Performance::set_craneutilizationmean(double value) {
  _internal_set_craneutilizationmean(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Performance.CraneUtilizationMean)
}

// double HandoverUtilizationMean = 10;
inline void Performance::clear_handoverutilizationmean() {
  _impl_.handoverutilizationmean_ = 0;
}
inline double Performance::_internal_handoverutilizationmean() const {
  return _impl_.handoverutilizationmean_;
}
inline double Performance::handoverutilizationmean() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Performance.HandoverUtilizationMean)
  return _internal_handoverutilizationmean();
}
inline void Performance::_internal_set_handoverutilizationmean(double value) {
  
  _impl_.handoverutilizationmean_ = value;
}
inline void Performance::set_handoverutilizationmean(double value) {
  _internal_set_handoverutilizationmean(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Performance.HandoverUtilizationMean)
}

// double UpstreamUtilizationMean = 11;
inline void Performance::clear_upstreamutilizationmean() {
  _impl_.upstreamutilizationmean_ = 0;
}
inline double Performance::_internal_upstreamutilizationmean() const {
  return _impl_.upstreamutilizationmean_;
}
inline double Performance::upstreamutilizationmean() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Performance.UpstreamUtilizationMean)
  return _internal_upstreamutilizationmean();
}
inline void Performance::_internal_set_upstreamutilizationmean(double value) {
  
  _impl_.upstreamutilizationmean_ = value;
}
inline void Performance::set_upstreamutilizationmean(double value) {
  _internal_set_upstreamutilizationmean(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Performance.UpstreamUtilizationMean)
}

// -------------------------------------------------------------------

// Stack

// int32 Id = 1;
inline void Stack::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Stack::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Stack::id() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Stack.Id)
  return _internal_id();
}
inline void Stack::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Stack::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Stack.Id)
}

// int32 MaxHeight = 2;
inline void Stack::clear_maxheight() {
  _impl_.maxheight_ = 0;
}
inline int32_t Stack::_internal_maxheight() const {
  return _impl_.maxheight_;
}
inline int32_t Stack::maxheight() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Stack.MaxHeight)
  return _internal_maxheight();
}
inline void Stack::_internal_set_maxheight(int32_t value) {
  
  _impl_.maxheight_ = value;
}
inline void Stack::set_maxheight(int32_t value) {
  _internal_set_maxheight(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Stack.MaxHeight)
}

// repeated .DynStacking.HotStorage.DataModel.Block BottomToTop = 3;
inline int Stack::_internal_bottomtotop_size() const {
  return _impl_.bottomtotop_.size();
}
inline int Stack::bottomtotop_size() const {
  return _internal_bottomtotop_size();
}
inline void Stack::clear_bottomtotop() {
  _impl_.bottomtotop_.Clear();
}
inline ::DynStacking::HotStorage::DataModel::Block* Stack::mutable_bottomtotop(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.Stack.BottomToTop)
  return _impl_.bottomtotop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::Block >*
Stack::mutable_bottomtotop() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.HotStorage.DataModel.Stack.BottomToTop)
  return &_impl_.bottomtotop_;
}
inline const ::DynStacking::HotStorage::DataModel::Block& Stack::_internal_bottomtotop(int index) const {
  return _impl_.bottomtotop_.Get(index);
}
inline const ::DynStacking::HotStorage::DataModel::Block& Stack::bottomtotop(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Stack.BottomToTop)
  return _internal_bottomtotop(index);
}
inline ::DynStacking::HotStorage::DataModel::Block* Stack::_internal_add_bottomtotop() {
  return _impl_.bottomtotop_.Add();
}
inline ::DynStacking::HotStorage::DataModel::Block* Stack::add_bottomtotop() {
  ::DynStacking::HotStorage::DataModel::Block* _add = _internal_add_bottomtotop();
  // @@protoc_insertion_point(field_add:DynStacking.HotStorage.DataModel.Stack.BottomToTop)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::Block >&
Stack::bottomtotop() const {
  // @@protoc_insertion_point(field_list:DynStacking.HotStorage.DataModel.Stack.BottomToTop)
  return _impl_.bottomtotop_;
}

// -------------------------------------------------------------------

// TimeStamp

// int64 MilliSeconds = 1;
inline void TimeStamp::clear_milliseconds() {
  _impl_.milliseconds_ = int64_t{0};
}
inline int64_t TimeStamp::_internal_milliseconds() const {
  return _impl_.milliseconds_;
}
inline int64_t TimeStamp::milliseconds() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.TimeStamp.MilliSeconds)
  return _internal_milliseconds();
}
inline void TimeStamp::_internal_set_milliseconds(int64_t value) {
  
  _impl_.milliseconds_ = value;
}
inline void TimeStamp::set_milliseconds(int64_t value) {
  _internal_set_milliseconds(value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.TimeStamp.MilliSeconds)
}

// -------------------------------------------------------------------

// Uncertainties

// repeated double ArrivalIntervals = 1 [packed = false];
inline int Uncertainties::_internal_arrivalintervals_size() const {
  return _impl_.arrivalintervals_.size();
}
inline int Uncertainties::arrivalintervals_size() const {
  return _internal_arrivalintervals_size();
}
inline void Uncertainties::clear_arrivalintervals() {
  _impl_.arrivalintervals_.Clear();
}
inline double Uncertainties::_internal_arrivalintervals(int index) const {
  return _impl_.arrivalintervals_.Get(index);
}
inline double Uncertainties::arrivalintervals(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Uncertainties.ArrivalIntervals)
  return _internal_arrivalintervals(index);
}
inline void Uncertainties::set_arrivalintervals(int index, double value) {
  _impl_.arrivalintervals_.Set(index, value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Uncertainties.ArrivalIntervals)
}
inline void Uncertainties::_internal_add_arrivalintervals(double value) {
  _impl_.arrivalintervals_.Add(value);
}
inline void Uncertainties::add_arrivalintervals(double value) {
  _internal_add_arrivalintervals(value);
  // @@protoc_insertion_point(field_add:DynStacking.HotStorage.DataModel.Uncertainties.ArrivalIntervals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Uncertainties::_internal_arrivalintervals() const {
  return _impl_.arrivalintervals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Uncertainties::arrivalintervals() const {
  // @@protoc_insertion_point(field_list:DynStacking.HotStorage.DataModel.Uncertainties.ArrivalIntervals)
  return _internal_arrivalintervals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Uncertainties::_internal_mutable_arrivalintervals() {
  return &_impl_.arrivalintervals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Uncertainties::mutable_arrivalintervals() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.HotStorage.DataModel.Uncertainties.ArrivalIntervals)
  return _internal_mutable_arrivalintervals();
}

// repeated double CraneMoveTimes = 2 [packed = false];
inline int Uncertainties::_internal_cranemovetimes_size() const {
  return _impl_.cranemovetimes_.size();
}
inline int Uncertainties::cranemovetimes_size() const {
  return _internal_cranemovetimes_size();
}
inline void Uncertainties::clear_cranemovetimes() {
  _impl_.cranemovetimes_.Clear();
}
inline double Uncertainties::_internal_cranemovetimes(int index) const {
  return _impl_.cranemovetimes_.Get(index);
}
inline double Uncertainties::cranemovetimes(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Uncertainties.CraneMoveTimes)
  return _internal_cranemovetimes(index);
}
inline void Uncertainties::set_cranemovetimes(int index, double value) {
  _impl_.cranemovetimes_.Set(index, value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Uncertainties.CraneMoveTimes)
}
inline void Uncertainties::_internal_add_cranemovetimes(double value) {
  _impl_.cranemovetimes_.Add(value);
}
inline void Uncertainties::add_cranemovetimes(double value) {
  _internal_add_cranemovetimes(value);
  // @@protoc_insertion_point(field_add:DynStacking.HotStorage.DataModel.Uncertainties.CraneMoveTimes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Uncertainties::_internal_cranemovetimes() const {
  return _impl_.cranemovetimes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Uncertainties::cranemovetimes() const {
  // @@protoc_insertion_point(field_list:DynStacking.HotStorage.DataModel.Uncertainties.CraneMoveTimes)
  return _internal_cranemovetimes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Uncertainties::_internal_mutable_cranemovetimes() {
  return &_impl_.cranemovetimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Uncertainties::mutable_cranemovetimes() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.HotStorage.DataModel.Uncertainties.CraneMoveTimes)
  return _internal_mutable_cranemovetimes();
}

// repeated double HandoverReadyIntervals = 3 [packed = false];
inline int Uncertainties::_internal_handoverreadyintervals_size() const {
  return _impl_.handoverreadyintervals_.size();
}
inline int Uncertainties::handoverreadyintervals_size() const {
  return _internal_handoverreadyintervals_size();
}
inline void Uncertainties::clear_handoverreadyintervals() {
  _impl_.handoverreadyintervals_.Clear();
}
inline double Uncertainties::_internal_handoverreadyintervals(int index) const {
  return _impl_.handoverreadyintervals_.Get(index);
}
inline double Uncertainties::handoverreadyintervals(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.Uncertainties.HandoverReadyIntervals)
  return _internal_handoverreadyintervals(index);
}
inline void Uncertainties::set_handoverreadyintervals(int index, double value) {
  _impl_.handoverreadyintervals_.Set(index, value);
  // @@protoc_insertion_point(field_set:DynStacking.HotStorage.DataModel.Uncertainties.HandoverReadyIntervals)
}
inline void Uncertainties::_internal_add_handoverreadyintervals(double value) {
  _impl_.handoverreadyintervals_.Add(value);
}
inline void Uncertainties::add_handoverreadyintervals(double value) {
  _internal_add_handoverreadyintervals(value);
  // @@protoc_insertion_point(field_add:DynStacking.HotStorage.DataModel.Uncertainties.HandoverReadyIntervals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Uncertainties::_internal_handoverreadyintervals() const {
  return _impl_.handoverreadyintervals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Uncertainties::handoverreadyintervals() const {
  // @@protoc_insertion_point(field_list:DynStacking.HotStorage.DataModel.Uncertainties.HandoverReadyIntervals)
  return _internal_handoverreadyintervals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Uncertainties::_internal_mutable_handoverreadyintervals() {
  return &_impl_.handoverreadyintervals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Uncertainties::mutable_handoverreadyintervals() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.HotStorage.DataModel.Uncertainties.HandoverReadyIntervals)
  return _internal_mutable_handoverreadyintervals();
}

// -------------------------------------------------------------------

// World

// .DynStacking.HotStorage.DataModel.TimeStamp Now = 1;
inline bool World::_internal_has_now() const {
  return this != internal_default_instance() && _impl_.now_ != nullptr;
}
inline bool World::has_now() const {
  return _internal_has_now();
}
inline void World::clear_now() {
  if (GetArenaForAllocation() == nullptr && _impl_.now_ != nullptr) {
    delete _impl_.now_;
  }
  _impl_.now_ = nullptr;
}
inline const ::DynStacking::HotStorage::DataModel::TimeStamp& World::_internal_now() const {
  const ::DynStacking::HotStorage::DataModel::TimeStamp* p = _impl_.now_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::HotStorage::DataModel::TimeStamp&>(
      ::DynStacking::HotStorage::DataModel::_TimeStamp_default_instance_);
}
inline const ::DynStacking::HotStorage::DataModel::TimeStamp& World::now() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.World.Now)
  return _internal_now();
}
inline void World::unsafe_arena_set_allocated_now(
    ::DynStacking::HotStorage::DataModel::TimeStamp* now) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.now_);
  }
  _impl_.now_ = now;
  if (now) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.HotStorage.DataModel.World.Now)
}
inline ::DynStacking::HotStorage::DataModel::TimeStamp* World::release_now() {
  
  ::DynStacking::HotStorage::DataModel::TimeStamp* temp = _impl_.now_;
  _impl_.now_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::TimeStamp* World::unsafe_arena_release_now() {
  // @@protoc_insertion_point(field_release:DynStacking.HotStorage.DataModel.World.Now)
  
  ::DynStacking::HotStorage::DataModel::TimeStamp* temp = _impl_.now_;
  _impl_.now_ = nullptr;
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::TimeStamp* World::_internal_mutable_now() {
  
  if (_impl_.now_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::HotStorage::DataModel::TimeStamp>(GetArenaForAllocation());
    _impl_.now_ = p;
  }
  return _impl_.now_;
}
inline ::DynStacking::HotStorage::DataModel::TimeStamp* World::mutable_now() {
  ::DynStacking::HotStorage::DataModel::TimeStamp* _msg = _internal_mutable_now();
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.World.Now)
  return _msg;
}
inline void World::set_allocated_now(::DynStacking::HotStorage::DataModel::TimeStamp* now) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.now_;
  }
  if (now) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(now);
    if (message_arena != submessage_arena) {
      now = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, now, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.now_ = now;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.HotStorage.DataModel.World.Now)
}

// .DynStacking.HotStorage.DataModel.Stack Production = 2;
inline bool World::_internal_has_production() const {
  return this != internal_default_instance() && _impl_.production_ != nullptr;
}
inline bool World::has_production() const {
  return _internal_has_production();
}
inline void World::clear_production() {
  if (GetArenaForAllocation() == nullptr && _impl_.production_ != nullptr) {
    delete _impl_.production_;
  }
  _impl_.production_ = nullptr;
}
inline const ::DynStacking::HotStorage::DataModel::Stack& World::_internal_production() const {
  const ::DynStacking::HotStorage::DataModel::Stack* p = _impl_.production_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::HotStorage::DataModel::Stack&>(
      ::DynStacking::HotStorage::DataModel::_Stack_default_instance_);
}
inline const ::DynStacking::HotStorage::DataModel::Stack& World::production() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.World.Production)
  return _internal_production();
}
inline void World::unsafe_arena_set_allocated_production(
    ::DynStacking::HotStorage::DataModel::Stack* production) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.production_);
  }
  _impl_.production_ = production;
  if (production) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.HotStorage.DataModel.World.Production)
}
inline ::DynStacking::HotStorage::DataModel::Stack* World::release_production() {
  
  ::DynStacking::HotStorage::DataModel::Stack* temp = _impl_.production_;
  _impl_.production_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::Stack* World::unsafe_arena_release_production() {
  // @@protoc_insertion_point(field_release:DynStacking.HotStorage.DataModel.World.Production)
  
  ::DynStacking::HotStorage::DataModel::Stack* temp = _impl_.production_;
  _impl_.production_ = nullptr;
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::Stack* World::_internal_mutable_production() {
  
  if (_impl_.production_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::HotStorage::DataModel::Stack>(GetArenaForAllocation());
    _impl_.production_ = p;
  }
  return _impl_.production_;
}
inline ::DynStacking::HotStorage::DataModel::Stack* World::mutable_production() {
  ::DynStacking::HotStorage::DataModel::Stack* _msg = _internal_mutable_production();
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.World.Production)
  return _msg;
}
inline void World::set_allocated_production(::DynStacking::HotStorage::DataModel::Stack* production) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.production_;
  }
  if (production) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(production);
    if (message_arena != submessage_arena) {
      production = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, production, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.production_ = production;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.HotStorage.DataModel.World.Production)
}

// repeated .DynStacking.HotStorage.DataModel.Stack Buffers = 3;
inline int World::_internal_buffers_size() const {
  return _impl_.buffers_.size();
}
inline int World::buffers_size() const {
  return _internal_buffers_size();
}
inline void World::clear_buffers() {
  _impl_.buffers_.Clear();
}
inline ::DynStacking::HotStorage::DataModel::Stack* World::mutable_buffers(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.World.Buffers)
  return _impl_.buffers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::Stack >*
World::mutable_buffers() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.HotStorage.DataModel.World.Buffers)
  return &_impl_.buffers_;
}
inline const ::DynStacking::HotStorage::DataModel::Stack& World::_internal_buffers(int index) const {
  return _impl_.buffers_.Get(index);
}
inline const ::DynStacking::HotStorage::DataModel::Stack& World::buffers(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.World.Buffers)
  return _internal_buffers(index);
}
inline ::DynStacking::HotStorage::DataModel::Stack* World::_internal_add_buffers() {
  return _impl_.buffers_.Add();
}
inline ::DynStacking::HotStorage::DataModel::Stack* World::add_buffers() {
  ::DynStacking::HotStorage::DataModel::Stack* _add = _internal_add_buffers();
  // @@protoc_insertion_point(field_add:DynStacking.HotStorage.DataModel.World.Buffers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::Stack >&
World::buffers() const {
  // @@protoc_insertion_point(field_list:DynStacking.HotStorage.DataModel.World.Buffers)
  return _impl_.buffers_;
}

// .DynStacking.HotStorage.DataModel.Handover Handover = 4;
inline bool World::_internal_has_handover() const {
  return this != internal_default_instance() && _impl_.handover_ != nullptr;
}
inline bool World::has_handover() const {
  return _internal_has_handover();
}
inline void World::clear_handover() {
  if (GetArenaForAllocation() == nullptr && _impl_.handover_ != nullptr) {
    delete _impl_.handover_;
  }
  _impl_.handover_ = nullptr;
}
inline const ::DynStacking::HotStorage::DataModel::Handover& World::_internal_handover() const {
  const ::DynStacking::HotStorage::DataModel::Handover* p = _impl_.handover_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::HotStorage::DataModel::Handover&>(
      ::DynStacking::HotStorage::DataModel::_Handover_default_instance_);
}
inline const ::DynStacking::HotStorage::DataModel::Handover& World::handover() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.World.Handover)
  return _internal_handover();
}
inline void World::unsafe_arena_set_allocated_handover(
    ::DynStacking::HotStorage::DataModel::Handover* handover) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handover_);
  }
  _impl_.handover_ = handover;
  if (handover) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.HotStorage.DataModel.World.Handover)
}
inline ::DynStacking::HotStorage::DataModel::Handover* World::release_handover() {
  
  ::DynStacking::HotStorage::DataModel::Handover* temp = _impl_.handover_;
  _impl_.handover_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::Handover* World::unsafe_arena_release_handover() {
  // @@protoc_insertion_point(field_release:DynStacking.HotStorage.DataModel.World.Handover)
  
  ::DynStacking::HotStorage::DataModel::Handover* temp = _impl_.handover_;
  _impl_.handover_ = nullptr;
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::Handover* World::_internal_mutable_handover() {
  
  if (_impl_.handover_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::HotStorage::DataModel::Handover>(GetArenaForAllocation());
    _impl_.handover_ = p;
  }
  return _impl_.handover_;
}
inline ::DynStacking::HotStorage::DataModel::Handover* World::mutable_handover() {
  ::DynStacking::HotStorage::DataModel::Handover* _msg = _internal_mutable_handover();
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.World.Handover)
  return _msg;
}
inline void World::set_allocated_handover(::DynStacking::HotStorage::DataModel::Handover* handover) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.handover_;
  }
  if (handover) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(handover);
    if (message_arena != submessage_arena) {
      handover = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handover, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.handover_ = handover;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.HotStorage.DataModel.World.Handover)
}

// .DynStacking.HotStorage.DataModel.Crane Crane = 5;
inline bool World::_internal_has_crane() const {
  return this != internal_default_instance() && _impl_.crane_ != nullptr;
}
inline bool World::has_crane() const {
  return _internal_has_crane();
}
inline void World::clear_crane() {
  if (GetArenaForAllocation() == nullptr && _impl_.crane_ != nullptr) {
    delete _impl_.crane_;
  }
  _impl_.crane_ = nullptr;
}
inline const ::DynStacking::HotStorage::DataModel::Crane& World::_internal_crane() const {
  const ::DynStacking::HotStorage::DataModel::Crane* p = _impl_.crane_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::HotStorage::DataModel::Crane&>(
      ::DynStacking::HotStorage::DataModel::_Crane_default_instance_);
}
inline const ::DynStacking::HotStorage::DataModel::Crane& World::crane() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.World.Crane)
  return _internal_crane();
}
inline void World::unsafe_arena_set_allocated_crane(
    ::DynStacking::HotStorage::DataModel::Crane* crane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.crane_);
  }
  _impl_.crane_ = crane;
  if (crane) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.HotStorage.DataModel.World.Crane)
}
inline ::DynStacking::HotStorage::DataModel::Crane* World::release_crane() {
  
  ::DynStacking::HotStorage::DataModel::Crane* temp = _impl_.crane_;
  _impl_.crane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::Crane* World::unsafe_arena_release_crane() {
  // @@protoc_insertion_point(field_release:DynStacking.HotStorage.DataModel.World.Crane)
  
  ::DynStacking::HotStorage::DataModel::Crane* temp = _impl_.crane_;
  _impl_.crane_ = nullptr;
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::Crane* World::_internal_mutable_crane() {
  
  if (_impl_.crane_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::HotStorage::DataModel::Crane>(GetArenaForAllocation());
    _impl_.crane_ = p;
  }
  return _impl_.crane_;
}
inline ::DynStacking::HotStorage::DataModel::Crane* World::mutable_crane() {
  ::DynStacking::HotStorage::DataModel::Crane* _msg = _internal_mutable_crane();
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.World.Crane)
  return _msg;
}
inline void World::set_allocated_crane(::DynStacking::HotStorage::DataModel::Crane* crane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.crane_;
  }
  if (crane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(crane);
    if (message_arena != submessage_arena) {
      crane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crane, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.crane_ = crane;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.HotStorage.DataModel.World.Crane)
}

// .DynStacking.HotStorage.DataModel.Performance KPIs = 6;
inline bool World::_internal_has_kpis() const {
  return this != internal_default_instance() && _impl_.kpis_ != nullptr;
}
inline bool World::has_kpis() const {
  return _internal_has_kpis();
}
inline void World::clear_kpis() {
  if (GetArenaForAllocation() == nullptr && _impl_.kpis_ != nullptr) {
    delete _impl_.kpis_;
  }
  _impl_.kpis_ = nullptr;
}
inline const ::DynStacking::HotStorage::DataModel::Performance& World::_internal_kpis() const {
  const ::DynStacking::HotStorage::DataModel::Performance* p = _impl_.kpis_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::HotStorage::DataModel::Performance&>(
      ::DynStacking::HotStorage::DataModel::_Performance_default_instance_);
}
inline const ::DynStacking::HotStorage::DataModel::Performance& World::kpis() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.World.KPIs)
  return _internal_kpis();
}
inline void World::unsafe_arena_set_allocated_kpis(
    ::DynStacking::HotStorage::DataModel::Performance* kpis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kpis_);
  }
  _impl_.kpis_ = kpis;
  if (kpis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.HotStorage.DataModel.World.KPIs)
}
inline ::DynStacking::HotStorage::DataModel::Performance* World::release_kpis() {
  
  ::DynStacking::HotStorage::DataModel::Performance* temp = _impl_.kpis_;
  _impl_.kpis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::Performance* World::unsafe_arena_release_kpis() {
  // @@protoc_insertion_point(field_release:DynStacking.HotStorage.DataModel.World.KPIs)
  
  ::DynStacking::HotStorage::DataModel::Performance* temp = _impl_.kpis_;
  _impl_.kpis_ = nullptr;
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::Performance* World::_internal_mutable_kpis() {
  
  if (_impl_.kpis_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::HotStorage::DataModel::Performance>(GetArenaForAllocation());
    _impl_.kpis_ = p;
  }
  return _impl_.kpis_;
}
inline ::DynStacking::HotStorage::DataModel::Performance* World::mutable_kpis() {
  ::DynStacking::HotStorage::DataModel::Performance* _msg = _internal_mutable_kpis();
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.World.KPIs)
  return _msg;
}
inline void World::set_allocated_kpis(::DynStacking::HotStorage::DataModel::Performance* kpis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kpis_;
  }
  if (kpis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kpis);
    if (message_arena != submessage_arena) {
      kpis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kpis, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kpis_ = kpis;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.HotStorage.DataModel.World.KPIs)
}

// .DynStacking.HotStorage.DataModel.Uncertainties ObservationData = 7;
inline bool World::_internal_has_observationdata() const {
  return this != internal_default_instance() && _impl_.observationdata_ != nullptr;
}
inline bool World::has_observationdata() const {
  return _internal_has_observationdata();
}
inline void World::clear_observationdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.observationdata_ != nullptr) {
    delete _impl_.observationdata_;
  }
  _impl_.observationdata_ = nullptr;
}
inline const ::DynStacking::HotStorage::DataModel::Uncertainties& World::_internal_observationdata() const {
  const ::DynStacking::HotStorage::DataModel::Uncertainties* p = _impl_.observationdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::HotStorage::DataModel::Uncertainties&>(
      ::DynStacking::HotStorage::DataModel::_Uncertainties_default_instance_);
}
inline const ::DynStacking::HotStorage::DataModel::Uncertainties& World::observationdata() const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.World.ObservationData)
  return _internal_observationdata();
}
inline void World::unsafe_arena_set_allocated_observationdata(
    ::DynStacking::HotStorage::DataModel::Uncertainties* observationdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observationdata_);
  }
  _impl_.observationdata_ = observationdata;
  if (observationdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.HotStorage.DataModel.World.ObservationData)
}
inline ::DynStacking::HotStorage::DataModel::Uncertainties* World::release_observationdata() {
  
  ::DynStacking::HotStorage::DataModel::Uncertainties* temp = _impl_.observationdata_;
  _impl_.observationdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::Uncertainties* World::unsafe_arena_release_observationdata() {
  // @@protoc_insertion_point(field_release:DynStacking.HotStorage.DataModel.World.ObservationData)
  
  ::DynStacking::HotStorage::DataModel::Uncertainties* temp = _impl_.observationdata_;
  _impl_.observationdata_ = nullptr;
  return temp;
}
inline ::DynStacking::HotStorage::DataModel::Uncertainties* World::_internal_mutable_observationdata() {
  
  if (_impl_.observationdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::HotStorage::DataModel::Uncertainties>(GetArenaForAllocation());
    _impl_.observationdata_ = p;
  }
  return _impl_.observationdata_;
}
inline ::DynStacking::HotStorage::DataModel::Uncertainties* World::mutable_observationdata() {
  ::DynStacking::HotStorage::DataModel::Uncertainties* _msg = _internal_mutable_observationdata();
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.World.ObservationData)
  return _msg;
}
inline void World::set_allocated_observationdata(::DynStacking::HotStorage::DataModel::Uncertainties* observationdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.observationdata_;
  }
  if (observationdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(observationdata);
    if (message_arena != submessage_arena) {
      observationdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observationdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.observationdata_ = observationdata;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.HotStorage.DataModel.World.ObservationData)
}

// repeated .DynStacking.HotStorage.DataModel.CraneMove InvalidMoves = 8;
inline int World::_internal_invalidmoves_size() const {
  return _impl_.invalidmoves_.size();
}
inline int World::invalidmoves_size() const {
  return _internal_invalidmoves_size();
}
inline void World::clear_invalidmoves() {
  _impl_.invalidmoves_.Clear();
}
inline ::DynStacking::HotStorage::DataModel::CraneMove* World::mutable_invalidmoves(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.HotStorage.DataModel.World.InvalidMoves)
  return _impl_.invalidmoves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::CraneMove >*
World::mutable_invalidmoves() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.HotStorage.DataModel.World.InvalidMoves)
  return &_impl_.invalidmoves_;
}
inline const ::DynStacking::HotStorage::DataModel::CraneMove& World::_internal_invalidmoves(int index) const {
  return _impl_.invalidmoves_.Get(index);
}
inline const ::DynStacking::HotStorage::DataModel::CraneMove& World::invalidmoves(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.HotStorage.DataModel.World.InvalidMoves)
  return _internal_invalidmoves(index);
}
inline ::DynStacking::HotStorage::DataModel::CraneMove* World::_internal_add_invalidmoves() {
  return _impl_.invalidmoves_.Add();
}
inline ::DynStacking::HotStorage::DataModel::CraneMove* World::add_invalidmoves() {
  ::DynStacking::HotStorage::DataModel::CraneMove* _add = _internal_add_invalidmoves();
  // @@protoc_insertion_point(field_add:DynStacking.HotStorage.DataModel.World.InvalidMoves)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::HotStorage::DataModel::CraneMove >&
World::invalidmoves() const {
  // @@protoc_insertion_point(field_list:DynStacking.HotStorage.DataModel.World.InvalidMoves)
  return _impl_.invalidmoves_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataModel
}  // namespace HotStorage
}  // namespace DynStacking

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hotstorage_5fmodel_2eproto
