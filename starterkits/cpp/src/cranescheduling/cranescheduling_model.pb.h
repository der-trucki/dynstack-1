// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cranescheduling_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cranescheduling_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cranescheduling_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cranescheduling_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cranescheduling_5fmodel_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cranescheduling_5fmodel_2eproto;
namespace DynStacking {
namespace CraneScheduling {
namespace DataModel {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Crane;
struct CraneDefaultTypeInternal;
extern CraneDefaultTypeInternal _Crane_default_instance_;
class CraneMove;
struct CraneMoveDefaultTypeInternal;
extern CraneMoveDefaultTypeInternal _CraneMove_default_instance_;
class CraneSchedule;
struct CraneScheduleDefaultTypeInternal;
extern CraneScheduleDefaultTypeInternal _CraneSchedule_default_instance_;
class CraneScheduleActivity;
struct CraneScheduleActivityDefaultTypeInternal;
extern CraneScheduleActivityDefaultTypeInternal _CraneScheduleActivity_default_instance_;
class CraneSchedulingSolution;
struct CraneSchedulingSolutionDefaultTypeInternal;
extern CraneSchedulingSolutionDefaultTypeInternal _CraneSchedulingSolution_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class MoveRequest;
struct MoveRequestDefaultTypeInternal;
extern MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
class Performance;
struct PerformanceDefaultTypeInternal;
extern PerformanceDefaultTypeInternal _Performance_default_instance_;
class Stack;
struct StackDefaultTypeInternal;
extern StackDefaultTypeInternal _Stack_default_instance_;
class TimeStamp;
struct TimeStampDefaultTypeInternal;
extern TimeStampDefaultTypeInternal _TimeStamp_default_instance_;
class World;
struct WorldDefaultTypeInternal;
extern WorldDefaultTypeInternal _World_default_instance_;
}  // namespace DataModel
}  // namespace CraneScheduling
}  // namespace DynStacking
PROTOBUF_NAMESPACE_OPEN
template<> ::DynStacking::CraneScheduling::DataModel::Block* Arena::CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::Block>(Arena*);
template<> ::DynStacking::CraneScheduling::DataModel::Crane* Arena::CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::Crane>(Arena*);
template<> ::DynStacking::CraneScheduling::DataModel::CraneMove* Arena::CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::CraneMove>(Arena*);
template<> ::DynStacking::CraneScheduling::DataModel::CraneSchedule* Arena::CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::CraneSchedule>(Arena*);
template<> ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity* Arena::CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity>(Arena*);
template<> ::DynStacking::CraneScheduling::DataModel::CraneSchedulingSolution* Arena::CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::CraneSchedulingSolution>(Arena*);
template<> ::DynStacking::CraneScheduling::DataModel::Location* Arena::CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::Location>(Arena*);
template<> ::DynStacking::CraneScheduling::DataModel::MoveRequest* Arena::CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::MoveRequest>(Arena*);
template<> ::DynStacking::CraneScheduling::DataModel::Performance* Arena::CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::Performance>(Arena*);
template<> ::DynStacking::CraneScheduling::DataModel::Stack* Arena::CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::Stack>(Arena*);
template<> ::DynStacking::CraneScheduling::DataModel::TimeStamp* Arena::CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::TimeStamp>(Arena*);
template<> ::DynStacking::CraneScheduling::DataModel::World* Arena::CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::World>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DynStacking {
namespace CraneScheduling {
namespace DataModel {

enum CraneScheduleActivityState : int {
  Created = 0,
  Activatable = 1,
  Active = 2,
  CraneScheduleActivityState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CraneScheduleActivityState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CraneScheduleActivityState_IsValid(int value);
constexpr CraneScheduleActivityState CraneScheduleActivityState_MIN = Created;
constexpr CraneScheduleActivityState CraneScheduleActivityState_MAX = Active;
constexpr int CraneScheduleActivityState_ARRAYSIZE = CraneScheduleActivityState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CraneScheduleActivityState_descriptor();
template<typename T>
inline const std::string& CraneScheduleActivityState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CraneScheduleActivityState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CraneScheduleActivityState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CraneScheduleActivityState_descriptor(), enum_t_value);
}
inline bool CraneScheduleActivityState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CraneScheduleActivityState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CraneScheduleActivityState>(
    CraneScheduleActivityState_descriptor(), name, value);
}
enum MoveType : int {
  MoveToPickup = 0,
  PickupAndDropoff = 1,
  MoveType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MoveType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MoveType_IsValid(int value);
constexpr MoveType MoveType_MIN = MoveToPickup;
constexpr MoveType MoveType_MAX = PickupAndDropoff;
constexpr int MoveType_ARRAYSIZE = MoveType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveType_descriptor();
template<typename T>
inline const std::string& MoveType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MoveType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MoveType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MoveType_descriptor(), enum_t_value);
}
inline bool MoveType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MoveType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MoveType>(
    MoveType_descriptor(), name, value);
}
enum StackTypes : int {
  ArrivalStack = 0,
  Buffer = 1,
  HandoverStack = 2,
  StackTypes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StackTypes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StackTypes_IsValid(int value);
constexpr StackTypes StackTypes_MIN = ArrivalStack;
constexpr StackTypes StackTypes_MAX = HandoverStack;
constexpr int StackTypes_ARRAYSIZE = StackTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StackTypes_descriptor();
template<typename T>
inline const std::string& StackTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StackTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StackTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StackTypes_descriptor(), enum_t_value);
}
inline bool StackTypes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StackTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StackTypes>(
    StackTypes_descriptor(), name, value);
}
// ===================================================================

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.CraneScheduling.DataModel.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Block& from) {
    Block::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.CraneScheduling.DataModel.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kClassFieldNumber = 2,
  };
  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 Class = 2;
  void clear_class_();
  int32_t class_() const;
  void set_class_(int32_t value);
  private:
  int32_t _internal_class_() const;
  void _internal_set_class_(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.CraneScheduling.DataModel.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t class__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cranescheduling_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Crane final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.CraneScheduling.DataModel.Crane) */ {
 public:
  inline Crane() : Crane(nullptr) {}
  ~Crane() override;
  explicit PROTOBUF_CONSTEXPR Crane(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Crane(const Crane& from);
  Crane(Crane&& from) noexcept
    : Crane() {
    *this = ::std::move(from);
  }

  inline Crane& operator=(const Crane& from) {
    CopyFrom(from);
    return *this;
  }
  inline Crane& operator=(Crane&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Crane& default_instance() {
    return *internal_default_instance();
  }
  static inline const Crane* internal_default_instance() {
    return reinterpret_cast<const Crane*>(
               &_Crane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Crane& a, Crane& b) {
    a.Swap(&b);
  }
  inline void Swap(Crane* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Crane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Crane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Crane>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Crane& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Crane& from) {
    Crane::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Crane* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.CraneScheduling.DataModel.Crane";
  }
  protected:
  explicit Crane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadFieldNumber = 2,
    kGirderPositionFieldNumber = 3,
    kIdFieldNumber = 1,
    kCraneCapacityFieldNumber = 5,
    kHoistLevelFieldNumber = 4,
    kWidthFieldNumber = 6,
    kMinPositionFieldNumber = 7,
    kMaxPositionFieldNumber = 8,
  };
  // .DynStacking.CraneScheduling.DataModel.Stack Load = 2;
  bool has_load() const;
  private:
  bool _internal_has_load() const;
  public:
  void clear_load();
  const ::DynStacking::CraneScheduling::DataModel::Stack& load() const;
  PROTOBUF_NODISCARD ::DynStacking::CraneScheduling::DataModel::Stack* release_load();
  ::DynStacking::CraneScheduling::DataModel::Stack* mutable_load();
  void set_allocated_load(::DynStacking::CraneScheduling::DataModel::Stack* load);
  private:
  const ::DynStacking::CraneScheduling::DataModel::Stack& _internal_load() const;
  ::DynStacking::CraneScheduling::DataModel::Stack* _internal_mutable_load();
  public:
  void unsafe_arena_set_allocated_load(
      ::DynStacking::CraneScheduling::DataModel::Stack* load);
  ::DynStacking::CraneScheduling::DataModel::Stack* unsafe_arena_release_load();

  // double GirderPosition = 3;
  void clear_girderposition();
  double girderposition() const;
  void set_girderposition(double value);
  private:
  double _internal_girderposition() const;
  void _internal_set_girderposition(double value);
  public:

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 CraneCapacity = 5;
  void clear_cranecapacity();
  int32_t cranecapacity() const;
  void set_cranecapacity(int32_t value);
  private:
  int32_t _internal_cranecapacity() const;
  void _internal_set_cranecapacity(int32_t value);
  public:

  // double HoistLevel = 4;
  void clear_hoistlevel();
  double hoistlevel() const;
  void set_hoistlevel(double value);
  private:
  double _internal_hoistlevel() const;
  void _internal_set_hoistlevel(double value);
  public:

  // double Width = 6;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double MinPosition = 7;
  void clear_minposition();
  double minposition() const;
  void set_minposition(double value);
  private:
  double _internal_minposition() const;
  void _internal_set_minposition(double value);
  public:

  // double MaxPosition = 8;
  void clear_maxposition();
  double maxposition() const;
  void set_maxposition(double value);
  private:
  double _internal_maxposition() const;
  void _internal_set_maxposition(double value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.CraneScheduling.DataModel.Crane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DynStacking::CraneScheduling::DataModel::Stack* load_;
    double girderposition_;
    int32_t id_;
    int32_t cranecapacity_;
    double hoistlevel_;
    double width_;
    double minposition_;
    double maxposition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cranescheduling_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class CraneMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.CraneScheduling.DataModel.CraneMove) */ {
 public:
  inline CraneMove() : CraneMove(nullptr) {}
  ~CraneMove() override;
  explicit PROTOBUF_CONSTEXPR CraneMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CraneMove(const CraneMove& from);
  CraneMove(CraneMove&& from) noexcept
    : CraneMove() {
    *this = ::std::move(from);
  }

  inline CraneMove& operator=(const CraneMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline CraneMove& operator=(CraneMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CraneMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const CraneMove* internal_default_instance() {
    return reinterpret_cast<const CraneMove*>(
               &_CraneMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CraneMove& a, CraneMove& b) {
    a.Swap(&b);
  }
  inline void Swap(CraneMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CraneMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CraneMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CraneMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CraneMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CraneMove& from) {
    CraneMove::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CraneMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.CraneScheduling.DataModel.CraneMove";
  }
  protected:
  explicit CraneMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtobufPredecessorIdsFieldNumber = 12,
    kProtobufMovedBlockIdsFieldNumber = 13,
    kReleaseTimeFieldNumber = 8,
    kDueDateFieldNumber = 9,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPickupGirderPositionFieldNumber = 4,
    kPickupLocationIdFieldNumber = 3,
    kDropoffLocationIdFieldNumber = 5,
    kDropoffGirderPositionFieldNumber = 6,
    kAmountFieldNumber = 7,
    kRequiredCraneIdFieldNumber = 10,
  };
  // repeated int32 ProtobufPredecessorIds = 12 [packed = false];
  int protobufpredecessorids_size() const;
  private:
  int _internal_protobufpredecessorids_size() const;
  public:
  void clear_protobufpredecessorids();
  private:
  int32_t _internal_protobufpredecessorids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_protobufpredecessorids() const;
  void _internal_add_protobufpredecessorids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_protobufpredecessorids();
  public:
  int32_t protobufpredecessorids(int index) const;
  void set_protobufpredecessorids(int index, int32_t value);
  void add_protobufpredecessorids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      protobufpredecessorids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_protobufpredecessorids();

  // repeated int32 ProtobufMovedBlockIds = 13 [packed = false];
  int protobufmovedblockids_size() const;
  private:
  int _internal_protobufmovedblockids_size() const;
  public:
  void clear_protobufmovedblockids();
  private:
  int32_t _internal_protobufmovedblockids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_protobufmovedblockids() const;
  void _internal_add_protobufmovedblockids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_protobufmovedblockids();
  public:
  int32_t protobufmovedblockids(int index) const;
  void set_protobufmovedblockids(int index, int32_t value);
  void add_protobufmovedblockids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      protobufmovedblockids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_protobufmovedblockids();

  // .DynStacking.CraneScheduling.DataModel.TimeStamp ReleaseTime = 8;
  bool has_releasetime() const;
  private:
  bool _internal_has_releasetime() const;
  public:
  void clear_releasetime();
  const ::DynStacking::CraneScheduling::DataModel::TimeStamp& releasetime() const;
  PROTOBUF_NODISCARD ::DynStacking::CraneScheduling::DataModel::TimeStamp* release_releasetime();
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* mutable_releasetime();
  void set_allocated_releasetime(::DynStacking::CraneScheduling::DataModel::TimeStamp* releasetime);
  private:
  const ::DynStacking::CraneScheduling::DataModel::TimeStamp& _internal_releasetime() const;
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* _internal_mutable_releasetime();
  public:
  void unsafe_arena_set_allocated_releasetime(
      ::DynStacking::CraneScheduling::DataModel::TimeStamp* releasetime);
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* unsafe_arena_release_releasetime();

  // .DynStacking.CraneScheduling.DataModel.TimeStamp DueDate = 9;
  bool has_duedate() const;
  private:
  bool _internal_has_duedate() const;
  public:
  void clear_duedate();
  const ::DynStacking::CraneScheduling::DataModel::TimeStamp& duedate() const;
  PROTOBUF_NODISCARD ::DynStacking::CraneScheduling::DataModel::TimeStamp* release_duedate();
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* mutable_duedate();
  void set_allocated_duedate(::DynStacking::CraneScheduling::DataModel::TimeStamp* duedate);
  private:
  const ::DynStacking::CraneScheduling::DataModel::TimeStamp& _internal_duedate() const;
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* _internal_mutable_duedate();
  public:
  void unsafe_arena_set_allocated_duedate(
      ::DynStacking::CraneScheduling::DataModel::TimeStamp* duedate);
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* unsafe_arena_release_duedate();

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .DynStacking.CraneScheduling.DataModel.MoveType Type = 2;
  void clear_type();
  ::DynStacking::CraneScheduling::DataModel::MoveType type() const;
  void set_type(::DynStacking::CraneScheduling::DataModel::MoveType value);
  private:
  ::DynStacking::CraneScheduling::DataModel::MoveType _internal_type() const;
  void _internal_set_type(::DynStacking::CraneScheduling::DataModel::MoveType value);
  public:

  // double PickupGirderPosition = 4;
  void clear_pickupgirderposition();
  double pickupgirderposition() const;
  void set_pickupgirderposition(double value);
  private:
  double _internal_pickupgirderposition() const;
  void _internal_set_pickupgirderposition(double value);
  public:

  // int32 PickupLocationId = 3;
  void clear_pickuplocationid();
  int32_t pickuplocationid() const;
  void set_pickuplocationid(int32_t value);
  private:
  int32_t _internal_pickuplocationid() const;
  void _internal_set_pickuplocationid(int32_t value);
  public:

  // int32 DropoffLocationId = 5;
  void clear_dropofflocationid();
  int32_t dropofflocationid() const;
  void set_dropofflocationid(int32_t value);
  private:
  int32_t _internal_dropofflocationid() const;
  void _internal_set_dropofflocationid(int32_t value);
  public:

  // double DropoffGirderPosition = 6;
  void clear_dropoffgirderposition();
  double dropoffgirderposition() const;
  void set_dropoffgirderposition(double value);
  private:
  double _internal_dropoffgirderposition() const;
  void _internal_set_dropoffgirderposition(double value);
  public:

  // int32 Amount = 7;
  void clear_amount();
  int32_t amount() const;
  void set_amount(int32_t value);
  private:
  int32_t _internal_amount() const;
  void _internal_set_amount(int32_t value);
  public:

  // int32 RequiredCraneId = 10;
  void clear_requiredcraneid();
  int32_t requiredcraneid() const;
  void set_requiredcraneid(int32_t value);
  private:
  int32_t _internal_requiredcraneid() const;
  void _internal_set_requiredcraneid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.CraneScheduling.DataModel.CraneMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > protobufpredecessorids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > protobufmovedblockids_;
    ::DynStacking::CraneScheduling::DataModel::TimeStamp* releasetime_;
    ::DynStacking::CraneScheduling::DataModel::TimeStamp* duedate_;
    int32_t id_;
    int type_;
    double pickupgirderposition_;
    int32_t pickuplocationid_;
    int32_t dropofflocationid_;
    double dropoffgirderposition_;
    int32_t amount_;
    int32_t requiredcraneid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cranescheduling_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class CraneSchedule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.CraneScheduling.DataModel.CraneSchedule) */ {
 public:
  inline CraneSchedule() : CraneSchedule(nullptr) {}
  ~CraneSchedule() override;
  explicit PROTOBUF_CONSTEXPR CraneSchedule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CraneSchedule(const CraneSchedule& from);
  CraneSchedule(CraneSchedule&& from) noexcept
    : CraneSchedule() {
    *this = ::std::move(from);
  }

  inline CraneSchedule& operator=(const CraneSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline CraneSchedule& operator=(CraneSchedule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CraneSchedule& default_instance() {
    return *internal_default_instance();
  }
  static inline const CraneSchedule* internal_default_instance() {
    return reinterpret_cast<const CraneSchedule*>(
               &_CraneSchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CraneSchedule& a, CraneSchedule& b) {
    a.Swap(&b);
  }
  inline void Swap(CraneSchedule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CraneSchedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CraneSchedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CraneSchedule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CraneSchedule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CraneSchedule& from) {
    CraneSchedule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CraneSchedule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.CraneScheduling.DataModel.CraneSchedule";
  }
  protected:
  explicit CraneSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivitiesFieldNumber = 2,
    kScheduleNrFieldNumber = 1,
  };
  // repeated .DynStacking.CraneScheduling.DataModel.CraneScheduleActivity Activities = 2;
  int activities_size() const;
  private:
  int _internal_activities_size() const;
  public:
  void clear_activities();
  ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity* mutable_activities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity >*
      mutable_activities();
  private:
  const ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity& _internal_activities(int index) const;
  ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity* _internal_add_activities();
  public:
  const ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity& activities(int index) const;
  ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity* add_activities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity >&
      activities() const;

  // int32 ScheduleNr = 1;
  void clear_schedulenr();
  int32_t schedulenr() const;
  void set_schedulenr(int32_t value);
  private:
  int32_t _internal_schedulenr() const;
  void _internal_set_schedulenr(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.CraneScheduling.DataModel.CraneSchedule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity > activities_;
    int32_t schedulenr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cranescheduling_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class CraneScheduleActivity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity) */ {
 public:
  inline CraneScheduleActivity() : CraneScheduleActivity(nullptr) {}
  ~CraneScheduleActivity() override;
  explicit PROTOBUF_CONSTEXPR CraneScheduleActivity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CraneScheduleActivity(const CraneScheduleActivity& from);
  CraneScheduleActivity(CraneScheduleActivity&& from) noexcept
    : CraneScheduleActivity() {
    *this = ::std::move(from);
  }

  inline CraneScheduleActivity& operator=(const CraneScheduleActivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline CraneScheduleActivity& operator=(CraneScheduleActivity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CraneScheduleActivity& default_instance() {
    return *internal_default_instance();
  }
  static inline const CraneScheduleActivity* internal_default_instance() {
    return reinterpret_cast<const CraneScheduleActivity*>(
               &_CraneScheduleActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CraneScheduleActivity& a, CraneScheduleActivity& b) {
    a.Swap(&b);
  }
  inline void Swap(CraneScheduleActivity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CraneScheduleActivity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CraneScheduleActivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CraneScheduleActivity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CraneScheduleActivity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CraneScheduleActivity& from) {
    CraneScheduleActivity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CraneScheduleActivity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.CraneScheduling.DataModel.CraneScheduleActivity";
  }
  protected:
  explicit CraneScheduleActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveIdFieldNumber = 1,
    kCraneIdFieldNumber = 2,
    kPriorityFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // int32 MoveId = 1;
  void clear_moveid();
  int32_t moveid() const;
  void set_moveid(int32_t value);
  private:
  int32_t _internal_moveid() const;
  void _internal_set_moveid(int32_t value);
  public:

  // int32 CraneId = 2;
  void clear_craneid();
  int32_t craneid() const;
  void set_craneid(int32_t value);
  private:
  int32_t _internal_craneid() const;
  void _internal_set_craneid(int32_t value);
  public:

  // int32 Priority = 3;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // .DynStacking.CraneScheduling.DataModel.CraneScheduleActivityState State = 4;
  void clear_state();
  ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivityState state() const;
  void set_state(::DynStacking::CraneScheduling::DataModel::CraneScheduleActivityState value);
  private:
  ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivityState _internal_state() const;
  void _internal_set_state(::DynStacking::CraneScheduling::DataModel::CraneScheduleActivityState value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t moveid_;
    int32_t craneid_;
    int32_t priority_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cranescheduling_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class CraneSchedulingSolution final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution) */ {
 public:
  inline CraneSchedulingSolution() : CraneSchedulingSolution(nullptr) {}
  ~CraneSchedulingSolution() override;
  explicit PROTOBUF_CONSTEXPR CraneSchedulingSolution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CraneSchedulingSolution(const CraneSchedulingSolution& from);
  CraneSchedulingSolution(CraneSchedulingSolution&& from) noexcept
    : CraneSchedulingSolution() {
    *this = ::std::move(from);
  }

  inline CraneSchedulingSolution& operator=(const CraneSchedulingSolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline CraneSchedulingSolution& operator=(CraneSchedulingSolution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CraneSchedulingSolution& default_instance() {
    return *internal_default_instance();
  }
  static inline const CraneSchedulingSolution* internal_default_instance() {
    return reinterpret_cast<const CraneSchedulingSolution*>(
               &_CraneSchedulingSolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CraneSchedulingSolution& a, CraneSchedulingSolution& b) {
    a.Swap(&b);
  }
  inline void Swap(CraneSchedulingSolution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CraneSchedulingSolution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CraneSchedulingSolution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CraneSchedulingSolution>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CraneSchedulingSolution& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CraneSchedulingSolution& from) {
    CraneSchedulingSolution::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CraneSchedulingSolution* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution";
  }
  protected:
  explicit CraneSchedulingSolution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomMovesFieldNumber = 1,
    kScheduleFieldNumber = 2,
  };
  // repeated .DynStacking.CraneScheduling.DataModel.CraneMove CustomMoves = 1;
  int custommoves_size() const;
  private:
  int _internal_custommoves_size() const;
  public:
  void clear_custommoves();
  ::DynStacking::CraneScheduling::DataModel::CraneMove* mutable_custommoves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneMove >*
      mutable_custommoves();
  private:
  const ::DynStacking::CraneScheduling::DataModel::CraneMove& _internal_custommoves(int index) const;
  ::DynStacking::CraneScheduling::DataModel::CraneMove* _internal_add_custommoves();
  public:
  const ::DynStacking::CraneScheduling::DataModel::CraneMove& custommoves(int index) const;
  ::DynStacking::CraneScheduling::DataModel::CraneMove* add_custommoves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneMove >&
      custommoves() const;

  // .DynStacking.CraneScheduling.DataModel.CraneSchedule Schedule = 2;
  bool has_schedule() const;
  private:
  bool _internal_has_schedule() const;
  public:
  void clear_schedule();
  const ::DynStacking::CraneScheduling::DataModel::CraneSchedule& schedule() const;
  PROTOBUF_NODISCARD ::DynStacking::CraneScheduling::DataModel::CraneSchedule* release_schedule();
  ::DynStacking::CraneScheduling::DataModel::CraneSchedule* mutable_schedule();
  void set_allocated_schedule(::DynStacking::CraneScheduling::DataModel::CraneSchedule* schedule);
  private:
  const ::DynStacking::CraneScheduling::DataModel::CraneSchedule& _internal_schedule() const;
  ::DynStacking::CraneScheduling::DataModel::CraneSchedule* _internal_mutable_schedule();
  public:
  void unsafe_arena_set_allocated_schedule(
      ::DynStacking::CraneScheduling::DataModel::CraneSchedule* schedule);
  ::DynStacking::CraneScheduling::DataModel::CraneSchedule* unsafe_arena_release_schedule();

  // @@protoc_insertion_point(class_scope:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneMove > custommoves_;
    ::DynStacking::CraneScheduling::DataModel::CraneSchedule* schedule_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cranescheduling_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.CraneScheduling.DataModel.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit PROTOBUF_CONSTEXPR Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Location& from) {
    Location::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.CraneScheduling.DataModel.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStackFieldNumber = 4,
    kGirderPositionFieldNumber = 2,
    kIdFieldNumber = 1,
    kMaxHeightFieldNumber = 3,
    kTypeFieldNumber = 5,
    kClassFieldNumber = 6,
  };
  // .DynStacking.CraneScheduling.DataModel.Stack Stack = 4;
  bool has_stack() const;
  private:
  bool _internal_has_stack() const;
  public:
  void clear_stack();
  const ::DynStacking::CraneScheduling::DataModel::Stack& stack() const;
  PROTOBUF_NODISCARD ::DynStacking::CraneScheduling::DataModel::Stack* release_stack();
  ::DynStacking::CraneScheduling::DataModel::Stack* mutable_stack();
  void set_allocated_stack(::DynStacking::CraneScheduling::DataModel::Stack* stack);
  private:
  const ::DynStacking::CraneScheduling::DataModel::Stack& _internal_stack() const;
  ::DynStacking::CraneScheduling::DataModel::Stack* _internal_mutable_stack();
  public:
  void unsafe_arena_set_allocated_stack(
      ::DynStacking::CraneScheduling::DataModel::Stack* stack);
  ::DynStacking::CraneScheduling::DataModel::Stack* unsafe_arena_release_stack();

  // double GirderPosition = 2;
  void clear_girderposition();
  double girderposition() const;
  void set_girderposition(double value);
  private:
  double _internal_girderposition() const;
  void _internal_set_girderposition(double value);
  public:

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 MaxHeight = 3;
  void clear_maxheight();
  int32_t maxheight() const;
  void set_maxheight(int32_t value);
  private:
  int32_t _internal_maxheight() const;
  void _internal_set_maxheight(int32_t value);
  public:

  // .DynStacking.CraneScheduling.DataModel.StackTypes Type = 5;
  void clear_type();
  ::DynStacking::CraneScheduling::DataModel::StackTypes type() const;
  void set_type(::DynStacking::CraneScheduling::DataModel::StackTypes value);
  private:
  ::DynStacking::CraneScheduling::DataModel::StackTypes _internal_type() const;
  void _internal_set_type(::DynStacking::CraneScheduling::DataModel::StackTypes value);
  public:

  // int32 Class = 6;
  void clear_class_();
  int32_t class_() const;
  void set_class_(int32_t value);
  private:
  int32_t _internal_class_() const;
  void _internal_set_class_(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.CraneScheduling.DataModel.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DynStacking::CraneScheduling::DataModel::Stack* stack_;
    double girderposition_;
    int32_t id_;
    int32_t maxheight_;
    int type_;
    int32_t class__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cranescheduling_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class MoveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.CraneScheduling.DataModel.MoveRequest) */ {
 public:
  inline MoveRequest() : MoveRequest(nullptr) {}
  ~MoveRequest() override;
  explicit PROTOBUF_CONSTEXPR MoveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveRequest(const MoveRequest& from);
  MoveRequest(MoveRequest&& from) noexcept
    : MoveRequest() {
    *this = ::std::move(from);
  }

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRequest& operator=(MoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveRequest* internal_default_instance() {
    return reinterpret_cast<const MoveRequest*>(
               &_MoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MoveRequest& a, MoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveRequest& from) {
    MoveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.CraneScheduling.DataModel.MoveRequest";
  }
  protected:
  explicit MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDueDateFieldNumber = 4,
    kIdFieldNumber = 1,
    kTargetLocationIdFieldNumber = 2,
    kBlockIdFieldNumber = 3,
  };
  // .DynStacking.CraneScheduling.DataModel.TimeStamp DueDate = 4;
  bool has_duedate() const;
  private:
  bool _internal_has_duedate() const;
  public:
  void clear_duedate();
  const ::DynStacking::CraneScheduling::DataModel::TimeStamp& duedate() const;
  PROTOBUF_NODISCARD ::DynStacking::CraneScheduling::DataModel::TimeStamp* release_duedate();
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* mutable_duedate();
  void set_allocated_duedate(::DynStacking::CraneScheduling::DataModel::TimeStamp* duedate);
  private:
  const ::DynStacking::CraneScheduling::DataModel::TimeStamp& _internal_duedate() const;
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* _internal_mutable_duedate();
  public:
  void unsafe_arena_set_allocated_duedate(
      ::DynStacking::CraneScheduling::DataModel::TimeStamp* duedate);
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* unsafe_arena_release_duedate();

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 TargetLocationId = 2;
  void clear_targetlocationid();
  int32_t targetlocationid() const;
  void set_targetlocationid(int32_t value);
  private:
  int32_t _internal_targetlocationid() const;
  void _internal_set_targetlocationid(int32_t value);
  public:

  // int32 BlockId = 3;
  void clear_blockid();
  int32_t blockid() const;
  void set_blockid(int32_t value);
  private:
  int32_t _internal_blockid() const;
  void _internal_set_blockid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.CraneScheduling.DataModel.MoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DynStacking::CraneScheduling::DataModel::TimeStamp* duedate_;
    int32_t id_;
    int32_t targetlocationid_;
    int32_t blockid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cranescheduling_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Performance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.CraneScheduling.DataModel.Performance) */ {
 public:
  inline Performance() : Performance(nullptr) {}
  ~Performance() override;
  explicit PROTOBUF_CONSTEXPR Performance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Performance(const Performance& from);
  Performance(Performance&& from) noexcept
    : Performance() {
    *this = ::std::move(from);
  }

  inline Performance& operator=(const Performance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Performance& operator=(Performance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Performance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Performance* internal_default_instance() {
    return reinterpret_cast<const Performance*>(
               &_Performance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Performance& a, Performance& b) {
    a.Swap(&b);
  }
  inline void Swap(Performance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Performance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Performance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Performance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Performance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Performance& from) {
    Performance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Performance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.CraneScheduling.DataModel.Performance";
  }
  protected:
  explicit Performance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCraneManipulationsFieldNumber = 1,
    kUpstreamBlocksFieldNumber = 2,
    kDownstreamBlocksFieldNumber = 3,
    kDeliveryErrorsFieldNumber = 4,
    kTotalGirderDistanceFieldNumber = 5,
    kTotalHoistDistanceFieldNumber = 6,
    kServicedUpstreamVehiclesFieldNumber = 7,
    kServicedDownstreamVehiclesFieldNumber = 8,
    kUpstreamServiceTimeFieldNumber = 9,
    kDownstreamServiceTimeFieldNumber = 10,
    kParkingUpstreamVehiclesFieldNumber = 11,
    kParkingDownstreamVehiclesFieldNumber = 12,
    kUpstreamParkingTimeFieldNumber = 13,
    kDownstreamParkingTimeFieldNumber = 14,
    kMaxParkingDurationFieldNumber = 15,
  };
  // int32 CraneManipulations = 1;
  void clear_cranemanipulations();
  int32_t cranemanipulations() const;
  void set_cranemanipulations(int32_t value);
  private:
  int32_t _internal_cranemanipulations() const;
  void _internal_set_cranemanipulations(int32_t value);
  public:

  // int32 UpstreamBlocks = 2;
  void clear_upstreamblocks();
  int32_t upstreamblocks() const;
  void set_upstreamblocks(int32_t value);
  private:
  int32_t _internal_upstreamblocks() const;
  void _internal_set_upstreamblocks(int32_t value);
  public:

  // int32 DownstreamBlocks = 3;
  void clear_downstreamblocks();
  int32_t downstreamblocks() const;
  void set_downstreamblocks(int32_t value);
  private:
  int32_t _internal_downstreamblocks() const;
  void _internal_set_downstreamblocks(int32_t value);
  public:

  // int32 DeliveryErrors = 4;
  void clear_deliveryerrors();
  int32_t deliveryerrors() const;
  void set_deliveryerrors(int32_t value);
  private:
  int32_t _internal_deliveryerrors() const;
  void _internal_set_deliveryerrors(int32_t value);
  public:

  // double TotalGirderDistance = 5;
  void clear_totalgirderdistance();
  double totalgirderdistance() const;
  void set_totalgirderdistance(double value);
  private:
  double _internal_totalgirderdistance() const;
  void _internal_set_totalgirderdistance(double value);
  public:

  // double TotalHoistDistance = 6;
  void clear_totalhoistdistance();
  double totalhoistdistance() const;
  void set_totalhoistdistance(double value);
  private:
  double _internal_totalhoistdistance() const;
  void _internal_set_totalhoistdistance(double value);
  public:

  // int32 ServicedUpstreamVehicles = 7;
  void clear_servicedupstreamvehicles();
  int32_t servicedupstreamvehicles() const;
  void set_servicedupstreamvehicles(int32_t value);
  private:
  int32_t _internal_servicedupstreamvehicles() const;
  void _internal_set_servicedupstreamvehicles(int32_t value);
  public:

  // int32 ServicedDownstreamVehicles = 8;
  void clear_serviceddownstreamvehicles();
  int32_t serviceddownstreamvehicles() const;
  void set_serviceddownstreamvehicles(int32_t value);
  private:
  int32_t _internal_serviceddownstreamvehicles() const;
  void _internal_set_serviceddownstreamvehicles(int32_t value);
  public:

  // double UpstreamServiceTime = 9;
  void clear_upstreamservicetime();
  double upstreamservicetime() const;
  void set_upstreamservicetime(double value);
  private:
  double _internal_upstreamservicetime() const;
  void _internal_set_upstreamservicetime(double value);
  public:

  // double DownstreamServiceTime = 10;
  void clear_downstreamservicetime();
  double downstreamservicetime() const;
  void set_downstreamservicetime(double value);
  private:
  double _internal_downstreamservicetime() const;
  void _internal_set_downstreamservicetime(double value);
  public:

  // int32 ParkingUpstreamVehicles = 11;
  void clear_parkingupstreamvehicles();
  int32_t parkingupstreamvehicles() const;
  void set_parkingupstreamvehicles(int32_t value);
  private:
  int32_t _internal_parkingupstreamvehicles() const;
  void _internal_set_parkingupstreamvehicles(int32_t value);
  public:

  // int32 ParkingDownstreamVehicles = 12;
  void clear_parkingdownstreamvehicles();
  int32_t parkingdownstreamvehicles() const;
  void set_parkingdownstreamvehicles(int32_t value);
  private:
  int32_t _internal_parkingdownstreamvehicles() const;
  void _internal_set_parkingdownstreamvehicles(int32_t value);
  public:

  // double UpstreamParkingTime = 13;
  void clear_upstreamparkingtime();
  double upstreamparkingtime() const;
  void set_upstreamparkingtime(double value);
  private:
  double _internal_upstreamparkingtime() const;
  void _internal_set_upstreamparkingtime(double value);
  public:

  // double DownstreamParkingTime = 14;
  void clear_downstreamparkingtime();
  double downstreamparkingtime() const;
  void set_downstreamparkingtime(double value);
  private:
  double _internal_downstreamparkingtime() const;
  void _internal_set_downstreamparkingtime(double value);
  public:

  // double MaxParkingDuration = 15;
  void clear_maxparkingduration();
  double maxparkingduration() const;
  void set_maxparkingduration(double value);
  private:
  double _internal_maxparkingduration() const;
  void _internal_set_maxparkingduration(double value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.CraneScheduling.DataModel.Performance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t cranemanipulations_;
    int32_t upstreamblocks_;
    int32_t downstreamblocks_;
    int32_t deliveryerrors_;
    double totalgirderdistance_;
    double totalhoistdistance_;
    int32_t servicedupstreamvehicles_;
    int32_t serviceddownstreamvehicles_;
    double upstreamservicetime_;
    double downstreamservicetime_;
    int32_t parkingupstreamvehicles_;
    int32_t parkingdownstreamvehicles_;
    double upstreamparkingtime_;
    double downstreamparkingtime_;
    double maxparkingduration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cranescheduling_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Stack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.CraneScheduling.DataModel.Stack) */ {
 public:
  inline Stack() : Stack(nullptr) {}
  ~Stack() override;
  explicit PROTOBUF_CONSTEXPR Stack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stack(const Stack& from);
  Stack(Stack&& from) noexcept
    : Stack() {
    *this = ::std::move(from);
  }

  inline Stack& operator=(const Stack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stack& operator=(Stack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stack* internal_default_instance() {
    return reinterpret_cast<const Stack*>(
               &_Stack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Stack& a, Stack& b) {
    a.Swap(&b);
  }
  inline void Swap(Stack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stack& from) {
    Stack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.CraneScheduling.DataModel.Stack";
  }
  protected:
  explicit Stack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBottomToTopFieldNumber = 1,
  };
  // repeated .DynStacking.CraneScheduling.DataModel.Block BottomToTop = 1;
  int bottomtotop_size() const;
  private:
  int _internal_bottomtotop_size() const;
  public:
  void clear_bottomtotop();
  ::DynStacking::CraneScheduling::DataModel::Block* mutable_bottomtotop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Block >*
      mutable_bottomtotop();
  private:
  const ::DynStacking::CraneScheduling::DataModel::Block& _internal_bottomtotop(int index) const;
  ::DynStacking::CraneScheduling::DataModel::Block* _internal_add_bottomtotop();
  public:
  const ::DynStacking::CraneScheduling::DataModel::Block& bottomtotop(int index) const;
  ::DynStacking::CraneScheduling::DataModel::Block* add_bottomtotop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Block >&
      bottomtotop() const;

  // @@protoc_insertion_point(class_scope:DynStacking.CraneScheduling.DataModel.Stack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Block > bottomtotop_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cranescheduling_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class TimeStamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.CraneScheduling.DataModel.TimeStamp) */ {
 public:
  inline TimeStamp() : TimeStamp(nullptr) {}
  ~TimeStamp() override;
  explicit PROTOBUF_CONSTEXPR TimeStamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeStamp(const TimeStamp& from);
  TimeStamp(TimeStamp&& from) noexcept
    : TimeStamp() {
    *this = ::std::move(from);
  }

  inline TimeStamp& operator=(const TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeStamp& operator=(TimeStamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeStamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeStamp* internal_default_instance() {
    return reinterpret_cast<const TimeStamp*>(
               &_TimeStamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TimeStamp& a, TimeStamp& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeStamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeStamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeStamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeStamp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeStamp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeStamp& from) {
    TimeStamp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeStamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.CraneScheduling.DataModel.TimeStamp";
  }
  protected:
  explicit TimeStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMilliSecondsFieldNumber = 1,
  };
  // int64 MilliSeconds = 1;
  void clear_milliseconds();
  int64_t milliseconds() const;
  void set_milliseconds(int64_t value);
  private:
  int64_t _internal_milliseconds() const;
  void _internal_set_milliseconds(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.CraneScheduling.DataModel.TimeStamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t milliseconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cranescheduling_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class World final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DynStacking.CraneScheduling.DataModel.World) */ {
 public:
  inline World() : World(nullptr) {}
  ~World() override;
  explicit PROTOBUF_CONSTEXPR World(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  World(const World& from);
  World(World&& from) noexcept
    : World() {
    *this = ::std::move(from);
  }

  inline World& operator=(const World& from) {
    CopyFrom(from);
    return *this;
  }
  inline World& operator=(World&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const World& default_instance() {
    return *internal_default_instance();
  }
  static inline const World* internal_default_instance() {
    return reinterpret_cast<const World*>(
               &_World_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(World& a, World& b) {
    a.Swap(&b);
  }
  inline void Swap(World* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(World* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  World* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<World>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const World& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const World& from) {
    World::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(World* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DynStacking.CraneScheduling.DataModel.World";
  }
  protected:
  explicit World(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationsFieldNumber = 4,
    kCraneMovesFieldNumber = 5,
    kCranesFieldNumber = 6,
    kMoveRequestsFieldNumber = 7,
    kNowFieldNumber = 1,
    kCraneScheduleFieldNumber = 8,
    kKPIsFieldNumber = 9,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 2,
  };
  // repeated .DynStacking.CraneScheduling.DataModel.Location Locations = 4;
  int locations_size() const;
  private:
  int _internal_locations_size() const;
  public:
  void clear_locations();
  ::DynStacking::CraneScheduling::DataModel::Location* mutable_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Location >*
      mutable_locations();
  private:
  const ::DynStacking::CraneScheduling::DataModel::Location& _internal_locations(int index) const;
  ::DynStacking::CraneScheduling::DataModel::Location* _internal_add_locations();
  public:
  const ::DynStacking::CraneScheduling::DataModel::Location& locations(int index) const;
  ::DynStacking::CraneScheduling::DataModel::Location* add_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Location >&
      locations() const;

  // repeated .DynStacking.CraneScheduling.DataModel.CraneMove CraneMoves = 5;
  int cranemoves_size() const;
  private:
  int _internal_cranemoves_size() const;
  public:
  void clear_cranemoves();
  ::DynStacking::CraneScheduling::DataModel::CraneMove* mutable_cranemoves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneMove >*
      mutable_cranemoves();
  private:
  const ::DynStacking::CraneScheduling::DataModel::CraneMove& _internal_cranemoves(int index) const;
  ::DynStacking::CraneScheduling::DataModel::CraneMove* _internal_add_cranemoves();
  public:
  const ::DynStacking::CraneScheduling::DataModel::CraneMove& cranemoves(int index) const;
  ::DynStacking::CraneScheduling::DataModel::CraneMove* add_cranemoves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneMove >&
      cranemoves() const;

  // repeated .DynStacking.CraneScheduling.DataModel.Crane Cranes = 6;
  int cranes_size() const;
  private:
  int _internal_cranes_size() const;
  public:
  void clear_cranes();
  ::DynStacking::CraneScheduling::DataModel::Crane* mutable_cranes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Crane >*
      mutable_cranes();
  private:
  const ::DynStacking::CraneScheduling::DataModel::Crane& _internal_cranes(int index) const;
  ::DynStacking::CraneScheduling::DataModel::Crane* _internal_add_cranes();
  public:
  const ::DynStacking::CraneScheduling::DataModel::Crane& cranes(int index) const;
  ::DynStacking::CraneScheduling::DataModel::Crane* add_cranes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Crane >&
      cranes() const;

  // repeated .DynStacking.CraneScheduling.DataModel.MoveRequest MoveRequests = 7;
  int moverequests_size() const;
  private:
  int _internal_moverequests_size() const;
  public:
  void clear_moverequests();
  ::DynStacking::CraneScheduling::DataModel::MoveRequest* mutable_moverequests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::MoveRequest >*
      mutable_moverequests();
  private:
  const ::DynStacking::CraneScheduling::DataModel::MoveRequest& _internal_moverequests(int index) const;
  ::DynStacking::CraneScheduling::DataModel::MoveRequest* _internal_add_moverequests();
  public:
  const ::DynStacking::CraneScheduling::DataModel::MoveRequest& moverequests(int index) const;
  ::DynStacking::CraneScheduling::DataModel::MoveRequest* add_moverequests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::MoveRequest >&
      moverequests() const;

  // .DynStacking.CraneScheduling.DataModel.TimeStamp Now = 1;
  bool has_now() const;
  private:
  bool _internal_has_now() const;
  public:
  void clear_now();
  const ::DynStacking::CraneScheduling::DataModel::TimeStamp& now() const;
  PROTOBUF_NODISCARD ::DynStacking::CraneScheduling::DataModel::TimeStamp* release_now();
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* mutable_now();
  void set_allocated_now(::DynStacking::CraneScheduling::DataModel::TimeStamp* now);
  private:
  const ::DynStacking::CraneScheduling::DataModel::TimeStamp& _internal_now() const;
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* _internal_mutable_now();
  public:
  void unsafe_arena_set_allocated_now(
      ::DynStacking::CraneScheduling::DataModel::TimeStamp* now);
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* unsafe_arena_release_now();

  // .DynStacking.CraneScheduling.DataModel.CraneSchedule CraneSchedule = 8;
  bool has_craneschedule() const;
  private:
  bool _internal_has_craneschedule() const;
  public:
  void clear_craneschedule();
  const ::DynStacking::CraneScheduling::DataModel::CraneSchedule& craneschedule() const;
  PROTOBUF_NODISCARD ::DynStacking::CraneScheduling::DataModel::CraneSchedule* release_craneschedule();
  ::DynStacking::CraneScheduling::DataModel::CraneSchedule* mutable_craneschedule();
  void set_allocated_craneschedule(::DynStacking::CraneScheduling::DataModel::CraneSchedule* craneschedule);
  private:
  const ::DynStacking::CraneScheduling::DataModel::CraneSchedule& _internal_craneschedule() const;
  ::DynStacking::CraneScheduling::DataModel::CraneSchedule* _internal_mutable_craneschedule();
  public:
  void unsafe_arena_set_allocated_craneschedule(
      ::DynStacking::CraneScheduling::DataModel::CraneSchedule* craneschedule);
  ::DynStacking::CraneScheduling::DataModel::CraneSchedule* unsafe_arena_release_craneschedule();

  // .DynStacking.CraneScheduling.DataModel.Performance KPIs = 9;
  bool has_kpis() const;
  private:
  bool _internal_has_kpis() const;
  public:
  void clear_kpis();
  const ::DynStacking::CraneScheduling::DataModel::Performance& kpis() const;
  PROTOBUF_NODISCARD ::DynStacking::CraneScheduling::DataModel::Performance* release_kpis();
  ::DynStacking::CraneScheduling::DataModel::Performance* mutable_kpis();
  void set_allocated_kpis(::DynStacking::CraneScheduling::DataModel::Performance* kpis);
  private:
  const ::DynStacking::CraneScheduling::DataModel::Performance& _internal_kpis() const;
  ::DynStacking::CraneScheduling::DataModel::Performance* _internal_mutable_kpis();
  public:
  void unsafe_arena_set_allocated_kpis(
      ::DynStacking::CraneScheduling::DataModel::Performance* kpis);
  ::DynStacking::CraneScheduling::DataModel::Performance* unsafe_arena_release_kpis();

  // double Width = 3;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // int32 Height = 2;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DynStacking.CraneScheduling.DataModel.World)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Location > locations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneMove > cranemoves_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Crane > cranes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::MoveRequest > moverequests_;
    ::DynStacking::CraneScheduling::DataModel::TimeStamp* now_;
    ::DynStacking::CraneScheduling::DataModel::CraneSchedule* craneschedule_;
    ::DynStacking::CraneScheduling::DataModel::Performance* kpis_;
    double width_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cranescheduling_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// int32 Id = 1;
inline void Block::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Block::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Block::id() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Block.Id)
  return _internal_id();
}
inline void Block::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Block::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Block.Id)
}

// int32 Class = 2;
inline void Block::clear_class_() {
  _impl_.class__ = 0;
}
inline int32_t Block::_internal_class_() const {
  return _impl_.class__;
}
inline int32_t Block::class_() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Block.Class)
  return _internal_class_();
}
inline void Block::_internal_set_class_(int32_t value) {
  
  _impl_.class__ = value;
}
inline void Block::set_class_(int32_t value) {
  _internal_set_class_(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Block.Class)
}

// -------------------------------------------------------------------

// Crane

// int32 Id = 1;
inline void Crane::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Crane::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Crane::id() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Crane.Id)
  return _internal_id();
}
inline void Crane::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Crane::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Crane.Id)
}

// .DynStacking.CraneScheduling.DataModel.Stack Load = 2;
inline bool Crane::_internal_has_load() const {
  return this != internal_default_instance() && _impl_.load_ != nullptr;
}
inline bool Crane::has_load() const {
  return _internal_has_load();
}
inline void Crane::clear_load() {
  if (GetArenaForAllocation() == nullptr && _impl_.load_ != nullptr) {
    delete _impl_.load_;
  }
  _impl_.load_ = nullptr;
}
inline const ::DynStacking::CraneScheduling::DataModel::Stack& Crane::_internal_load() const {
  const ::DynStacking::CraneScheduling::DataModel::Stack* p = _impl_.load_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::CraneScheduling::DataModel::Stack&>(
      ::DynStacking::CraneScheduling::DataModel::_Stack_default_instance_);
}
inline const ::DynStacking::CraneScheduling::DataModel::Stack& Crane::load() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Crane.Load)
  return _internal_load();
}
inline void Crane::unsafe_arena_set_allocated_load(
    ::DynStacking::CraneScheduling::DataModel::Stack* load) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.load_);
  }
  _impl_.load_ = load;
  if (load) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.CraneScheduling.DataModel.Crane.Load)
}
inline ::DynStacking::CraneScheduling::DataModel::Stack* Crane::release_load() {
  
  ::DynStacking::CraneScheduling::DataModel::Stack* temp = _impl_.load_;
  _impl_.load_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::Stack* Crane::unsafe_arena_release_load() {
  // @@protoc_insertion_point(field_release:DynStacking.CraneScheduling.DataModel.Crane.Load)
  
  ::DynStacking::CraneScheduling::DataModel::Stack* temp = _impl_.load_;
  _impl_.load_ = nullptr;
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::Stack* Crane::_internal_mutable_load() {
  
  if (_impl_.load_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::Stack>(GetArenaForAllocation());
    _impl_.load_ = p;
  }
  return _impl_.load_;
}
inline ::DynStacking::CraneScheduling::DataModel::Stack* Crane::mutable_load() {
  ::DynStacking::CraneScheduling::DataModel::Stack* _msg = _internal_mutable_load();
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.Crane.Load)
  return _msg;
}
inline void Crane::set_allocated_load(::DynStacking::CraneScheduling::DataModel::Stack* load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.load_;
  }
  if (load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(load);
    if (message_arena != submessage_arena) {
      load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.load_ = load;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.CraneScheduling.DataModel.Crane.Load)
}

// double GirderPosition = 3;
inline void Crane::clear_girderposition() {
  _impl_.girderposition_ = 0;
}
inline double Crane::_internal_girderposition() const {
  return _impl_.girderposition_;
}
inline double Crane::girderposition() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Crane.GirderPosition)
  return _internal_girderposition();
}
inline void Crane::_internal_set_girderposition(double value) {
  
  _impl_.girderposition_ = value;
}
inline void Crane::set_girderposition(double value) {
  _internal_set_girderposition(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Crane.GirderPosition)
}

// double HoistLevel = 4;
inline void Crane::clear_hoistlevel() {
  _impl_.hoistlevel_ = 0;
}
inline double Crane::_internal_hoistlevel() const {
  return _impl_.hoistlevel_;
}
inline double Crane::hoistlevel() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Crane.HoistLevel)
  return _internal_hoistlevel();
}
inline void Crane::_internal_set_hoistlevel(double value) {
  
  _impl_.hoistlevel_ = value;
}
inline void Crane::set_hoistlevel(double value) {
  _internal_set_hoistlevel(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Crane.HoistLevel)
}

// int32 CraneCapacity = 5;
inline void Crane::clear_cranecapacity() {
  _impl_.cranecapacity_ = 0;
}
inline int32_t Crane::_internal_cranecapacity() const {
  return _impl_.cranecapacity_;
}
inline int32_t Crane::cranecapacity() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Crane.CraneCapacity)
  return _internal_cranecapacity();
}
inline void Crane::_internal_set_cranecapacity(int32_t value) {
  
  _impl_.cranecapacity_ = value;
}
inline void Crane::set_cranecapacity(int32_t value) {
  _internal_set_cranecapacity(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Crane.CraneCapacity)
}

// double Width = 6;
inline void Crane::clear_width() {
  _impl_.width_ = 0;
}
inline double Crane::_internal_width() const {
  return _impl_.width_;
}
inline double Crane::width() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Crane.Width)
  return _internal_width();
}
inline void Crane::_internal_set_width(double value) {
  
  _impl_.width_ = value;
}
inline void Crane::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Crane.Width)
}

// double MinPosition = 7;
inline void Crane::clear_minposition() {
  _impl_.minposition_ = 0;
}
inline double Crane::_internal_minposition() const {
  return _impl_.minposition_;
}
inline double Crane::minposition() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Crane.MinPosition)
  return _internal_minposition();
}
inline void Crane::_internal_set_minposition(double value) {
  
  _impl_.minposition_ = value;
}
inline void Crane::set_minposition(double value) {
  _internal_set_minposition(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Crane.MinPosition)
}

// double MaxPosition = 8;
inline void Crane::clear_maxposition() {
  _impl_.maxposition_ = 0;
}
inline double Crane::_internal_maxposition() const {
  return _impl_.maxposition_;
}
inline double Crane::maxposition() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Crane.MaxPosition)
  return _internal_maxposition();
}
inline void Crane::_internal_set_maxposition(double value) {
  
  _impl_.maxposition_ = value;
}
inline void Crane::set_maxposition(double value) {
  _internal_set_maxposition(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Crane.MaxPosition)
}

// -------------------------------------------------------------------

// CraneMove

// int32 Id = 1;
inline void CraneMove::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t CraneMove::_internal_id() const {
  return _impl_.id_;
}
inline int32_t CraneMove::id() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneMove.Id)
  return _internal_id();
}
inline void CraneMove::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void CraneMove::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneMove.Id)
}

// .DynStacking.CraneScheduling.DataModel.MoveType Type = 2;
inline void CraneMove::clear_type() {
  _impl_.type_ = 0;
}
inline ::DynStacking::CraneScheduling::DataModel::MoveType CraneMove::_internal_type() const {
  return static_cast< ::DynStacking::CraneScheduling::DataModel::MoveType >(_impl_.type_);
}
inline ::DynStacking::CraneScheduling::DataModel::MoveType CraneMove::type() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneMove.Type)
  return _internal_type();
}
inline void CraneMove::_internal_set_type(::DynStacking::CraneScheduling::DataModel::MoveType value) {
  
  _impl_.type_ = value;
}
inline void CraneMove::set_type(::DynStacking::CraneScheduling::DataModel::MoveType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneMove.Type)
}

// int32 PickupLocationId = 3;
inline void CraneMove::clear_pickuplocationid() {
  _impl_.pickuplocationid_ = 0;
}
inline int32_t CraneMove::_internal_pickuplocationid() const {
  return _impl_.pickuplocationid_;
}
inline int32_t CraneMove::pickuplocationid() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneMove.PickupLocationId)
  return _internal_pickuplocationid();
}
inline void CraneMove::_internal_set_pickuplocationid(int32_t value) {
  
  _impl_.pickuplocationid_ = value;
}
inline void CraneMove::set_pickuplocationid(int32_t value) {
  _internal_set_pickuplocationid(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneMove.PickupLocationId)
}

// double PickupGirderPosition = 4;
inline void CraneMove::clear_pickupgirderposition() {
  _impl_.pickupgirderposition_ = 0;
}
inline double CraneMove::_internal_pickupgirderposition() const {
  return _impl_.pickupgirderposition_;
}
inline double CraneMove::pickupgirderposition() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneMove.PickupGirderPosition)
  return _internal_pickupgirderposition();
}
inline void CraneMove::_internal_set_pickupgirderposition(double value) {
  
  _impl_.pickupgirderposition_ = value;
}
inline void CraneMove::set_pickupgirderposition(double value) {
  _internal_set_pickupgirderposition(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneMove.PickupGirderPosition)
}

// int32 DropoffLocationId = 5;
inline void CraneMove::clear_dropofflocationid() {
  _impl_.dropofflocationid_ = 0;
}
inline int32_t CraneMove::_internal_dropofflocationid() const {
  return _impl_.dropofflocationid_;
}
inline int32_t CraneMove::dropofflocationid() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneMove.DropoffLocationId)
  return _internal_dropofflocationid();
}
inline void CraneMove::_internal_set_dropofflocationid(int32_t value) {
  
  _impl_.dropofflocationid_ = value;
}
inline void CraneMove::set_dropofflocationid(int32_t value) {
  _internal_set_dropofflocationid(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneMove.DropoffLocationId)
}

// double DropoffGirderPosition = 6;
inline void CraneMove::clear_dropoffgirderposition() {
  _impl_.dropoffgirderposition_ = 0;
}
inline double CraneMove::_internal_dropoffgirderposition() const {
  return _impl_.dropoffgirderposition_;
}
inline double CraneMove::dropoffgirderposition() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneMove.DropoffGirderPosition)
  return _internal_dropoffgirderposition();
}
inline void CraneMove::_internal_set_dropoffgirderposition(double value) {
  
  _impl_.dropoffgirderposition_ = value;
}
inline void CraneMove::set_dropoffgirderposition(double value) {
  _internal_set_dropoffgirderposition(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneMove.DropoffGirderPosition)
}

// int32 Amount = 7;
inline void CraneMove::clear_amount() {
  _impl_.amount_ = 0;
}
inline int32_t CraneMove::_internal_amount() const {
  return _impl_.amount_;
}
inline int32_t CraneMove::amount() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneMove.Amount)
  return _internal_amount();
}
inline void CraneMove::_internal_set_amount(int32_t value) {
  
  _impl_.amount_ = value;
}
inline void CraneMove::set_amount(int32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneMove.Amount)
}

// .DynStacking.CraneScheduling.DataModel.TimeStamp ReleaseTime = 8;
inline bool CraneMove::_internal_has_releasetime() const {
  return this != internal_default_instance() && _impl_.releasetime_ != nullptr;
}
inline bool CraneMove::has_releasetime() const {
  return _internal_has_releasetime();
}
inline void CraneMove::clear_releasetime() {
  if (GetArenaForAllocation() == nullptr && _impl_.releasetime_ != nullptr) {
    delete _impl_.releasetime_;
  }
  _impl_.releasetime_ = nullptr;
}
inline const ::DynStacking::CraneScheduling::DataModel::TimeStamp& CraneMove::_internal_releasetime() const {
  const ::DynStacking::CraneScheduling::DataModel::TimeStamp* p = _impl_.releasetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::CraneScheduling::DataModel::TimeStamp&>(
      ::DynStacking::CraneScheduling::DataModel::_TimeStamp_default_instance_);
}
inline const ::DynStacking::CraneScheduling::DataModel::TimeStamp& CraneMove::releasetime() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneMove.ReleaseTime)
  return _internal_releasetime();
}
inline void CraneMove::unsafe_arena_set_allocated_releasetime(
    ::DynStacking::CraneScheduling::DataModel::TimeStamp* releasetime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.releasetime_);
  }
  _impl_.releasetime_ = releasetime;
  if (releasetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.CraneScheduling.DataModel.CraneMove.ReleaseTime)
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* CraneMove::release_releasetime() {
  
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* temp = _impl_.releasetime_;
  _impl_.releasetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* CraneMove::unsafe_arena_release_releasetime() {
  // @@protoc_insertion_point(field_release:DynStacking.CraneScheduling.DataModel.CraneMove.ReleaseTime)
  
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* temp = _impl_.releasetime_;
  _impl_.releasetime_ = nullptr;
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* CraneMove::_internal_mutable_releasetime() {
  
  if (_impl_.releasetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::TimeStamp>(GetArenaForAllocation());
    _impl_.releasetime_ = p;
  }
  return _impl_.releasetime_;
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* CraneMove::mutable_releasetime() {
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* _msg = _internal_mutable_releasetime();
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.CraneMove.ReleaseTime)
  return _msg;
}
inline void CraneMove::set_allocated_releasetime(::DynStacking::CraneScheduling::DataModel::TimeStamp* releasetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.releasetime_;
  }
  if (releasetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(releasetime);
    if (message_arena != submessage_arena) {
      releasetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, releasetime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.releasetime_ = releasetime;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.CraneScheduling.DataModel.CraneMove.ReleaseTime)
}

// .DynStacking.CraneScheduling.DataModel.TimeStamp DueDate = 9;
inline bool CraneMove::_internal_has_duedate() const {
  return this != internal_default_instance() && _impl_.duedate_ != nullptr;
}
inline bool CraneMove::has_duedate() const {
  return _internal_has_duedate();
}
inline void CraneMove::clear_duedate() {
  if (GetArenaForAllocation() == nullptr && _impl_.duedate_ != nullptr) {
    delete _impl_.duedate_;
  }
  _impl_.duedate_ = nullptr;
}
inline const ::DynStacking::CraneScheduling::DataModel::TimeStamp& CraneMove::_internal_duedate() const {
  const ::DynStacking::CraneScheduling::DataModel::TimeStamp* p = _impl_.duedate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::CraneScheduling::DataModel::TimeStamp&>(
      ::DynStacking::CraneScheduling::DataModel::_TimeStamp_default_instance_);
}
inline const ::DynStacking::CraneScheduling::DataModel::TimeStamp& CraneMove::duedate() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneMove.DueDate)
  return _internal_duedate();
}
inline void CraneMove::unsafe_arena_set_allocated_duedate(
    ::DynStacking::CraneScheduling::DataModel::TimeStamp* duedate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duedate_);
  }
  _impl_.duedate_ = duedate;
  if (duedate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.CraneScheduling.DataModel.CraneMove.DueDate)
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* CraneMove::release_duedate() {
  
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* temp = _impl_.duedate_;
  _impl_.duedate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* CraneMove::unsafe_arena_release_duedate() {
  // @@protoc_insertion_point(field_release:DynStacking.CraneScheduling.DataModel.CraneMove.DueDate)
  
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* temp = _impl_.duedate_;
  _impl_.duedate_ = nullptr;
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* CraneMove::_internal_mutable_duedate() {
  
  if (_impl_.duedate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::TimeStamp>(GetArenaForAllocation());
    _impl_.duedate_ = p;
  }
  return _impl_.duedate_;
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* CraneMove::mutable_duedate() {
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* _msg = _internal_mutable_duedate();
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.CraneMove.DueDate)
  return _msg;
}
inline void CraneMove::set_allocated_duedate(::DynStacking::CraneScheduling::DataModel::TimeStamp* duedate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.duedate_;
  }
  if (duedate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(duedate);
    if (message_arena != submessage_arena) {
      duedate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duedate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.duedate_ = duedate;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.CraneScheduling.DataModel.CraneMove.DueDate)
}

// int32 RequiredCraneId = 10;
inline void CraneMove::clear_requiredcraneid() {
  _impl_.requiredcraneid_ = 0;
}
inline int32_t CraneMove::_internal_requiredcraneid() const {
  return _impl_.requiredcraneid_;
}
inline int32_t CraneMove::requiredcraneid() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneMove.RequiredCraneId)
  return _internal_requiredcraneid();
}
inline void CraneMove::_internal_set_requiredcraneid(int32_t value) {
  
  _impl_.requiredcraneid_ = value;
}
inline void CraneMove::set_requiredcraneid(int32_t value) {
  _internal_set_requiredcraneid(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneMove.RequiredCraneId)
}

// repeated int32 ProtobufPredecessorIds = 12 [packed = false];
inline int CraneMove::_internal_protobufpredecessorids_size() const {
  return _impl_.protobufpredecessorids_.size();
}
inline int CraneMove::protobufpredecessorids_size() const {
  return _internal_protobufpredecessorids_size();
}
inline void CraneMove::clear_protobufpredecessorids() {
  _impl_.protobufpredecessorids_.Clear();
}
inline int32_t CraneMove::_internal_protobufpredecessorids(int index) const {
  return _impl_.protobufpredecessorids_.Get(index);
}
inline int32_t CraneMove::protobufpredecessorids(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneMove.ProtobufPredecessorIds)
  return _internal_protobufpredecessorids(index);
}
inline void CraneMove::set_protobufpredecessorids(int index, int32_t value) {
  _impl_.protobufpredecessorids_.Set(index, value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneMove.ProtobufPredecessorIds)
}
inline void CraneMove::_internal_add_protobufpredecessorids(int32_t value) {
  _impl_.protobufpredecessorids_.Add(value);
}
inline void CraneMove::add_protobufpredecessorids(int32_t value) {
  _internal_add_protobufpredecessorids(value);
  // @@protoc_insertion_point(field_add:DynStacking.CraneScheduling.DataModel.CraneMove.ProtobufPredecessorIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CraneMove::_internal_protobufpredecessorids() const {
  return _impl_.protobufpredecessorids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CraneMove::protobufpredecessorids() const {
  // @@protoc_insertion_point(field_list:DynStacking.CraneScheduling.DataModel.CraneMove.ProtobufPredecessorIds)
  return _internal_protobufpredecessorids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CraneMove::_internal_mutable_protobufpredecessorids() {
  return &_impl_.protobufpredecessorids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CraneMove::mutable_protobufpredecessorids() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.CraneScheduling.DataModel.CraneMove.ProtobufPredecessorIds)
  return _internal_mutable_protobufpredecessorids();
}

// repeated int32 ProtobufMovedBlockIds = 13 [packed = false];
inline int CraneMove::_internal_protobufmovedblockids_size() const {
  return _impl_.protobufmovedblockids_.size();
}
inline int CraneMove::protobufmovedblockids_size() const {
  return _internal_protobufmovedblockids_size();
}
inline void CraneMove::clear_protobufmovedblockids() {
  _impl_.protobufmovedblockids_.Clear();
}
inline int32_t CraneMove::_internal_protobufmovedblockids(int index) const {
  return _impl_.protobufmovedblockids_.Get(index);
}
inline int32_t CraneMove::protobufmovedblockids(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneMove.ProtobufMovedBlockIds)
  return _internal_protobufmovedblockids(index);
}
inline void CraneMove::set_protobufmovedblockids(int index, int32_t value) {
  _impl_.protobufmovedblockids_.Set(index, value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneMove.ProtobufMovedBlockIds)
}
inline void CraneMove::_internal_add_protobufmovedblockids(int32_t value) {
  _impl_.protobufmovedblockids_.Add(value);
}
inline void CraneMove::add_protobufmovedblockids(int32_t value) {
  _internal_add_protobufmovedblockids(value);
  // @@protoc_insertion_point(field_add:DynStacking.CraneScheduling.DataModel.CraneMove.ProtobufMovedBlockIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CraneMove::_internal_protobufmovedblockids() const {
  return _impl_.protobufmovedblockids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CraneMove::protobufmovedblockids() const {
  // @@protoc_insertion_point(field_list:DynStacking.CraneScheduling.DataModel.CraneMove.ProtobufMovedBlockIds)
  return _internal_protobufmovedblockids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CraneMove::_internal_mutable_protobufmovedblockids() {
  return &_impl_.protobufmovedblockids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CraneMove::mutable_protobufmovedblockids() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.CraneScheduling.DataModel.CraneMove.ProtobufMovedBlockIds)
  return _internal_mutable_protobufmovedblockids();
}

// -------------------------------------------------------------------

// CraneSchedule

// int32 ScheduleNr = 1;
inline void CraneSchedule::clear_schedulenr() {
  _impl_.schedulenr_ = 0;
}
inline int32_t CraneSchedule::_internal_schedulenr() const {
  return _impl_.schedulenr_;
}
inline int32_t CraneSchedule::schedulenr() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneSchedule.ScheduleNr)
  return _internal_schedulenr();
}
inline void CraneSchedule::_internal_set_schedulenr(int32_t value) {
  
  _impl_.schedulenr_ = value;
}
inline void CraneSchedule::set_schedulenr(int32_t value) {
  _internal_set_schedulenr(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneSchedule.ScheduleNr)
}

// repeated .DynStacking.CraneScheduling.DataModel.CraneScheduleActivity Activities = 2;
inline int CraneSchedule::_internal_activities_size() const {
  return _impl_.activities_.size();
}
inline int CraneSchedule::activities_size() const {
  return _internal_activities_size();
}
inline void CraneSchedule::clear_activities() {
  _impl_.activities_.Clear();
}
inline ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity* CraneSchedule::mutable_activities(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.CraneSchedule.Activities)
  return _impl_.activities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity >*
CraneSchedule::mutable_activities() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.CraneScheduling.DataModel.CraneSchedule.Activities)
  return &_impl_.activities_;
}
inline const ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity& CraneSchedule::_internal_activities(int index) const {
  return _impl_.activities_.Get(index);
}
inline const ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity& CraneSchedule::activities(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneSchedule.Activities)
  return _internal_activities(index);
}
inline ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity* CraneSchedule::_internal_add_activities() {
  return _impl_.activities_.Add();
}
inline ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity* CraneSchedule::add_activities() {
  ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity* _add = _internal_add_activities();
  // @@protoc_insertion_point(field_add:DynStacking.CraneScheduling.DataModel.CraneSchedule.Activities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity >&
CraneSchedule::activities() const {
  // @@protoc_insertion_point(field_list:DynStacking.CraneScheduling.DataModel.CraneSchedule.Activities)
  return _impl_.activities_;
}

// -------------------------------------------------------------------

// CraneScheduleActivity

// int32 MoveId = 1;
inline void CraneScheduleActivity::clear_moveid() {
  _impl_.moveid_ = 0;
}
inline int32_t CraneScheduleActivity::_internal_moveid() const {
  return _impl_.moveid_;
}
inline int32_t CraneScheduleActivity::moveid() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity.MoveId)
  return _internal_moveid();
}
inline void CraneScheduleActivity::_internal_set_moveid(int32_t value) {
  
  _impl_.moveid_ = value;
}
inline void CraneScheduleActivity::set_moveid(int32_t value) {
  _internal_set_moveid(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity.MoveId)
}

// int32 CraneId = 2;
inline void CraneScheduleActivity::clear_craneid() {
  _impl_.craneid_ = 0;
}
inline int32_t CraneScheduleActivity::_internal_craneid() const {
  return _impl_.craneid_;
}
inline int32_t CraneScheduleActivity::craneid() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity.CraneId)
  return _internal_craneid();
}
inline void CraneScheduleActivity::_internal_set_craneid(int32_t value) {
  
  _impl_.craneid_ = value;
}
inline void CraneScheduleActivity::set_craneid(int32_t value) {
  _internal_set_craneid(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity.CraneId)
}

// int32 Priority = 3;
inline void CraneScheduleActivity::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t CraneScheduleActivity::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t CraneScheduleActivity::priority() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity.Priority)
  return _internal_priority();
}
inline void CraneScheduleActivity::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void CraneScheduleActivity::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity.Priority)
}

// .DynStacking.CraneScheduling.DataModel.CraneScheduleActivityState State = 4;
inline void CraneScheduleActivity::clear_state() {
  _impl_.state_ = 0;
}
inline ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivityState CraneScheduleActivity::_internal_state() const {
  return static_cast< ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivityState >(_impl_.state_);
}
inline ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivityState CraneScheduleActivity::state() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity.State)
  return _internal_state();
}
inline void CraneScheduleActivity::_internal_set_state(::DynStacking::CraneScheduling::DataModel::CraneScheduleActivityState value) {
  
  _impl_.state_ = value;
}
inline void CraneScheduleActivity::set_state(::DynStacking::CraneScheduling::DataModel::CraneScheduleActivityState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity.State)
}

// -------------------------------------------------------------------

// CraneSchedulingSolution

// repeated .DynStacking.CraneScheduling.DataModel.CraneMove CustomMoves = 1;
inline int CraneSchedulingSolution::_internal_custommoves_size() const {
  return _impl_.custommoves_.size();
}
inline int CraneSchedulingSolution::custommoves_size() const {
  return _internal_custommoves_size();
}
inline void CraneSchedulingSolution::clear_custommoves() {
  _impl_.custommoves_.Clear();
}
inline ::DynStacking::CraneScheduling::DataModel::CraneMove* CraneSchedulingSolution::mutable_custommoves(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution.CustomMoves)
  return _impl_.custommoves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneMove >*
CraneSchedulingSolution::mutable_custommoves() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution.CustomMoves)
  return &_impl_.custommoves_;
}
inline const ::DynStacking::CraneScheduling::DataModel::CraneMove& CraneSchedulingSolution::_internal_custommoves(int index) const {
  return _impl_.custommoves_.Get(index);
}
inline const ::DynStacking::CraneScheduling::DataModel::CraneMove& CraneSchedulingSolution::custommoves(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution.CustomMoves)
  return _internal_custommoves(index);
}
inline ::DynStacking::CraneScheduling::DataModel::CraneMove* CraneSchedulingSolution::_internal_add_custommoves() {
  return _impl_.custommoves_.Add();
}
inline ::DynStacking::CraneScheduling::DataModel::CraneMove* CraneSchedulingSolution::add_custommoves() {
  ::DynStacking::CraneScheduling::DataModel::CraneMove* _add = _internal_add_custommoves();
  // @@protoc_insertion_point(field_add:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution.CustomMoves)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneMove >&
CraneSchedulingSolution::custommoves() const {
  // @@protoc_insertion_point(field_list:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution.CustomMoves)
  return _impl_.custommoves_;
}

// .DynStacking.CraneScheduling.DataModel.CraneSchedule Schedule = 2;
inline bool CraneSchedulingSolution::_internal_has_schedule() const {
  return this != internal_default_instance() && _impl_.schedule_ != nullptr;
}
inline bool CraneSchedulingSolution::has_schedule() const {
  return _internal_has_schedule();
}
inline void CraneSchedulingSolution::clear_schedule() {
  if (GetArenaForAllocation() == nullptr && _impl_.schedule_ != nullptr) {
    delete _impl_.schedule_;
  }
  _impl_.schedule_ = nullptr;
}
inline const ::DynStacking::CraneScheduling::DataModel::CraneSchedule& CraneSchedulingSolution::_internal_schedule() const {
  const ::DynStacking::CraneScheduling::DataModel::CraneSchedule* p = _impl_.schedule_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::CraneScheduling::DataModel::CraneSchedule&>(
      ::DynStacking::CraneScheduling::DataModel::_CraneSchedule_default_instance_);
}
inline const ::DynStacking::CraneScheduling::DataModel::CraneSchedule& CraneSchedulingSolution::schedule() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution.Schedule)
  return _internal_schedule();
}
inline void CraneSchedulingSolution::unsafe_arena_set_allocated_schedule(
    ::DynStacking::CraneScheduling::DataModel::CraneSchedule* schedule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schedule_);
  }
  _impl_.schedule_ = schedule;
  if (schedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution.Schedule)
}
inline ::DynStacking::CraneScheduling::DataModel::CraneSchedule* CraneSchedulingSolution::release_schedule() {
  
  ::DynStacking::CraneScheduling::DataModel::CraneSchedule* temp = _impl_.schedule_;
  _impl_.schedule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::CraneSchedule* CraneSchedulingSolution::unsafe_arena_release_schedule() {
  // @@protoc_insertion_point(field_release:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution.Schedule)
  
  ::DynStacking::CraneScheduling::DataModel::CraneSchedule* temp = _impl_.schedule_;
  _impl_.schedule_ = nullptr;
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::CraneSchedule* CraneSchedulingSolution::_internal_mutable_schedule() {
  
  if (_impl_.schedule_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::CraneSchedule>(GetArenaForAllocation());
    _impl_.schedule_ = p;
  }
  return _impl_.schedule_;
}
inline ::DynStacking::CraneScheduling::DataModel::CraneSchedule* CraneSchedulingSolution::mutable_schedule() {
  ::DynStacking::CraneScheduling::DataModel::CraneSchedule* _msg = _internal_mutable_schedule();
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution.Schedule)
  return _msg;
}
inline void CraneSchedulingSolution::set_allocated_schedule(::DynStacking::CraneScheduling::DataModel::CraneSchedule* schedule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.schedule_;
  }
  if (schedule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schedule);
    if (message_arena != submessage_arena) {
      schedule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schedule, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.schedule_ = schedule;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution.Schedule)
}

// -------------------------------------------------------------------

// Location

// int32 Id = 1;
inline void Location::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Location::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Location::id() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Location.Id)
  return _internal_id();
}
inline void Location::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Location::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Location.Id)
}

// double GirderPosition = 2;
inline void Location::clear_girderposition() {
  _impl_.girderposition_ = 0;
}
inline double Location::_internal_girderposition() const {
  return _impl_.girderposition_;
}
inline double Location::girderposition() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Location.GirderPosition)
  return _internal_girderposition();
}
inline void Location::_internal_set_girderposition(double value) {
  
  _impl_.girderposition_ = value;
}
inline void Location::set_girderposition(double value) {
  _internal_set_girderposition(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Location.GirderPosition)
}

// int32 MaxHeight = 3;
inline void Location::clear_maxheight() {
  _impl_.maxheight_ = 0;
}
inline int32_t Location::_internal_maxheight() const {
  return _impl_.maxheight_;
}
inline int32_t Location::maxheight() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Location.MaxHeight)
  return _internal_maxheight();
}
inline void Location::_internal_set_maxheight(int32_t value) {
  
  _impl_.maxheight_ = value;
}
inline void Location::set_maxheight(int32_t value) {
  _internal_set_maxheight(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Location.MaxHeight)
}

// .DynStacking.CraneScheduling.DataModel.Stack Stack = 4;
inline bool Location::_internal_has_stack() const {
  return this != internal_default_instance() && _impl_.stack_ != nullptr;
}
inline bool Location::has_stack() const {
  return _internal_has_stack();
}
inline void Location::clear_stack() {
  if (GetArenaForAllocation() == nullptr && _impl_.stack_ != nullptr) {
    delete _impl_.stack_;
  }
  _impl_.stack_ = nullptr;
}
inline const ::DynStacking::CraneScheduling::DataModel::Stack& Location::_internal_stack() const {
  const ::DynStacking::CraneScheduling::DataModel::Stack* p = _impl_.stack_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::CraneScheduling::DataModel::Stack&>(
      ::DynStacking::CraneScheduling::DataModel::_Stack_default_instance_);
}
inline const ::DynStacking::CraneScheduling::DataModel::Stack& Location::stack() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Location.Stack)
  return _internal_stack();
}
inline void Location::unsafe_arena_set_allocated_stack(
    ::DynStacking::CraneScheduling::DataModel::Stack* stack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stack_);
  }
  _impl_.stack_ = stack;
  if (stack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.CraneScheduling.DataModel.Location.Stack)
}
inline ::DynStacking::CraneScheduling::DataModel::Stack* Location::release_stack() {
  
  ::DynStacking::CraneScheduling::DataModel::Stack* temp = _impl_.stack_;
  _impl_.stack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::Stack* Location::unsafe_arena_release_stack() {
  // @@protoc_insertion_point(field_release:DynStacking.CraneScheduling.DataModel.Location.Stack)
  
  ::DynStacking::CraneScheduling::DataModel::Stack* temp = _impl_.stack_;
  _impl_.stack_ = nullptr;
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::Stack* Location::_internal_mutable_stack() {
  
  if (_impl_.stack_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::Stack>(GetArenaForAllocation());
    _impl_.stack_ = p;
  }
  return _impl_.stack_;
}
inline ::DynStacking::CraneScheduling::DataModel::Stack* Location::mutable_stack() {
  ::DynStacking::CraneScheduling::DataModel::Stack* _msg = _internal_mutable_stack();
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.Location.Stack)
  return _msg;
}
inline void Location::set_allocated_stack(::DynStacking::CraneScheduling::DataModel::Stack* stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stack_;
  }
  if (stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stack);
    if (message_arena != submessage_arena) {
      stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stack, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stack_ = stack;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.CraneScheduling.DataModel.Location.Stack)
}

// .DynStacking.CraneScheduling.DataModel.StackTypes Type = 5;
inline void Location::clear_type() {
  _impl_.type_ = 0;
}
inline ::DynStacking::CraneScheduling::DataModel::StackTypes Location::_internal_type() const {
  return static_cast< ::DynStacking::CraneScheduling::DataModel::StackTypes >(_impl_.type_);
}
inline ::DynStacking::CraneScheduling::DataModel::StackTypes Location::type() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Location.Type)
  return _internal_type();
}
inline void Location::_internal_set_type(::DynStacking::CraneScheduling::DataModel::StackTypes value) {
  
  _impl_.type_ = value;
}
inline void Location::set_type(::DynStacking::CraneScheduling::DataModel::StackTypes value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Location.Type)
}

// int32 Class = 6;
inline void Location::clear_class_() {
  _impl_.class__ = 0;
}
inline int32_t Location::_internal_class_() const {
  return _impl_.class__;
}
inline int32_t Location::class_() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Location.Class)
  return _internal_class_();
}
inline void Location::_internal_set_class_(int32_t value) {
  
  _impl_.class__ = value;
}
inline void Location::set_class_(int32_t value) {
  _internal_set_class_(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Location.Class)
}

// -------------------------------------------------------------------

// MoveRequest

// int32 Id = 1;
inline void MoveRequest::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t MoveRequest::_internal_id() const {
  return _impl_.id_;
}
inline int32_t MoveRequest::id() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.MoveRequest.Id)
  return _internal_id();
}
inline void MoveRequest::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void MoveRequest::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.MoveRequest.Id)
}

// int32 TargetLocationId = 2;
inline void MoveRequest::clear_targetlocationid() {
  _impl_.targetlocationid_ = 0;
}
inline int32_t MoveRequest::_internal_targetlocationid() const {
  return _impl_.targetlocationid_;
}
inline int32_t MoveRequest::targetlocationid() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.MoveRequest.TargetLocationId)
  return _internal_targetlocationid();
}
inline void MoveRequest::_internal_set_targetlocationid(int32_t value) {
  
  _impl_.targetlocationid_ = value;
}
inline void MoveRequest::set_targetlocationid(int32_t value) {
  _internal_set_targetlocationid(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.MoveRequest.TargetLocationId)
}

// int32 BlockId = 3;
inline void MoveRequest::clear_blockid() {
  _impl_.blockid_ = 0;
}
inline int32_t MoveRequest::_internal_blockid() const {
  return _impl_.blockid_;
}
inline int32_t MoveRequest::blockid() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.MoveRequest.BlockId)
  return _internal_blockid();
}
inline void MoveRequest::_internal_set_blockid(int32_t value) {
  
  _impl_.blockid_ = value;
}
inline void MoveRequest::set_blockid(int32_t value) {
  _internal_set_blockid(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.MoveRequest.BlockId)
}

// .DynStacking.CraneScheduling.DataModel.TimeStamp DueDate = 4;
inline bool MoveRequest::_internal_has_duedate() const {
  return this != internal_default_instance() && _impl_.duedate_ != nullptr;
}
inline bool MoveRequest::has_duedate() const {
  return _internal_has_duedate();
}
inline void MoveRequest::clear_duedate() {
  if (GetArenaForAllocation() == nullptr && _impl_.duedate_ != nullptr) {
    delete _impl_.duedate_;
  }
  _impl_.duedate_ = nullptr;
}
inline const ::DynStacking::CraneScheduling::DataModel::TimeStamp& MoveRequest::_internal_duedate() const {
  const ::DynStacking::CraneScheduling::DataModel::TimeStamp* p = _impl_.duedate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::CraneScheduling::DataModel::TimeStamp&>(
      ::DynStacking::CraneScheduling::DataModel::_TimeStamp_default_instance_);
}
inline const ::DynStacking::CraneScheduling::DataModel::TimeStamp& MoveRequest::duedate() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.MoveRequest.DueDate)
  return _internal_duedate();
}
inline void MoveRequest::unsafe_arena_set_allocated_duedate(
    ::DynStacking::CraneScheduling::DataModel::TimeStamp* duedate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duedate_);
  }
  _impl_.duedate_ = duedate;
  if (duedate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.CraneScheduling.DataModel.MoveRequest.DueDate)
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* MoveRequest::release_duedate() {
  
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* temp = _impl_.duedate_;
  _impl_.duedate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* MoveRequest::unsafe_arena_release_duedate() {
  // @@protoc_insertion_point(field_release:DynStacking.CraneScheduling.DataModel.MoveRequest.DueDate)
  
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* temp = _impl_.duedate_;
  _impl_.duedate_ = nullptr;
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* MoveRequest::_internal_mutable_duedate() {
  
  if (_impl_.duedate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::TimeStamp>(GetArenaForAllocation());
    _impl_.duedate_ = p;
  }
  return _impl_.duedate_;
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* MoveRequest::mutable_duedate() {
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* _msg = _internal_mutable_duedate();
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.MoveRequest.DueDate)
  return _msg;
}
inline void MoveRequest::set_allocated_duedate(::DynStacking::CraneScheduling::DataModel::TimeStamp* duedate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.duedate_;
  }
  if (duedate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(duedate);
    if (message_arena != submessage_arena) {
      duedate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duedate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.duedate_ = duedate;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.CraneScheduling.DataModel.MoveRequest.DueDate)
}

// -------------------------------------------------------------------

// Performance

// int32 CraneManipulations = 1;
inline void Performance::clear_cranemanipulations() {
  _impl_.cranemanipulations_ = 0;
}
inline int32_t Performance::_internal_cranemanipulations() const {
  return _impl_.cranemanipulations_;
}
inline int32_t Performance::cranemanipulations() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.CraneManipulations)
  return _internal_cranemanipulations();
}
inline void Performance::_internal_set_cranemanipulations(int32_t value) {
  
  _impl_.cranemanipulations_ = value;
}
inline void Performance::set_cranemanipulations(int32_t value) {
  _internal_set_cranemanipulations(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.CraneManipulations)
}

// int32 UpstreamBlocks = 2;
inline void Performance::clear_upstreamblocks() {
  _impl_.upstreamblocks_ = 0;
}
inline int32_t Performance::_internal_upstreamblocks() const {
  return _impl_.upstreamblocks_;
}
inline int32_t Performance::upstreamblocks() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.UpstreamBlocks)
  return _internal_upstreamblocks();
}
inline void Performance::_internal_set_upstreamblocks(int32_t value) {
  
  _impl_.upstreamblocks_ = value;
}
inline void Performance::set_upstreamblocks(int32_t value) {
  _internal_set_upstreamblocks(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.UpstreamBlocks)
}

// int32 DownstreamBlocks = 3;
inline void Performance::clear_downstreamblocks() {
  _impl_.downstreamblocks_ = 0;
}
inline int32_t Performance::_internal_downstreamblocks() const {
  return _impl_.downstreamblocks_;
}
inline int32_t Performance::downstreamblocks() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.DownstreamBlocks)
  return _internal_downstreamblocks();
}
inline void Performance::_internal_set_downstreamblocks(int32_t value) {
  
  _impl_.downstreamblocks_ = value;
}
inline void Performance::set_downstreamblocks(int32_t value) {
  _internal_set_downstreamblocks(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.DownstreamBlocks)
}

// int32 DeliveryErrors = 4;
inline void Performance::clear_deliveryerrors() {
  _impl_.deliveryerrors_ = 0;
}
inline int32_t Performance::_internal_deliveryerrors() const {
  return _impl_.deliveryerrors_;
}
inline int32_t Performance::deliveryerrors() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.DeliveryErrors)
  return _internal_deliveryerrors();
}
inline void Performance::_internal_set_deliveryerrors(int32_t value) {
  
  _impl_.deliveryerrors_ = value;
}
inline void Performance::set_deliveryerrors(int32_t value) {
  _internal_set_deliveryerrors(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.DeliveryErrors)
}

// double TotalGirderDistance = 5;
inline void Performance::clear_totalgirderdistance() {
  _impl_.totalgirderdistance_ = 0;
}
inline double Performance::_internal_totalgirderdistance() const {
  return _impl_.totalgirderdistance_;
}
inline double Performance::totalgirderdistance() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.TotalGirderDistance)
  return _internal_totalgirderdistance();
}
inline void Performance::_internal_set_totalgirderdistance(double value) {
  
  _impl_.totalgirderdistance_ = value;
}
inline void Performance::set_totalgirderdistance(double value) {
  _internal_set_totalgirderdistance(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.TotalGirderDistance)
}

// double TotalHoistDistance = 6;
inline void Performance::clear_totalhoistdistance() {
  _impl_.totalhoistdistance_ = 0;
}
inline double Performance::_internal_totalhoistdistance() const {
  return _impl_.totalhoistdistance_;
}
inline double Performance::totalhoistdistance() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.TotalHoistDistance)
  return _internal_totalhoistdistance();
}
inline void Performance::_internal_set_totalhoistdistance(double value) {
  
  _impl_.totalhoistdistance_ = value;
}
inline void Performance::set_totalhoistdistance(double value) {
  _internal_set_totalhoistdistance(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.TotalHoistDistance)
}

// int32 ServicedUpstreamVehicles = 7;
inline void Performance::clear_servicedupstreamvehicles() {
  _impl_.servicedupstreamvehicles_ = 0;
}
inline int32_t Performance::_internal_servicedupstreamvehicles() const {
  return _impl_.servicedupstreamvehicles_;
}
inline int32_t Performance::servicedupstreamvehicles() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.ServicedUpstreamVehicles)
  return _internal_servicedupstreamvehicles();
}
inline void Performance::_internal_set_servicedupstreamvehicles(int32_t value) {
  
  _impl_.servicedupstreamvehicles_ = value;
}
inline void Performance::set_servicedupstreamvehicles(int32_t value) {
  _internal_set_servicedupstreamvehicles(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.ServicedUpstreamVehicles)
}

// int32 ServicedDownstreamVehicles = 8;
inline void Performance::clear_serviceddownstreamvehicles() {
  _impl_.serviceddownstreamvehicles_ = 0;
}
inline int32_t Performance::_internal_serviceddownstreamvehicles() const {
  return _impl_.serviceddownstreamvehicles_;
}
inline int32_t Performance::serviceddownstreamvehicles() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.ServicedDownstreamVehicles)
  return _internal_serviceddownstreamvehicles();
}
inline void Performance::_internal_set_serviceddownstreamvehicles(int32_t value) {
  
  _impl_.serviceddownstreamvehicles_ = value;
}
inline void Performance::set_serviceddownstreamvehicles(int32_t value) {
  _internal_set_serviceddownstreamvehicles(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.ServicedDownstreamVehicles)
}

// double UpstreamServiceTime = 9;
inline void Performance::clear_upstreamservicetime() {
  _impl_.upstreamservicetime_ = 0;
}
inline double Performance::_internal_upstreamservicetime() const {
  return _impl_.upstreamservicetime_;
}
inline double Performance::upstreamservicetime() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.UpstreamServiceTime)
  return _internal_upstreamservicetime();
}
inline void Performance::_internal_set_upstreamservicetime(double value) {
  
  _impl_.upstreamservicetime_ = value;
}
inline void Performance::set_upstreamservicetime(double value) {
  _internal_set_upstreamservicetime(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.UpstreamServiceTime)
}

// double DownstreamServiceTime = 10;
inline void Performance::clear_downstreamservicetime() {
  _impl_.downstreamservicetime_ = 0;
}
inline double Performance::_internal_downstreamservicetime() const {
  return _impl_.downstreamservicetime_;
}
inline double Performance::downstreamservicetime() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.DownstreamServiceTime)
  return _internal_downstreamservicetime();
}
inline void Performance::_internal_set_downstreamservicetime(double value) {
  
  _impl_.downstreamservicetime_ = value;
}
inline void Performance::set_downstreamservicetime(double value) {
  _internal_set_downstreamservicetime(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.DownstreamServiceTime)
}

// int32 ParkingUpstreamVehicles = 11;
inline void Performance::clear_parkingupstreamvehicles() {
  _impl_.parkingupstreamvehicles_ = 0;
}
inline int32_t Performance::_internal_parkingupstreamvehicles() const {
  return _impl_.parkingupstreamvehicles_;
}
inline int32_t Performance::parkingupstreamvehicles() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.ParkingUpstreamVehicles)
  return _internal_parkingupstreamvehicles();
}
inline void Performance::_internal_set_parkingupstreamvehicles(int32_t value) {
  
  _impl_.parkingupstreamvehicles_ = value;
}
inline void Performance::set_parkingupstreamvehicles(int32_t value) {
  _internal_set_parkingupstreamvehicles(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.ParkingUpstreamVehicles)
}

// int32 ParkingDownstreamVehicles = 12;
inline void Performance::clear_parkingdownstreamvehicles() {
  _impl_.parkingdownstreamvehicles_ = 0;
}
inline int32_t Performance::_internal_parkingdownstreamvehicles() const {
  return _impl_.parkingdownstreamvehicles_;
}
inline int32_t Performance::parkingdownstreamvehicles() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.ParkingDownstreamVehicles)
  return _internal_parkingdownstreamvehicles();
}
inline void Performance::_internal_set_parkingdownstreamvehicles(int32_t value) {
  
  _impl_.parkingdownstreamvehicles_ = value;
}
inline void Performance::set_parkingdownstreamvehicles(int32_t value) {
  _internal_set_parkingdownstreamvehicles(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.ParkingDownstreamVehicles)
}

// double UpstreamParkingTime = 13;
inline void Performance::clear_upstreamparkingtime() {
  _impl_.upstreamparkingtime_ = 0;
}
inline double Performance::_internal_upstreamparkingtime() const {
  return _impl_.upstreamparkingtime_;
}
inline double Performance::upstreamparkingtime() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.UpstreamParkingTime)
  return _internal_upstreamparkingtime();
}
inline void Performance::_internal_set_upstreamparkingtime(double value) {
  
  _impl_.upstreamparkingtime_ = value;
}
inline void Performance::set_upstreamparkingtime(double value) {
  _internal_set_upstreamparkingtime(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.UpstreamParkingTime)
}

// double DownstreamParkingTime = 14;
inline void Performance::clear_downstreamparkingtime() {
  _impl_.downstreamparkingtime_ = 0;
}
inline double Performance::_internal_downstreamparkingtime() const {
  return _impl_.downstreamparkingtime_;
}
inline double Performance::downstreamparkingtime() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.DownstreamParkingTime)
  return _internal_downstreamparkingtime();
}
inline void Performance::_internal_set_downstreamparkingtime(double value) {
  
  _impl_.downstreamparkingtime_ = value;
}
inline void Performance::set_downstreamparkingtime(double value) {
  _internal_set_downstreamparkingtime(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.DownstreamParkingTime)
}

// double MaxParkingDuration = 15;
inline void Performance::clear_maxparkingduration() {
  _impl_.maxparkingduration_ = 0;
}
inline double Performance::_internal_maxparkingduration() const {
  return _impl_.maxparkingduration_;
}
inline double Performance::maxparkingduration() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Performance.MaxParkingDuration)
  return _internal_maxparkingduration();
}
inline void Performance::_internal_set_maxparkingduration(double value) {
  
  _impl_.maxparkingduration_ = value;
}
inline void Performance::set_maxparkingduration(double value) {
  _internal_set_maxparkingduration(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.Performance.MaxParkingDuration)
}

// -------------------------------------------------------------------

// Stack

// repeated .DynStacking.CraneScheduling.DataModel.Block BottomToTop = 1;
inline int Stack::_internal_bottomtotop_size() const {
  return _impl_.bottomtotop_.size();
}
inline int Stack::bottomtotop_size() const {
  return _internal_bottomtotop_size();
}
inline void Stack::clear_bottomtotop() {
  _impl_.bottomtotop_.Clear();
}
inline ::DynStacking::CraneScheduling::DataModel::Block* Stack::mutable_bottomtotop(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.Stack.BottomToTop)
  return _impl_.bottomtotop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Block >*
Stack::mutable_bottomtotop() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.CraneScheduling.DataModel.Stack.BottomToTop)
  return &_impl_.bottomtotop_;
}
inline const ::DynStacking::CraneScheduling::DataModel::Block& Stack::_internal_bottomtotop(int index) const {
  return _impl_.bottomtotop_.Get(index);
}
inline const ::DynStacking::CraneScheduling::DataModel::Block& Stack::bottomtotop(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.Stack.BottomToTop)
  return _internal_bottomtotop(index);
}
inline ::DynStacking::CraneScheduling::DataModel::Block* Stack::_internal_add_bottomtotop() {
  return _impl_.bottomtotop_.Add();
}
inline ::DynStacking::CraneScheduling::DataModel::Block* Stack::add_bottomtotop() {
  ::DynStacking::CraneScheduling::DataModel::Block* _add = _internal_add_bottomtotop();
  // @@protoc_insertion_point(field_add:DynStacking.CraneScheduling.DataModel.Stack.BottomToTop)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Block >&
Stack::bottomtotop() const {
  // @@protoc_insertion_point(field_list:DynStacking.CraneScheduling.DataModel.Stack.BottomToTop)
  return _impl_.bottomtotop_;
}

// -------------------------------------------------------------------

// TimeStamp

// int64 MilliSeconds = 1;
inline void TimeStamp::clear_milliseconds() {
  _impl_.milliseconds_ = int64_t{0};
}
inline int64_t TimeStamp::_internal_milliseconds() const {
  return _impl_.milliseconds_;
}
inline int64_t TimeStamp::milliseconds() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.TimeStamp.MilliSeconds)
  return _internal_milliseconds();
}
inline void TimeStamp::_internal_set_milliseconds(int64_t value) {
  
  _impl_.milliseconds_ = value;
}
inline void TimeStamp::set_milliseconds(int64_t value) {
  _internal_set_milliseconds(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.TimeStamp.MilliSeconds)
}

// -------------------------------------------------------------------

// World

// .DynStacking.CraneScheduling.DataModel.TimeStamp Now = 1;
inline bool World::_internal_has_now() const {
  return this != internal_default_instance() && _impl_.now_ != nullptr;
}
inline bool World::has_now() const {
  return _internal_has_now();
}
inline void World::clear_now() {
  if (GetArenaForAllocation() == nullptr && _impl_.now_ != nullptr) {
    delete _impl_.now_;
  }
  _impl_.now_ = nullptr;
}
inline const ::DynStacking::CraneScheduling::DataModel::TimeStamp& World::_internal_now() const {
  const ::DynStacking::CraneScheduling::DataModel::TimeStamp* p = _impl_.now_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::CraneScheduling::DataModel::TimeStamp&>(
      ::DynStacking::CraneScheduling::DataModel::_TimeStamp_default_instance_);
}
inline const ::DynStacking::CraneScheduling::DataModel::TimeStamp& World::now() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.World.Now)
  return _internal_now();
}
inline void World::unsafe_arena_set_allocated_now(
    ::DynStacking::CraneScheduling::DataModel::TimeStamp* now) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.now_);
  }
  _impl_.now_ = now;
  if (now) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.CraneScheduling.DataModel.World.Now)
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* World::release_now() {
  
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* temp = _impl_.now_;
  _impl_.now_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* World::unsafe_arena_release_now() {
  // @@protoc_insertion_point(field_release:DynStacking.CraneScheduling.DataModel.World.Now)
  
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* temp = _impl_.now_;
  _impl_.now_ = nullptr;
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* World::_internal_mutable_now() {
  
  if (_impl_.now_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::TimeStamp>(GetArenaForAllocation());
    _impl_.now_ = p;
  }
  return _impl_.now_;
}
inline ::DynStacking::CraneScheduling::DataModel::TimeStamp* World::mutable_now() {
  ::DynStacking::CraneScheduling::DataModel::TimeStamp* _msg = _internal_mutable_now();
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.World.Now)
  return _msg;
}
inline void World::set_allocated_now(::DynStacking::CraneScheduling::DataModel::TimeStamp* now) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.now_;
  }
  if (now) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(now);
    if (message_arena != submessage_arena) {
      now = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, now, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.now_ = now;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.CraneScheduling.DataModel.World.Now)
}

// int32 Height = 2;
inline void World::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t World::_internal_height() const {
  return _impl_.height_;
}
inline int32_t World::height() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.World.Height)
  return _internal_height();
}
inline void World::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void World::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.World.Height)
}

// double Width = 3;
inline void World::clear_width() {
  _impl_.width_ = 0;
}
inline double World::_internal_width() const {
  return _impl_.width_;
}
inline double World::width() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.World.Width)
  return _internal_width();
}
inline void World::_internal_set_width(double value) {
  
  _impl_.width_ = value;
}
inline void World::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:DynStacking.CraneScheduling.DataModel.World.Width)
}

// repeated .DynStacking.CraneScheduling.DataModel.Location Locations = 4;
inline int World::_internal_locations_size() const {
  return _impl_.locations_.size();
}
inline int World::locations_size() const {
  return _internal_locations_size();
}
inline void World::clear_locations() {
  _impl_.locations_.Clear();
}
inline ::DynStacking::CraneScheduling::DataModel::Location* World::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.World.Locations)
  return _impl_.locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Location >*
World::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.CraneScheduling.DataModel.World.Locations)
  return &_impl_.locations_;
}
inline const ::DynStacking::CraneScheduling::DataModel::Location& World::_internal_locations(int index) const {
  return _impl_.locations_.Get(index);
}
inline const ::DynStacking::CraneScheduling::DataModel::Location& World::locations(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.World.Locations)
  return _internal_locations(index);
}
inline ::DynStacking::CraneScheduling::DataModel::Location* World::_internal_add_locations() {
  return _impl_.locations_.Add();
}
inline ::DynStacking::CraneScheduling::DataModel::Location* World::add_locations() {
  ::DynStacking::CraneScheduling::DataModel::Location* _add = _internal_add_locations();
  // @@protoc_insertion_point(field_add:DynStacking.CraneScheduling.DataModel.World.Locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Location >&
World::locations() const {
  // @@protoc_insertion_point(field_list:DynStacking.CraneScheduling.DataModel.World.Locations)
  return _impl_.locations_;
}

// repeated .DynStacking.CraneScheduling.DataModel.CraneMove CraneMoves = 5;
inline int World::_internal_cranemoves_size() const {
  return _impl_.cranemoves_.size();
}
inline int World::cranemoves_size() const {
  return _internal_cranemoves_size();
}
inline void World::clear_cranemoves() {
  _impl_.cranemoves_.Clear();
}
inline ::DynStacking::CraneScheduling::DataModel::CraneMove* World::mutable_cranemoves(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.World.CraneMoves)
  return _impl_.cranemoves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneMove >*
World::mutable_cranemoves() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.CraneScheduling.DataModel.World.CraneMoves)
  return &_impl_.cranemoves_;
}
inline const ::DynStacking::CraneScheduling::DataModel::CraneMove& World::_internal_cranemoves(int index) const {
  return _impl_.cranemoves_.Get(index);
}
inline const ::DynStacking::CraneScheduling::DataModel::CraneMove& World::cranemoves(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.World.CraneMoves)
  return _internal_cranemoves(index);
}
inline ::DynStacking::CraneScheduling::DataModel::CraneMove* World::_internal_add_cranemoves() {
  return _impl_.cranemoves_.Add();
}
inline ::DynStacking::CraneScheduling::DataModel::CraneMove* World::add_cranemoves() {
  ::DynStacking::CraneScheduling::DataModel::CraneMove* _add = _internal_add_cranemoves();
  // @@protoc_insertion_point(field_add:DynStacking.CraneScheduling.DataModel.World.CraneMoves)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::CraneMove >&
World::cranemoves() const {
  // @@protoc_insertion_point(field_list:DynStacking.CraneScheduling.DataModel.World.CraneMoves)
  return _impl_.cranemoves_;
}

// repeated .DynStacking.CraneScheduling.DataModel.Crane Cranes = 6;
inline int World::_internal_cranes_size() const {
  return _impl_.cranes_.size();
}
inline int World::cranes_size() const {
  return _internal_cranes_size();
}
inline void World::clear_cranes() {
  _impl_.cranes_.Clear();
}
inline ::DynStacking::CraneScheduling::DataModel::Crane* World::mutable_cranes(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.World.Cranes)
  return _impl_.cranes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Crane >*
World::mutable_cranes() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.CraneScheduling.DataModel.World.Cranes)
  return &_impl_.cranes_;
}
inline const ::DynStacking::CraneScheduling::DataModel::Crane& World::_internal_cranes(int index) const {
  return _impl_.cranes_.Get(index);
}
inline const ::DynStacking::CraneScheduling::DataModel::Crane& World::cranes(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.World.Cranes)
  return _internal_cranes(index);
}
inline ::DynStacking::CraneScheduling::DataModel::Crane* World::_internal_add_cranes() {
  return _impl_.cranes_.Add();
}
inline ::DynStacking::CraneScheduling::DataModel::Crane* World::add_cranes() {
  ::DynStacking::CraneScheduling::DataModel::Crane* _add = _internal_add_cranes();
  // @@protoc_insertion_point(field_add:DynStacking.CraneScheduling.DataModel.World.Cranes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::Crane >&
World::cranes() const {
  // @@protoc_insertion_point(field_list:DynStacking.CraneScheduling.DataModel.World.Cranes)
  return _impl_.cranes_;
}

// repeated .DynStacking.CraneScheduling.DataModel.MoveRequest MoveRequests = 7;
inline int World::_internal_moverequests_size() const {
  return _impl_.moverequests_.size();
}
inline int World::moverequests_size() const {
  return _internal_moverequests_size();
}
inline void World::clear_moverequests() {
  _impl_.moverequests_.Clear();
}
inline ::DynStacking::CraneScheduling::DataModel::MoveRequest* World::mutable_moverequests(int index) {
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.World.MoveRequests)
  return _impl_.moverequests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::MoveRequest >*
World::mutable_moverequests() {
  // @@protoc_insertion_point(field_mutable_list:DynStacking.CraneScheduling.DataModel.World.MoveRequests)
  return &_impl_.moverequests_;
}
inline const ::DynStacking::CraneScheduling::DataModel::MoveRequest& World::_internal_moverequests(int index) const {
  return _impl_.moverequests_.Get(index);
}
inline const ::DynStacking::CraneScheduling::DataModel::MoveRequest& World::moverequests(int index) const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.World.MoveRequests)
  return _internal_moverequests(index);
}
inline ::DynStacking::CraneScheduling::DataModel::MoveRequest* World::_internal_add_moverequests() {
  return _impl_.moverequests_.Add();
}
inline ::DynStacking::CraneScheduling::DataModel::MoveRequest* World::add_moverequests() {
  ::DynStacking::CraneScheduling::DataModel::MoveRequest* _add = _internal_add_moverequests();
  // @@protoc_insertion_point(field_add:DynStacking.CraneScheduling.DataModel.World.MoveRequests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DynStacking::CraneScheduling::DataModel::MoveRequest >&
World::moverequests() const {
  // @@protoc_insertion_point(field_list:DynStacking.CraneScheduling.DataModel.World.MoveRequests)
  return _impl_.moverequests_;
}

// .DynStacking.CraneScheduling.DataModel.CraneSchedule CraneSchedule = 8;
inline bool World::_internal_has_craneschedule() const {
  return this != internal_default_instance() && _impl_.craneschedule_ != nullptr;
}
inline bool World::has_craneschedule() const {
  return _internal_has_craneschedule();
}
inline void World::clear_craneschedule() {
  if (GetArenaForAllocation() == nullptr && _impl_.craneschedule_ != nullptr) {
    delete _impl_.craneschedule_;
  }
  _impl_.craneschedule_ = nullptr;
}
inline const ::DynStacking::CraneScheduling::DataModel::CraneSchedule& World::_internal_craneschedule() const {
  const ::DynStacking::CraneScheduling::DataModel::CraneSchedule* p = _impl_.craneschedule_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::CraneScheduling::DataModel::CraneSchedule&>(
      ::DynStacking::CraneScheduling::DataModel::_CraneSchedule_default_instance_);
}
inline const ::DynStacking::CraneScheduling::DataModel::CraneSchedule& World::craneschedule() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.World.CraneSchedule)
  return _internal_craneschedule();
}
inline void World::unsafe_arena_set_allocated_craneschedule(
    ::DynStacking::CraneScheduling::DataModel::CraneSchedule* craneschedule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.craneschedule_);
  }
  _impl_.craneschedule_ = craneschedule;
  if (craneschedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.CraneScheduling.DataModel.World.CraneSchedule)
}
inline ::DynStacking::CraneScheduling::DataModel::CraneSchedule* World::release_craneschedule() {
  
  ::DynStacking::CraneScheduling::DataModel::CraneSchedule* temp = _impl_.craneschedule_;
  _impl_.craneschedule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::CraneSchedule* World::unsafe_arena_release_craneschedule() {
  // @@protoc_insertion_point(field_release:DynStacking.CraneScheduling.DataModel.World.CraneSchedule)
  
  ::DynStacking::CraneScheduling::DataModel::CraneSchedule* temp = _impl_.craneschedule_;
  _impl_.craneschedule_ = nullptr;
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::CraneSchedule* World::_internal_mutable_craneschedule() {
  
  if (_impl_.craneschedule_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::CraneSchedule>(GetArenaForAllocation());
    _impl_.craneschedule_ = p;
  }
  return _impl_.craneschedule_;
}
inline ::DynStacking::CraneScheduling::DataModel::CraneSchedule* World::mutable_craneschedule() {
  ::DynStacking::CraneScheduling::DataModel::CraneSchedule* _msg = _internal_mutable_craneschedule();
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.World.CraneSchedule)
  return _msg;
}
inline void World::set_allocated_craneschedule(::DynStacking::CraneScheduling::DataModel::CraneSchedule* craneschedule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.craneschedule_;
  }
  if (craneschedule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(craneschedule);
    if (message_arena != submessage_arena) {
      craneschedule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, craneschedule, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.craneschedule_ = craneschedule;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.CraneScheduling.DataModel.World.CraneSchedule)
}

// .DynStacking.CraneScheduling.DataModel.Performance KPIs = 9;
inline bool World::_internal_has_kpis() const {
  return this != internal_default_instance() && _impl_.kpis_ != nullptr;
}
inline bool World::has_kpis() const {
  return _internal_has_kpis();
}
inline void World::clear_kpis() {
  if (GetArenaForAllocation() == nullptr && _impl_.kpis_ != nullptr) {
    delete _impl_.kpis_;
  }
  _impl_.kpis_ = nullptr;
}
inline const ::DynStacking::CraneScheduling::DataModel::Performance& World::_internal_kpis() const {
  const ::DynStacking::CraneScheduling::DataModel::Performance* p = _impl_.kpis_;
  return p != nullptr ? *p : reinterpret_cast<const ::DynStacking::CraneScheduling::DataModel::Performance&>(
      ::DynStacking::CraneScheduling::DataModel::_Performance_default_instance_);
}
inline const ::DynStacking::CraneScheduling::DataModel::Performance& World::kpis() const {
  // @@protoc_insertion_point(field_get:DynStacking.CraneScheduling.DataModel.World.KPIs)
  return _internal_kpis();
}
inline void World::unsafe_arena_set_allocated_kpis(
    ::DynStacking::CraneScheduling::DataModel::Performance* kpis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kpis_);
  }
  _impl_.kpis_ = kpis;
  if (kpis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DynStacking.CraneScheduling.DataModel.World.KPIs)
}
inline ::DynStacking::CraneScheduling::DataModel::Performance* World::release_kpis() {
  
  ::DynStacking::CraneScheduling::DataModel::Performance* temp = _impl_.kpis_;
  _impl_.kpis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::Performance* World::unsafe_arena_release_kpis() {
  // @@protoc_insertion_point(field_release:DynStacking.CraneScheduling.DataModel.World.KPIs)
  
  ::DynStacking::CraneScheduling::DataModel::Performance* temp = _impl_.kpis_;
  _impl_.kpis_ = nullptr;
  return temp;
}
inline ::DynStacking::CraneScheduling::DataModel::Performance* World::_internal_mutable_kpis() {
  
  if (_impl_.kpis_ == nullptr) {
    auto* p = CreateMaybeMessage<::DynStacking::CraneScheduling::DataModel::Performance>(GetArenaForAllocation());
    _impl_.kpis_ = p;
  }
  return _impl_.kpis_;
}
inline ::DynStacking::CraneScheduling::DataModel::Performance* World::mutable_kpis() {
  ::DynStacking::CraneScheduling::DataModel::Performance* _msg = _internal_mutable_kpis();
  // @@protoc_insertion_point(field_mutable:DynStacking.CraneScheduling.DataModel.World.KPIs)
  return _msg;
}
inline void World::set_allocated_kpis(::DynStacking::CraneScheduling::DataModel::Performance* kpis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kpis_;
  }
  if (kpis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kpis);
    if (message_arena != submessage_arena) {
      kpis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kpis, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kpis_ = kpis;
  // @@protoc_insertion_point(field_set_allocated:DynStacking.CraneScheduling.DataModel.World.KPIs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataModel
}  // namespace CraneScheduling
}  // namespace DynStacking

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivityState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivityState>() {
  return ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivityState_descriptor();
}
template <> struct is_proto_enum< ::DynStacking::CraneScheduling::DataModel::MoveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DynStacking::CraneScheduling::DataModel::MoveType>() {
  return ::DynStacking::CraneScheduling::DataModel::MoveType_descriptor();
}
template <> struct is_proto_enum< ::DynStacking::CraneScheduling::DataModel::StackTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DynStacking::CraneScheduling::DataModel::StackTypes>() {
  return ::DynStacking::CraneScheduling::DataModel::StackTypes_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cranescheduling_5fmodel_2eproto
