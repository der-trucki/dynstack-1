// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cranescheduling_model.proto

#include "cranescheduling_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DynStacking {
namespace CraneScheduling {
namespace DataModel {
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.class__)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
PROTOBUF_CONSTEXPR Crane::Crane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.load_)*/nullptr
  , /*decltype(_impl_.girderposition_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.cranecapacity_)*/0
  , /*decltype(_impl_.hoistlevel_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.minposition_)*/0
  , /*decltype(_impl_.maxposition_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CraneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CraneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CraneDefaultTypeInternal() {}
  union {
    Crane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CraneDefaultTypeInternal _Crane_default_instance_;
PROTOBUF_CONSTEXPR CraneMove::CraneMove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.protobufpredecessorids_)*/{}
  , /*decltype(_impl_.protobufmovedblockids_)*/{}
  , /*decltype(_impl_.releasetime_)*/nullptr
  , /*decltype(_impl_.duedate_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.pickupgirderposition_)*/0
  , /*decltype(_impl_.pickuplocationid_)*/0
  , /*decltype(_impl_.dropofflocationid_)*/0
  , /*decltype(_impl_.dropoffgirderposition_)*/0
  , /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_.requiredcraneid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CraneMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CraneMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CraneMoveDefaultTypeInternal() {}
  union {
    CraneMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CraneMoveDefaultTypeInternal _CraneMove_default_instance_;
PROTOBUF_CONSTEXPR CraneSchedule::CraneSchedule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.activities_)*/{}
  , /*decltype(_impl_.schedulenr_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CraneScheduleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CraneScheduleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CraneScheduleDefaultTypeInternal() {}
  union {
    CraneSchedule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CraneScheduleDefaultTypeInternal _CraneSchedule_default_instance_;
PROTOBUF_CONSTEXPR CraneScheduleActivity::CraneScheduleActivity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.moveid_)*/0
  , /*decltype(_impl_.craneid_)*/0
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CraneScheduleActivityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CraneScheduleActivityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CraneScheduleActivityDefaultTypeInternal() {}
  union {
    CraneScheduleActivity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CraneScheduleActivityDefaultTypeInternal _CraneScheduleActivity_default_instance_;
PROTOBUF_CONSTEXPR CraneSchedulingSolution::CraneSchedulingSolution(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.custommoves_)*/{}
  , /*decltype(_impl_.schedule_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CraneSchedulingSolutionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CraneSchedulingSolutionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CraneSchedulingSolutionDefaultTypeInternal() {}
  union {
    CraneSchedulingSolution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CraneSchedulingSolutionDefaultTypeInternal _CraneSchedulingSolution_default_instance_;
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stack_)*/nullptr
  , /*decltype(_impl_.girderposition_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.maxheight_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.class__)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
PROTOBUF_CONSTEXPR MoveRequest::MoveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.duedate_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.targetlocationid_)*/0
  , /*decltype(_impl_.blockid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveRequestDefaultTypeInternal() {}
  union {
    MoveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
PROTOBUF_CONSTEXPR Performance::Performance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cranemanipulations_)*/0
  , /*decltype(_impl_.upstreamblocks_)*/0
  , /*decltype(_impl_.downstreamblocks_)*/0
  , /*decltype(_impl_.deliveryerrors_)*/0
  , /*decltype(_impl_.totalgirderdistance_)*/0
  , /*decltype(_impl_.totalhoistdistance_)*/0
  , /*decltype(_impl_.servicedupstreamvehicles_)*/0
  , /*decltype(_impl_.serviceddownstreamvehicles_)*/0
  , /*decltype(_impl_.upstreamservicetime_)*/0
  , /*decltype(_impl_.downstreamservicetime_)*/0
  , /*decltype(_impl_.parkingupstreamvehicles_)*/0
  , /*decltype(_impl_.parkingdownstreamvehicles_)*/0
  , /*decltype(_impl_.upstreamparkingtime_)*/0
  , /*decltype(_impl_.downstreamparkingtime_)*/0
  , /*decltype(_impl_.maxparkingduration_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerformanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerformanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerformanceDefaultTypeInternal() {}
  union {
    Performance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerformanceDefaultTypeInternal _Performance_default_instance_;
PROTOBUF_CONSTEXPR Stack::Stack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bottomtotop_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StackDefaultTypeInternal() {}
  union {
    Stack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StackDefaultTypeInternal _Stack_default_instance_;
PROTOBUF_CONSTEXPR TimeStamp::TimeStamp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.milliseconds_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeStampDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeStampDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeStampDefaultTypeInternal() {}
  union {
    TimeStamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeStampDefaultTypeInternal _TimeStamp_default_instance_;
PROTOBUF_CONSTEXPR World::World(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.locations_)*/{}
  , /*decltype(_impl_.cranemoves_)*/{}
  , /*decltype(_impl_.cranes_)*/{}
  , /*decltype(_impl_.moverequests_)*/{}
  , /*decltype(_impl_.now_)*/nullptr
  , /*decltype(_impl_.craneschedule_)*/nullptr
  , /*decltype(_impl_.kpis_)*/nullptr
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldDefaultTypeInternal() {}
  union {
    World _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldDefaultTypeInternal _World_default_instance_;
}  // namespace DataModel
}  // namespace CraneScheduling
}  // namespace DynStacking
static ::_pb::Metadata file_level_metadata_cranescheduling_5fmodel_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cranescheduling_5fmodel_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cranescheduling_5fmodel_2eproto = nullptr;

const uint32_t TableStruct_cranescheduling_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Block, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Block, _impl_.class__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Crane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Crane, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Crane, _impl_.load_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Crane, _impl_.girderposition_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Crane, _impl_.hoistlevel_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Crane, _impl_.cranecapacity_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Crane, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Crane, _impl_.minposition_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Crane, _impl_.maxposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneMove, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneMove, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneMove, _impl_.pickuplocationid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneMove, _impl_.pickupgirderposition_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneMove, _impl_.dropofflocationid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneMove, _impl_.dropoffgirderposition_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneMove, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneMove, _impl_.releasetime_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneMove, _impl_.duedate_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneMove, _impl_.requiredcraneid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneMove, _impl_.protobufpredecessorids_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneMove, _impl_.protobufmovedblockids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneSchedule, _impl_.schedulenr_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneSchedule, _impl_.activities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity, _impl_.moveid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity, _impl_.craneid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneSchedulingSolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneSchedulingSolution, _impl_.custommoves_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::CraneSchedulingSolution, _impl_.schedule_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Location, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Location, _impl_.girderposition_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Location, _impl_.maxheight_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Location, _impl_.stack_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Location, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Location, _impl_.class__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::MoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::MoveRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::MoveRequest, _impl_.targetlocationid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::MoveRequest, _impl_.blockid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::MoveRequest, _impl_.duedate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.cranemanipulations_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.upstreamblocks_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.downstreamblocks_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.deliveryerrors_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.totalgirderdistance_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.totalhoistdistance_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.servicedupstreamvehicles_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.serviceddownstreamvehicles_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.upstreamservicetime_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.downstreamservicetime_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.parkingupstreamvehicles_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.parkingdownstreamvehicles_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.upstreamparkingtime_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.downstreamparkingtime_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Performance, _impl_.maxparkingduration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Stack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::Stack, _impl_.bottomtotop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::TimeStamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::TimeStamp, _impl_.milliseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::World, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::World, _impl_.now_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::World, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::World, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::World, _impl_.locations_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::World, _impl_.cranemoves_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::World, _impl_.cranes_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::World, _impl_.moverequests_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::World, _impl_.craneschedule_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::CraneScheduling::DataModel::World, _impl_.kpis_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DynStacking::CraneScheduling::DataModel::Block)},
  { 8, -1, -1, sizeof(::DynStacking::CraneScheduling::DataModel::Crane)},
  { 22, -1, -1, sizeof(::DynStacking::CraneScheduling::DataModel::CraneMove)},
  { 40, -1, -1, sizeof(::DynStacking::CraneScheduling::DataModel::CraneSchedule)},
  { 48, -1, -1, sizeof(::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity)},
  { 58, -1, -1, sizeof(::DynStacking::CraneScheduling::DataModel::CraneSchedulingSolution)},
  { 66, -1, -1, sizeof(::DynStacking::CraneScheduling::DataModel::Location)},
  { 78, -1, -1, sizeof(::DynStacking::CraneScheduling::DataModel::MoveRequest)},
  { 88, -1, -1, sizeof(::DynStacking::CraneScheduling::DataModel::Performance)},
  { 109, -1, -1, sizeof(::DynStacking::CraneScheduling::DataModel::Stack)},
  { 116, -1, -1, sizeof(::DynStacking::CraneScheduling::DataModel::TimeStamp)},
  { 123, -1, -1, sizeof(::DynStacking::CraneScheduling::DataModel::World)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DynStacking::CraneScheduling::DataModel::_Block_default_instance_._instance,
  &::DynStacking::CraneScheduling::DataModel::_Crane_default_instance_._instance,
  &::DynStacking::CraneScheduling::DataModel::_CraneMove_default_instance_._instance,
  &::DynStacking::CraneScheduling::DataModel::_CraneSchedule_default_instance_._instance,
  &::DynStacking::CraneScheduling::DataModel::_CraneScheduleActivity_default_instance_._instance,
  &::DynStacking::CraneScheduling::DataModel::_CraneSchedulingSolution_default_instance_._instance,
  &::DynStacking::CraneScheduling::DataModel::_Location_default_instance_._instance,
  &::DynStacking::CraneScheduling::DataModel::_MoveRequest_default_instance_._instance,
  &::DynStacking::CraneScheduling::DataModel::_Performance_default_instance_._instance,
  &::DynStacking::CraneScheduling::DataModel::_Stack_default_instance_._instance,
  &::DynStacking::CraneScheduling::DataModel::_TimeStamp_default_instance_._instance,
  &::DynStacking::CraneScheduling::DataModel::_World_default_instance_._instance,
};

const char descriptor_table_protodef_cranescheduling_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033cranescheduling_model.proto\022%DynStacki"
  "ng.CraneScheduling.DataModel\"\"\n\005Block\022\n\n"
  "\002Id\030\001 \001(\005\022\r\n\005Class\030\002 \001(\005\"\313\001\n\005Crane\022\n\n\002Id"
  "\030\001 \001(\005\022:\n\004Load\030\002 \001(\0132,.DynStacking.Crane"
  "Scheduling.DataModel.Stack\022\026\n\016GirderPosi"
  "tion\030\003 \001(\001\022\022\n\nHoistLevel\030\004 \001(\001\022\025\n\rCraneC"
  "apacity\030\005 \001(\005\022\r\n\005Width\030\006 \001(\001\022\023\n\013MinPosit"
  "ion\030\007 \001(\001\022\023\n\013MaxPosition\030\010 \001(\001\"\302\003\n\tCrane"
  "Move\022\n\n\002Id\030\001 \001(\005\022=\n\004Type\030\002 \001(\0162/.DynStac"
  "king.CraneScheduling.DataModel.MoveType\022"
  "\030\n\020PickupLocationId\030\003 \001(\005\022\034\n\024PickupGirde"
  "rPosition\030\004 \001(\001\022\031\n\021DropoffLocationId\030\005 \001"
  "(\005\022\035\n\025DropoffGirderPosition\030\006 \001(\001\022\016\n\006Amo"
  "unt\030\007 \001(\005\022E\n\013ReleaseTime\030\010 \001(\01320.DynStac"
  "king.CraneScheduling.DataModel.TimeStamp"
  "\022A\n\007DueDate\030\t \001(\01320.DynStacking.CraneSch"
  "eduling.DataModel.TimeStamp\022\027\n\017RequiredC"
  "raneId\030\n \001(\005\022\"\n\026ProtobufPredecessorIds\030\014"
  " \003(\005B\002\020\000\022!\n\025ProtobufMovedBlockIds\030\r \003(\005B"
  "\002\020\000\"u\n\rCraneSchedule\022\022\n\nScheduleNr\030\001 \001(\005"
  "\022P\n\nActivities\030\002 \003(\0132<.DynStacking.Crane"
  "Scheduling.DataModel.CraneScheduleActivi"
  "ty\"\234\001\n\025CraneScheduleActivity\022\016\n\006MoveId\030\001"
  " \001(\005\022\017\n\007CraneId\030\002 \001(\005\022\020\n\010Priority\030\003 \001(\005\022"
  "P\n\005State\030\004 \001(\0162A.DynStacking.CraneSchedu"
  "ling.DataModel.CraneScheduleActivityStat"
  "e\"\250\001\n\027CraneSchedulingSolution\022E\n\013CustomM"
  "oves\030\001 \003(\01320.DynStacking.CraneScheduling"
  ".DataModel.CraneMove\022F\n\010Schedule\030\002 \001(\01324"
  ".DynStacking.CraneScheduling.DataModel.C"
  "raneSchedule\"\316\001\n\010Location\022\n\n\002Id\030\001 \001(\005\022\026\n"
  "\016GirderPosition\030\002 \001(\001\022\021\n\tMaxHeight\030\003 \001(\005"
  "\022;\n\005Stack\030\004 \001(\0132,.DynStacking.CraneSched"
  "uling.DataModel.Stack\022\?\n\004Type\030\005 \001(\01621.Dy"
  "nStacking.CraneScheduling.DataModel.Stac"
  "kTypes\022\r\n\005Class\030\006 \001(\005\"\207\001\n\013MoveRequest\022\n\n"
  "\002Id\030\001 \001(\005\022\030\n\020TargetLocationId\030\002 \001(\005\022\017\n\007B"
  "lockId\030\003 \001(\005\022A\n\007DueDate\030\004 \001(\01320.DynStack"
  "ing.CraneScheduling.DataModel.TimeStamp\""
  "\312\003\n\013Performance\022\032\n\022CraneManipulations\030\001 "
  "\001(\005\022\026\n\016UpstreamBlocks\030\002 \001(\005\022\030\n\020Downstrea"
  "mBlocks\030\003 \001(\005\022\026\n\016DeliveryErrors\030\004 \001(\005\022\033\n"
  "\023TotalGirderDistance\030\005 \001(\001\022\032\n\022TotalHoist"
  "Distance\030\006 \001(\001\022 \n\030ServicedUpstreamVehicl"
  "es\030\007 \001(\005\022\"\n\032ServicedDownstreamVehicles\030\010"
  " \001(\005\022\033\n\023UpstreamServiceTime\030\t \001(\001\022\035\n\025Dow"
  "nstreamServiceTime\030\n \001(\001\022\037\n\027ParkingUpstr"
  "eamVehicles\030\013 \001(\005\022!\n\031ParkingDownstreamVe"
  "hicles\030\014 \001(\005\022\033\n\023UpstreamParkingTime\030\r \001("
  "\001\022\035\n\025DownstreamParkingTime\030\016 \001(\001\022\032\n\022MaxP"
  "arkingDuration\030\017 \001(\001\"J\n\005Stack\022A\n\013BottomT"
  "oTop\030\001 \003(\0132,.DynStacking.CraneScheduling"
  ".DataModel.Block\"!\n\tTimeStamp\022\024\n\014MilliSe"
  "conds\030\001 \001(\003\"\206\004\n\005World\022=\n\003Now\030\001 \001(\01320.Dyn"
  "Stacking.CraneScheduling.DataModel.TimeS"
  "tamp\022\016\n\006Height\030\002 \001(\005\022\r\n\005Width\030\003 \001(\001\022B\n\tL"
  "ocations\030\004 \003(\0132/.DynStacking.CraneSchedu"
  "ling.DataModel.Location\022D\n\nCraneMoves\030\005 "
  "\003(\01320.DynStacking.CraneScheduling.DataMo"
  "del.CraneMove\022<\n\006Cranes\030\006 \003(\0132,.DynStack"
  "ing.CraneScheduling.DataModel.Crane\022H\n\014M"
  "oveRequests\030\007 \003(\01322.DynStacking.CraneSch"
  "eduling.DataModel.MoveRequest\022K\n\rCraneSc"
  "hedule\030\010 \001(\01324.DynStacking.CraneScheduli"
  "ng.DataModel.CraneSchedule\022@\n\004KPIs\030\t \001(\013"
  "22.DynStacking.CraneScheduling.DataModel"
  ".Performance*F\n\032CraneScheduleActivitySta"
  "te\022\013\n\007Created\020\000\022\017\n\013Activatable\020\001\022\n\n\006Acti"
  "ve\020\002*2\n\010MoveType\022\020\n\014MoveToPickup\020\000\022\024\n\020Pi"
  "ckupAndDropoff\020\001*=\n\nStackTypes\022\020\n\014Arriva"
  "lStack\020\000\022\n\n\006Buffer\020\001\022\021\n\rHandoverStack\020\002b"
  "\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_cranescheduling_5fmodel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cranescheduling_5fmodel_2eproto = {
    false, false, 2847, descriptor_table_protodef_cranescheduling_5fmodel_2eproto,
    "cranescheduling_model.proto",
    &descriptor_table_cranescheduling_5fmodel_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_cranescheduling_5fmodel_2eproto::offsets,
    file_level_metadata_cranescheduling_5fmodel_2eproto, file_level_enum_descriptors_cranescheduling_5fmodel_2eproto,
    file_level_service_descriptors_cranescheduling_5fmodel_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cranescheduling_5fmodel_2eproto_getter() {
  return &descriptor_table_cranescheduling_5fmodel_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cranescheduling_5fmodel_2eproto(&descriptor_table_cranescheduling_5fmodel_2eproto);
namespace DynStacking {
namespace CraneScheduling {
namespace DataModel {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CraneScheduleActivityState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cranescheduling_5fmodel_2eproto);
  return file_level_enum_descriptors_cranescheduling_5fmodel_2eproto[0];
}
bool CraneScheduleActivityState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cranescheduling_5fmodel_2eproto);
  return file_level_enum_descriptors_cranescheduling_5fmodel_2eproto[1];
}
bool MoveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StackTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cranescheduling_5fmodel_2eproto);
  return file_level_enum_descriptors_cranescheduling_5fmodel_2eproto[2];
}
bool StackTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Block::_Internal {
 public:
};

Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.CraneScheduling.DataModel.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Block* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.class__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.class__) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.class__));
  // @@protoc_insertion_point(copy_constructor:DynStacking.CraneScheduling.DataModel.Block)
}

inline void Block::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.class__){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:DynStacking.CraneScheduling.DataModel.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Block::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.CraneScheduling.DataModel.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.class__) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.class__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.class__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.CraneScheduling.DataModel.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 Class = 2;
  if (this->_internal_class_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_class_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.CraneScheduling.DataModel.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.CraneScheduling.DataModel.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 Class = 2;
  if (this->_internal_class_() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_class_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }


void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Block*>(&to_msg);
  auto& from = static_cast<const Block&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.CraneScheduling.DataModel.Block)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_class_() != 0) {
    _this->_internal_set_class_(from._internal_class_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.CraneScheduling.DataModel.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, _impl_.class__)
      + sizeof(Block::_impl_.class__)
      - PROTOBUF_FIELD_OFFSET(Block, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cranescheduling_5fmodel_2eproto_getter, &descriptor_table_cranescheduling_5fmodel_2eproto_once,
      file_level_metadata_cranescheduling_5fmodel_2eproto[0]);
}

// ===================================================================

class Crane::_Internal {
 public:
  static const ::DynStacking::CraneScheduling::DataModel::Stack& load(const Crane* msg);
};

const ::DynStacking::CraneScheduling::DataModel::Stack&
Crane::_Internal::load(const Crane* msg) {
  return *msg->_impl_.load_;
}
Crane::Crane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.CraneScheduling.DataModel.Crane)
}
Crane::Crane(const Crane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Crane* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.load_){nullptr}
    , decltype(_impl_.girderposition_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.cranecapacity_){}
    , decltype(_impl_.hoistlevel_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.minposition_){}
    , decltype(_impl_.maxposition_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_load()) {
    _this->_impl_.load_ = new ::DynStacking::CraneScheduling::DataModel::Stack(*from._impl_.load_);
  }
  ::memcpy(&_impl_.girderposition_, &from._impl_.girderposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxposition_) -
    reinterpret_cast<char*>(&_impl_.girderposition_)) + sizeof(_impl_.maxposition_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.CraneScheduling.DataModel.Crane)
}

inline void Crane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.load_){nullptr}
    , decltype(_impl_.girderposition_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.cranecapacity_){0}
    , decltype(_impl_.hoistlevel_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.minposition_){0}
    , decltype(_impl_.maxposition_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Crane::~Crane() {
  // @@protoc_insertion_point(destructor:DynStacking.CraneScheduling.DataModel.Crane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Crane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.load_;
}

void Crane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Crane::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.CraneScheduling.DataModel.Crane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.load_ != nullptr) {
    delete _impl_.load_;
  }
  _impl_.load_ = nullptr;
  ::memset(&_impl_.girderposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxposition_) -
      reinterpret_cast<char*>(&_impl_.girderposition_)) + sizeof(_impl_.maxposition_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Crane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.CraneScheduling.DataModel.Stack Load = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_load(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double GirderPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.girderposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double HoistLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.hoistlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 CraneCapacity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.cranecapacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double Width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double MinPosition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.minposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double MaxPosition = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.maxposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Crane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.CraneScheduling.DataModel.Crane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .DynStacking.CraneScheduling.DataModel.Stack Load = 2;
  if (this->_internal_has_load()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::load(this),
        _Internal::load(this).GetCachedSize(), target, stream);
  }

  // double GirderPosition = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_girderposition = this->_internal_girderposition();
  uint64_t raw_girderposition;
  memcpy(&raw_girderposition, &tmp_girderposition, sizeof(tmp_girderposition));
  if (raw_girderposition != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_girderposition(), target);
  }

  // double HoistLevel = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hoistlevel = this->_internal_hoistlevel();
  uint64_t raw_hoistlevel;
  memcpy(&raw_hoistlevel, &tmp_hoistlevel, sizeof(tmp_hoistlevel));
  if (raw_hoistlevel != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_hoistlevel(), target);
  }

  // int32 CraneCapacity = 5;
  if (this->_internal_cranecapacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_cranecapacity(), target);
  }

  // double Width = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_width(), target);
  }

  // double MinPosition = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_minposition = this->_internal_minposition();
  uint64_t raw_minposition;
  memcpy(&raw_minposition, &tmp_minposition, sizeof(tmp_minposition));
  if (raw_minposition != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_minposition(), target);
  }

  // double MaxPosition = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxposition = this->_internal_maxposition();
  uint64_t raw_maxposition;
  memcpy(&raw_maxposition, &tmp_maxposition, sizeof(tmp_maxposition));
  if (raw_maxposition != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_maxposition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.CraneScheduling.DataModel.Crane)
  return target;
}

size_t Crane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.CraneScheduling.DataModel.Crane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DynStacking.CraneScheduling.DataModel.Stack Load = 2;
  if (this->_internal_has_load()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.load_);
  }

  // double GirderPosition = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_girderposition = this->_internal_girderposition();
  uint64_t raw_girderposition;
  memcpy(&raw_girderposition, &tmp_girderposition, sizeof(tmp_girderposition));
  if (raw_girderposition != 0) {
    total_size += 1 + 8;
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 CraneCapacity = 5;
  if (this->_internal_cranecapacity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cranecapacity());
  }

  // double HoistLevel = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hoistlevel = this->_internal_hoistlevel();
  uint64_t raw_hoistlevel;
  memcpy(&raw_hoistlevel, &tmp_hoistlevel, sizeof(tmp_hoistlevel));
  if (raw_hoistlevel != 0) {
    total_size += 1 + 8;
  }

  // double Width = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 8;
  }

  // double MinPosition = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_minposition = this->_internal_minposition();
  uint64_t raw_minposition;
  memcpy(&raw_minposition, &tmp_minposition, sizeof(tmp_minposition));
  if (raw_minposition != 0) {
    total_size += 1 + 8;
  }

  // double MaxPosition = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxposition = this->_internal_maxposition();
  uint64_t raw_maxposition;
  memcpy(&raw_maxposition, &tmp_maxposition, sizeof(tmp_maxposition));
  if (raw_maxposition != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Crane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Crane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Crane::GetClassData() const { return &_class_data_; }


void Crane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Crane*>(&to_msg);
  auto& from = static_cast<const Crane&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.CraneScheduling.DataModel.Crane)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_load()) {
    _this->_internal_mutable_load()->::DynStacking::CraneScheduling::DataModel::Stack::MergeFrom(
        from._internal_load());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_girderposition = from._internal_girderposition();
  uint64_t raw_girderposition;
  memcpy(&raw_girderposition, &tmp_girderposition, sizeof(tmp_girderposition));
  if (raw_girderposition != 0) {
    _this->_internal_set_girderposition(from._internal_girderposition());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_cranecapacity() != 0) {
    _this->_internal_set_cranecapacity(from._internal_cranecapacity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hoistlevel = from._internal_hoistlevel();
  uint64_t raw_hoistlevel;
  memcpy(&raw_hoistlevel, &tmp_hoistlevel, sizeof(tmp_hoistlevel));
  if (raw_hoistlevel != 0) {
    _this->_internal_set_hoistlevel(from._internal_hoistlevel());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_minposition = from._internal_minposition();
  uint64_t raw_minposition;
  memcpy(&raw_minposition, &tmp_minposition, sizeof(tmp_minposition));
  if (raw_minposition != 0) {
    _this->_internal_set_minposition(from._internal_minposition());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxposition = from._internal_maxposition();
  uint64_t raw_maxposition;
  memcpy(&raw_maxposition, &tmp_maxposition, sizeof(tmp_maxposition));
  if (raw_maxposition != 0) {
    _this->_internal_set_maxposition(from._internal_maxposition());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Crane::CopyFrom(const Crane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.CraneScheduling.DataModel.Crane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crane::IsInitialized() const {
  return true;
}

void Crane::InternalSwap(Crane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Crane, _impl_.maxposition_)
      + sizeof(Crane::_impl_.maxposition_)
      - PROTOBUF_FIELD_OFFSET(Crane, _impl_.load_)>(
          reinterpret_cast<char*>(&_impl_.load_),
          reinterpret_cast<char*>(&other->_impl_.load_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Crane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cranescheduling_5fmodel_2eproto_getter, &descriptor_table_cranescheduling_5fmodel_2eproto_once,
      file_level_metadata_cranescheduling_5fmodel_2eproto[1]);
}

// ===================================================================

class CraneMove::_Internal {
 public:
  static const ::DynStacking::CraneScheduling::DataModel::TimeStamp& releasetime(const CraneMove* msg);
  static const ::DynStacking::CraneScheduling::DataModel::TimeStamp& duedate(const CraneMove* msg);
};

const ::DynStacking::CraneScheduling::DataModel::TimeStamp&
CraneMove::_Internal::releasetime(const CraneMove* msg) {
  return *msg->_impl_.releasetime_;
}
const ::DynStacking::CraneScheduling::DataModel::TimeStamp&
CraneMove::_Internal::duedate(const CraneMove* msg) {
  return *msg->_impl_.duedate_;
}
CraneMove::CraneMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.CraneScheduling.DataModel.CraneMove)
}
CraneMove::CraneMove(const CraneMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CraneMove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.protobufpredecessorids_){from._impl_.protobufpredecessorids_}
    , decltype(_impl_.protobufmovedblockids_){from._impl_.protobufmovedblockids_}
    , decltype(_impl_.releasetime_){nullptr}
    , decltype(_impl_.duedate_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.pickupgirderposition_){}
    , decltype(_impl_.pickuplocationid_){}
    , decltype(_impl_.dropofflocationid_){}
    , decltype(_impl_.dropoffgirderposition_){}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.requiredcraneid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_releasetime()) {
    _this->_impl_.releasetime_ = new ::DynStacking::CraneScheduling::DataModel::TimeStamp(*from._impl_.releasetime_);
  }
  if (from._internal_has_duedate()) {
    _this->_impl_.duedate_ = new ::DynStacking::CraneScheduling::DataModel::TimeStamp(*from._impl_.duedate_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.requiredcraneid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.requiredcraneid_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.CraneScheduling.DataModel.CraneMove)
}

inline void CraneMove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.protobufpredecessorids_){arena}
    , decltype(_impl_.protobufmovedblockids_){arena}
    , decltype(_impl_.releasetime_){nullptr}
    , decltype(_impl_.duedate_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.pickupgirderposition_){0}
    , decltype(_impl_.pickuplocationid_){0}
    , decltype(_impl_.dropofflocationid_){0}
    , decltype(_impl_.dropoffgirderposition_){0}
    , decltype(_impl_.amount_){0}
    , decltype(_impl_.requiredcraneid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CraneMove::~CraneMove() {
  // @@protoc_insertion_point(destructor:DynStacking.CraneScheduling.DataModel.CraneMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CraneMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.protobufpredecessorids_.~RepeatedField();
  _impl_.protobufmovedblockids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.releasetime_;
  if (this != internal_default_instance()) delete _impl_.duedate_;
}

void CraneMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CraneMove::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.CraneScheduling.DataModel.CraneMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.protobufpredecessorids_.Clear();
  _impl_.protobufmovedblockids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.releasetime_ != nullptr) {
    delete _impl_.releasetime_;
  }
  _impl_.releasetime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.duedate_ != nullptr) {
    delete _impl_.duedate_;
  }
  _impl_.duedate_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.requiredcraneid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.requiredcraneid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CraneMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.CraneScheduling.DataModel.MoveType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::DynStacking::CraneScheduling::DataModel::MoveType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 PickupLocationId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pickuplocationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double PickupGirderPosition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.pickupgirderposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 DropoffLocationId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.dropofflocationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double DropoffGirderPosition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.dropoffgirderposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 Amount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.CraneScheduling.DataModel.TimeStamp ReleaseTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_releasetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.CraneScheduling.DataModel.TimeStamp DueDate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_duedate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 RequiredCraneId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.requiredcraneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ProtobufPredecessorIds = 12 [packed = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_protobufpredecessorids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_protobufpredecessorids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ProtobufMovedBlockIds = 13 [packed = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_protobufmovedblockids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_protobufmovedblockids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CraneMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.CraneScheduling.DataModel.CraneMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .DynStacking.CraneScheduling.DataModel.MoveType Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int32 PickupLocationId = 3;
  if (this->_internal_pickuplocationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pickuplocationid(), target);
  }

  // double PickupGirderPosition = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pickupgirderposition = this->_internal_pickupgirderposition();
  uint64_t raw_pickupgirderposition;
  memcpy(&raw_pickupgirderposition, &tmp_pickupgirderposition, sizeof(tmp_pickupgirderposition));
  if (raw_pickupgirderposition != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_pickupgirderposition(), target);
  }

  // int32 DropoffLocationId = 5;
  if (this->_internal_dropofflocationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_dropofflocationid(), target);
  }

  // double DropoffGirderPosition = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dropoffgirderposition = this->_internal_dropoffgirderposition();
  uint64_t raw_dropoffgirderposition;
  memcpy(&raw_dropoffgirderposition, &tmp_dropoffgirderposition, sizeof(tmp_dropoffgirderposition));
  if (raw_dropoffgirderposition != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_dropoffgirderposition(), target);
  }

  // int32 Amount = 7;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_amount(), target);
  }

  // .DynStacking.CraneScheduling.DataModel.TimeStamp ReleaseTime = 8;
  if (this->_internal_has_releasetime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::releasetime(this),
        _Internal::releasetime(this).GetCachedSize(), target, stream);
  }

  // .DynStacking.CraneScheduling.DataModel.TimeStamp DueDate = 9;
  if (this->_internal_has_duedate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::duedate(this),
        _Internal::duedate(this).GetCachedSize(), target, stream);
  }

  // int32 RequiredCraneId = 10;
  if (this->_internal_requiredcraneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_requiredcraneid(), target);
  }

  // repeated int32 ProtobufPredecessorIds = 12 [packed = false];
  for (int i = 0, n = this->_internal_protobufpredecessorids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_protobufpredecessorids(i), target);
  }

  // repeated int32 ProtobufMovedBlockIds = 13 [packed = false];
  for (int i = 0, n = this->_internal_protobufmovedblockids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_protobufmovedblockids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.CraneScheduling.DataModel.CraneMove)
  return target;
}

size_t CraneMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.CraneScheduling.DataModel.CraneMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ProtobufPredecessorIds = 12 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.protobufpredecessorids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_protobufpredecessorids_size());
    total_size += data_size;
  }

  // repeated int32 ProtobufMovedBlockIds = 13 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.protobufmovedblockids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_protobufmovedblockids_size());
    total_size += data_size;
  }

  // .DynStacking.CraneScheduling.DataModel.TimeStamp ReleaseTime = 8;
  if (this->_internal_has_releasetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.releasetime_);
  }

  // .DynStacking.CraneScheduling.DataModel.TimeStamp DueDate = 9;
  if (this->_internal_has_duedate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duedate_);
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .DynStacking.CraneScheduling.DataModel.MoveType Type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // double PickupGirderPosition = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pickupgirderposition = this->_internal_pickupgirderposition();
  uint64_t raw_pickupgirderposition;
  memcpy(&raw_pickupgirderposition, &tmp_pickupgirderposition, sizeof(tmp_pickupgirderposition));
  if (raw_pickupgirderposition != 0) {
    total_size += 1 + 8;
  }

  // int32 PickupLocationId = 3;
  if (this->_internal_pickuplocationid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pickuplocationid());
  }

  // int32 DropoffLocationId = 5;
  if (this->_internal_dropofflocationid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dropofflocationid());
  }

  // double DropoffGirderPosition = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dropoffgirderposition = this->_internal_dropoffgirderposition();
  uint64_t raw_dropoffgirderposition;
  memcpy(&raw_dropoffgirderposition, &tmp_dropoffgirderposition, sizeof(tmp_dropoffgirderposition));
  if (raw_dropoffgirderposition != 0) {
    total_size += 1 + 8;
  }

  // int32 Amount = 7;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_amount());
  }

  // int32 RequiredCraneId = 10;
  if (this->_internal_requiredcraneid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_requiredcraneid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CraneMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CraneMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CraneMove::GetClassData() const { return &_class_data_; }


void CraneMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CraneMove*>(&to_msg);
  auto& from = static_cast<const CraneMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.CraneScheduling.DataModel.CraneMove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.protobufpredecessorids_.MergeFrom(from._impl_.protobufpredecessorids_);
  _this->_impl_.protobufmovedblockids_.MergeFrom(from._impl_.protobufmovedblockids_);
  if (from._internal_has_releasetime()) {
    _this->_internal_mutable_releasetime()->::DynStacking::CraneScheduling::DataModel::TimeStamp::MergeFrom(
        from._internal_releasetime());
  }
  if (from._internal_has_duedate()) {
    _this->_internal_mutable_duedate()->::DynStacking::CraneScheduling::DataModel::TimeStamp::MergeFrom(
        from._internal_duedate());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pickupgirderposition = from._internal_pickupgirderposition();
  uint64_t raw_pickupgirderposition;
  memcpy(&raw_pickupgirderposition, &tmp_pickupgirderposition, sizeof(tmp_pickupgirderposition));
  if (raw_pickupgirderposition != 0) {
    _this->_internal_set_pickupgirderposition(from._internal_pickupgirderposition());
  }
  if (from._internal_pickuplocationid() != 0) {
    _this->_internal_set_pickuplocationid(from._internal_pickuplocationid());
  }
  if (from._internal_dropofflocationid() != 0) {
    _this->_internal_set_dropofflocationid(from._internal_dropofflocationid());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dropoffgirderposition = from._internal_dropoffgirderposition();
  uint64_t raw_dropoffgirderposition;
  memcpy(&raw_dropoffgirderposition, &tmp_dropoffgirderposition, sizeof(tmp_dropoffgirderposition));
  if (raw_dropoffgirderposition != 0) {
    _this->_internal_set_dropoffgirderposition(from._internal_dropoffgirderposition());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_requiredcraneid() != 0) {
    _this->_internal_set_requiredcraneid(from._internal_requiredcraneid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CraneMove::CopyFrom(const CraneMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.CraneScheduling.DataModel.CraneMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CraneMove::IsInitialized() const {
  return true;
}

void CraneMove::InternalSwap(CraneMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.protobufpredecessorids_.InternalSwap(&other->_impl_.protobufpredecessorids_);
  _impl_.protobufmovedblockids_.InternalSwap(&other->_impl_.protobufmovedblockids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CraneMove, _impl_.requiredcraneid_)
      + sizeof(CraneMove::_impl_.requiredcraneid_)
      - PROTOBUF_FIELD_OFFSET(CraneMove, _impl_.releasetime_)>(
          reinterpret_cast<char*>(&_impl_.releasetime_),
          reinterpret_cast<char*>(&other->_impl_.releasetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CraneMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cranescheduling_5fmodel_2eproto_getter, &descriptor_table_cranescheduling_5fmodel_2eproto_once,
      file_level_metadata_cranescheduling_5fmodel_2eproto[2]);
}

// ===================================================================

class CraneSchedule::_Internal {
 public:
};

CraneSchedule::CraneSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.CraneScheduling.DataModel.CraneSchedule)
}
CraneSchedule::CraneSchedule(const CraneSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CraneSchedule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.activities_){from._impl_.activities_}
    , decltype(_impl_.schedulenr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.schedulenr_ = from._impl_.schedulenr_;
  // @@protoc_insertion_point(copy_constructor:DynStacking.CraneScheduling.DataModel.CraneSchedule)
}

inline void CraneSchedule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.activities_){arena}
    , decltype(_impl_.schedulenr_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CraneSchedule::~CraneSchedule() {
  // @@protoc_insertion_point(destructor:DynStacking.CraneScheduling.DataModel.CraneSchedule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CraneSchedule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activities_.~RepeatedPtrField();
}

void CraneSchedule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CraneSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.CraneScheduling.DataModel.CraneSchedule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.activities_.Clear();
  _impl_.schedulenr_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CraneSchedule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ScheduleNr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.schedulenr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DynStacking.CraneScheduling.DataModel.CraneScheduleActivity Activities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CraneSchedule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.CraneScheduling.DataModel.CraneSchedule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ScheduleNr = 1;
  if (this->_internal_schedulenr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_schedulenr(), target);
  }

  // repeated .DynStacking.CraneScheduling.DataModel.CraneScheduleActivity Activities = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_activities_size()); i < n; i++) {
    const auto& repfield = this->_internal_activities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.CraneScheduling.DataModel.CraneSchedule)
  return target;
}

size_t CraneSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.CraneScheduling.DataModel.CraneSchedule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DynStacking.CraneScheduling.DataModel.CraneScheduleActivity Activities = 2;
  total_size += 1UL * this->_internal_activities_size();
  for (const auto& msg : this->_impl_.activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ScheduleNr = 1;
  if (this->_internal_schedulenr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_schedulenr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CraneSchedule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CraneSchedule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CraneSchedule::GetClassData() const { return &_class_data_; }


void CraneSchedule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CraneSchedule*>(&to_msg);
  auto& from = static_cast<const CraneSchedule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.CraneScheduling.DataModel.CraneSchedule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.activities_.MergeFrom(from._impl_.activities_);
  if (from._internal_schedulenr() != 0) {
    _this->_internal_set_schedulenr(from._internal_schedulenr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CraneSchedule::CopyFrom(const CraneSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.CraneScheduling.DataModel.CraneSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CraneSchedule::IsInitialized() const {
  return true;
}

void CraneSchedule::InternalSwap(CraneSchedule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.activities_.InternalSwap(&other->_impl_.activities_);
  swap(_impl_.schedulenr_, other->_impl_.schedulenr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CraneSchedule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cranescheduling_5fmodel_2eproto_getter, &descriptor_table_cranescheduling_5fmodel_2eproto_once,
      file_level_metadata_cranescheduling_5fmodel_2eproto[3]);
}

// ===================================================================

class CraneScheduleActivity::_Internal {
 public:
};

CraneScheduleActivity::CraneScheduleActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity)
}
CraneScheduleActivity::CraneScheduleActivity(const CraneScheduleActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CraneScheduleActivity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.moveid_){}
    , decltype(_impl_.craneid_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.moveid_, &from._impl_.moveid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.moveid_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity)
}

inline void CraneScheduleActivity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.moveid_){0}
    , decltype(_impl_.craneid_){0}
    , decltype(_impl_.priority_){0}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CraneScheduleActivity::~CraneScheduleActivity() {
  // @@protoc_insertion_point(destructor:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CraneScheduleActivity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CraneScheduleActivity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CraneScheduleActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.moveid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.moveid_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CraneScheduleActivity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 MoveId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.moveid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CraneId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.craneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.CraneScheduling.DataModel.CraneScheduleActivityState State = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::DynStacking::CraneScheduling::DataModel::CraneScheduleActivityState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CraneScheduleActivity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 MoveId = 1;
  if (this->_internal_moveid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_moveid(), target);
  }

  // int32 CraneId = 2;
  if (this->_internal_craneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_craneid(), target);
  }

  // int32 Priority = 3;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_priority(), target);
  }

  // .DynStacking.CraneScheduling.DataModel.CraneScheduleActivityState State = 4;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity)
  return target;
}

size_t CraneScheduleActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 MoveId = 1;
  if (this->_internal_moveid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_moveid());
  }

  // int32 CraneId = 2;
  if (this->_internal_craneid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_craneid());
  }

  // int32 Priority = 3;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  // .DynStacking.CraneScheduling.DataModel.CraneScheduleActivityState State = 4;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CraneScheduleActivity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CraneScheduleActivity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CraneScheduleActivity::GetClassData() const { return &_class_data_; }


void CraneScheduleActivity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CraneScheduleActivity*>(&to_msg);
  auto& from = static_cast<const CraneScheduleActivity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_moveid() != 0) {
    _this->_internal_set_moveid(from._internal_moveid());
  }
  if (from._internal_craneid() != 0) {
    _this->_internal_set_craneid(from._internal_craneid());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CraneScheduleActivity::CopyFrom(const CraneScheduleActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.CraneScheduling.DataModel.CraneScheduleActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CraneScheduleActivity::IsInitialized() const {
  return true;
}

void CraneScheduleActivity::InternalSwap(CraneScheduleActivity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CraneScheduleActivity, _impl_.state_)
      + sizeof(CraneScheduleActivity::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(CraneScheduleActivity, _impl_.moveid_)>(
          reinterpret_cast<char*>(&_impl_.moveid_),
          reinterpret_cast<char*>(&other->_impl_.moveid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CraneScheduleActivity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cranescheduling_5fmodel_2eproto_getter, &descriptor_table_cranescheduling_5fmodel_2eproto_once,
      file_level_metadata_cranescheduling_5fmodel_2eproto[4]);
}

// ===================================================================

class CraneSchedulingSolution::_Internal {
 public:
  static const ::DynStacking::CraneScheduling::DataModel::CraneSchedule& schedule(const CraneSchedulingSolution* msg);
};

const ::DynStacking::CraneScheduling::DataModel::CraneSchedule&
CraneSchedulingSolution::_Internal::schedule(const CraneSchedulingSolution* msg) {
  return *msg->_impl_.schedule_;
}
CraneSchedulingSolution::CraneSchedulingSolution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution)
}
CraneSchedulingSolution::CraneSchedulingSolution(const CraneSchedulingSolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CraneSchedulingSolution* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.custommoves_){from._impl_.custommoves_}
    , decltype(_impl_.schedule_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_schedule()) {
    _this->_impl_.schedule_ = new ::DynStacking::CraneScheduling::DataModel::CraneSchedule(*from._impl_.schedule_);
  }
  // @@protoc_insertion_point(copy_constructor:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution)
}

inline void CraneSchedulingSolution::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.custommoves_){arena}
    , decltype(_impl_.schedule_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CraneSchedulingSolution::~CraneSchedulingSolution() {
  // @@protoc_insertion_point(destructor:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CraneSchedulingSolution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custommoves_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.schedule_;
}

void CraneSchedulingSolution::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CraneSchedulingSolution::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.custommoves_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.schedule_ != nullptr) {
    delete _impl_.schedule_;
  }
  _impl_.schedule_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CraneSchedulingSolution::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DynStacking.CraneScheduling.DataModel.CraneMove CustomMoves = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custommoves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.CraneScheduling.DataModel.CraneSchedule Schedule = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_schedule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CraneSchedulingSolution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DynStacking.CraneScheduling.DataModel.CraneMove CustomMoves = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custommoves_size()); i < n; i++) {
    const auto& repfield = this->_internal_custommoves(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .DynStacking.CraneScheduling.DataModel.CraneSchedule Schedule = 2;
  if (this->_internal_has_schedule()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::schedule(this),
        _Internal::schedule(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution)
  return target;
}

size_t CraneSchedulingSolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DynStacking.CraneScheduling.DataModel.CraneMove CustomMoves = 1;
  total_size += 1UL * this->_internal_custommoves_size();
  for (const auto& msg : this->_impl_.custommoves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DynStacking.CraneScheduling.DataModel.CraneSchedule Schedule = 2;
  if (this->_internal_has_schedule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schedule_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CraneSchedulingSolution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CraneSchedulingSolution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CraneSchedulingSolution::GetClassData() const { return &_class_data_; }


void CraneSchedulingSolution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CraneSchedulingSolution*>(&to_msg);
  auto& from = static_cast<const CraneSchedulingSolution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.custommoves_.MergeFrom(from._impl_.custommoves_);
  if (from._internal_has_schedule()) {
    _this->_internal_mutable_schedule()->::DynStacking::CraneScheduling::DataModel::CraneSchedule::MergeFrom(
        from._internal_schedule());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CraneSchedulingSolution::CopyFrom(const CraneSchedulingSolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.CraneScheduling.DataModel.CraneSchedulingSolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CraneSchedulingSolution::IsInitialized() const {
  return true;
}

void CraneSchedulingSolution::InternalSwap(CraneSchedulingSolution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.custommoves_.InternalSwap(&other->_impl_.custommoves_);
  swap(_impl_.schedule_, other->_impl_.schedule_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CraneSchedulingSolution::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cranescheduling_5fmodel_2eproto_getter, &descriptor_table_cranescheduling_5fmodel_2eproto_once,
      file_level_metadata_cranescheduling_5fmodel_2eproto[5]);
}

// ===================================================================

class Location::_Internal {
 public:
  static const ::DynStacking::CraneScheduling::DataModel::Stack& stack(const Location* msg);
};

const ::DynStacking::CraneScheduling::DataModel::Stack&
Location::_Internal::stack(const Location* msg) {
  return *msg->_impl_.stack_;
}
Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.CraneScheduling.DataModel.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stack_){nullptr}
    , decltype(_impl_.girderposition_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.maxheight_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.class__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stack()) {
    _this->_impl_.stack_ = new ::DynStacking::CraneScheduling::DataModel::Stack(*from._impl_.stack_);
  }
  ::memcpy(&_impl_.girderposition_, &from._impl_.girderposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.class__) -
    reinterpret_cast<char*>(&_impl_.girderposition_)) + sizeof(_impl_.class__));
  // @@protoc_insertion_point(copy_constructor:DynStacking.CraneScheduling.DataModel.Location)
}

inline void Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stack_){nullptr}
    , decltype(_impl_.girderposition_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.maxheight_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.class__){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:DynStacking.CraneScheduling.DataModel.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stack_;
}

void Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.CraneScheduling.DataModel.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stack_ != nullptr) {
    delete _impl_.stack_;
  }
  _impl_.stack_ = nullptr;
  ::memset(&_impl_.girderposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.class__) -
      reinterpret_cast<char*>(&_impl_.girderposition_)) + sizeof(_impl_.class__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double GirderPosition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.girderposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxHeight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maxheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.CraneScheduling.DataModel.Stack Stack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.CraneScheduling.DataModel.StackTypes Type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::DynStacking::CraneScheduling::DataModel::StackTypes>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 Class = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.class__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.CraneScheduling.DataModel.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // double GirderPosition = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_girderposition = this->_internal_girderposition();
  uint64_t raw_girderposition;
  memcpy(&raw_girderposition, &tmp_girderposition, sizeof(tmp_girderposition));
  if (raw_girderposition != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_girderposition(), target);
  }

  // int32 MaxHeight = 3;
  if (this->_internal_maxheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_maxheight(), target);
  }

  // .DynStacking.CraneScheduling.DataModel.Stack Stack = 4;
  if (this->_internal_has_stack()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stack(this),
        _Internal::stack(this).GetCachedSize(), target, stream);
  }

  // .DynStacking.CraneScheduling.DataModel.StackTypes Type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // int32 Class = 6;
  if (this->_internal_class_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_class_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.CraneScheduling.DataModel.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.CraneScheduling.DataModel.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DynStacking.CraneScheduling.DataModel.Stack Stack = 4;
  if (this->_internal_has_stack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stack_);
  }

  // double GirderPosition = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_girderposition = this->_internal_girderposition();
  uint64_t raw_girderposition;
  memcpy(&raw_girderposition, &tmp_girderposition, sizeof(tmp_girderposition));
  if (raw_girderposition != 0) {
    total_size += 1 + 8;
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 MaxHeight = 3;
  if (this->_internal_maxheight() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxheight());
  }

  // .DynStacking.CraneScheduling.DataModel.StackTypes Type = 5;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 Class = 6;
  if (this->_internal_class_() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_class_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }


void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Location*>(&to_msg);
  auto& from = static_cast<const Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.CraneScheduling.DataModel.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stack()) {
    _this->_internal_mutable_stack()->::DynStacking::CraneScheduling::DataModel::Stack::MergeFrom(
        from._internal_stack());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_girderposition = from._internal_girderposition();
  uint64_t raw_girderposition;
  memcpy(&raw_girderposition, &tmp_girderposition, sizeof(tmp_girderposition));
  if (raw_girderposition != 0) {
    _this->_internal_set_girderposition(from._internal_girderposition());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_maxheight() != 0) {
    _this->_internal_set_maxheight(from._internal_maxheight());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_class_() != 0) {
    _this->_internal_set_class_(from._internal_class_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.CraneScheduling.DataModel.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, _impl_.class__)
      + sizeof(Location::_impl_.class__)
      - PROTOBUF_FIELD_OFFSET(Location, _impl_.stack_)>(
          reinterpret_cast<char*>(&_impl_.stack_),
          reinterpret_cast<char*>(&other->_impl_.stack_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cranescheduling_5fmodel_2eproto_getter, &descriptor_table_cranescheduling_5fmodel_2eproto_once,
      file_level_metadata_cranescheduling_5fmodel_2eproto[6]);
}

// ===================================================================

class MoveRequest::_Internal {
 public:
  static const ::DynStacking::CraneScheduling::DataModel::TimeStamp& duedate(const MoveRequest* msg);
};

const ::DynStacking::CraneScheduling::DataModel::TimeStamp&
MoveRequest::_Internal::duedate(const MoveRequest* msg) {
  return *msg->_impl_.duedate_;
}
MoveRequest::MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.CraneScheduling.DataModel.MoveRequest)
}
MoveRequest::MoveRequest(const MoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.duedate_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.targetlocationid_){}
    , decltype(_impl_.blockid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_duedate()) {
    _this->_impl_.duedate_ = new ::DynStacking::CraneScheduling::DataModel::TimeStamp(*from._impl_.duedate_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blockid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.blockid_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.CraneScheduling.DataModel.MoveRequest)
}

inline void MoveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.duedate_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.targetlocationid_){0}
    , decltype(_impl_.blockid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MoveRequest::~MoveRequest() {
  // @@protoc_insertion_point(destructor:DynStacking.CraneScheduling.DataModel.MoveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.duedate_;
}

void MoveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.CraneScheduling.DataModel.MoveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.duedate_ != nullptr) {
    delete _impl_.duedate_;
  }
  _impl_.duedate_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blockid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.blockid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TargetLocationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.targetlocationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BlockId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.blockid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.CraneScheduling.DataModel.TimeStamp DueDate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_duedate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.CraneScheduling.DataModel.MoveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 TargetLocationId = 2;
  if (this->_internal_targetlocationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_targetlocationid(), target);
  }

  // int32 BlockId = 3;
  if (this->_internal_blockid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_blockid(), target);
  }

  // .DynStacking.CraneScheduling.DataModel.TimeStamp DueDate = 4;
  if (this->_internal_has_duedate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::duedate(this),
        _Internal::duedate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.CraneScheduling.DataModel.MoveRequest)
  return target;
}

size_t MoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.CraneScheduling.DataModel.MoveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DynStacking.CraneScheduling.DataModel.TimeStamp DueDate = 4;
  if (this->_internal_has_duedate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duedate_);
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 TargetLocationId = 2;
  if (this->_internal_targetlocationid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_targetlocationid());
  }

  // int32 BlockId = 3;
  if (this->_internal_blockid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_blockid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveRequest::GetClassData() const { return &_class_data_; }


void MoveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveRequest*>(&to_msg);
  auto& from = static_cast<const MoveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.CraneScheduling.DataModel.MoveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_duedate()) {
    _this->_internal_mutable_duedate()->::DynStacking::CraneScheduling::DataModel::TimeStamp::MergeFrom(
        from._internal_duedate());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_targetlocationid() != 0) {
    _this->_internal_set_targetlocationid(from._internal_targetlocationid());
  }
  if (from._internal_blockid() != 0) {
    _this->_internal_set_blockid(from._internal_blockid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.CraneScheduling.DataModel.MoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {
  return true;
}

void MoveRequest::InternalSwap(MoveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveRequest, _impl_.blockid_)
      + sizeof(MoveRequest::_impl_.blockid_)
      - PROTOBUF_FIELD_OFFSET(MoveRequest, _impl_.duedate_)>(
          reinterpret_cast<char*>(&_impl_.duedate_),
          reinterpret_cast<char*>(&other->_impl_.duedate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cranescheduling_5fmodel_2eproto_getter, &descriptor_table_cranescheduling_5fmodel_2eproto_once,
      file_level_metadata_cranescheduling_5fmodel_2eproto[7]);
}

// ===================================================================

class Performance::_Internal {
 public:
};

Performance::Performance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.CraneScheduling.DataModel.Performance)
}
Performance::Performance(const Performance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Performance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cranemanipulations_){}
    , decltype(_impl_.upstreamblocks_){}
    , decltype(_impl_.downstreamblocks_){}
    , decltype(_impl_.deliveryerrors_){}
    , decltype(_impl_.totalgirderdistance_){}
    , decltype(_impl_.totalhoistdistance_){}
    , decltype(_impl_.servicedupstreamvehicles_){}
    , decltype(_impl_.serviceddownstreamvehicles_){}
    , decltype(_impl_.upstreamservicetime_){}
    , decltype(_impl_.downstreamservicetime_){}
    , decltype(_impl_.parkingupstreamvehicles_){}
    , decltype(_impl_.parkingdownstreamvehicles_){}
    , decltype(_impl_.upstreamparkingtime_){}
    , decltype(_impl_.downstreamparkingtime_){}
    , decltype(_impl_.maxparkingduration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cranemanipulations_, &from._impl_.cranemanipulations_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxparkingduration_) -
    reinterpret_cast<char*>(&_impl_.cranemanipulations_)) + sizeof(_impl_.maxparkingduration_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.CraneScheduling.DataModel.Performance)
}

inline void Performance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cranemanipulations_){0}
    , decltype(_impl_.upstreamblocks_){0}
    , decltype(_impl_.downstreamblocks_){0}
    , decltype(_impl_.deliveryerrors_){0}
    , decltype(_impl_.totalgirderdistance_){0}
    , decltype(_impl_.totalhoistdistance_){0}
    , decltype(_impl_.servicedupstreamvehicles_){0}
    , decltype(_impl_.serviceddownstreamvehicles_){0}
    , decltype(_impl_.upstreamservicetime_){0}
    , decltype(_impl_.downstreamservicetime_){0}
    , decltype(_impl_.parkingupstreamvehicles_){0}
    , decltype(_impl_.parkingdownstreamvehicles_){0}
    , decltype(_impl_.upstreamparkingtime_){0}
    , decltype(_impl_.downstreamparkingtime_){0}
    , decltype(_impl_.maxparkingduration_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Performance::~Performance() {
  // @@protoc_insertion_point(destructor:DynStacking.CraneScheduling.DataModel.Performance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Performance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Performance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Performance::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.CraneScheduling.DataModel.Performance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cranemanipulations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxparkingduration_) -
      reinterpret_cast<char*>(&_impl_.cranemanipulations_)) + sizeof(_impl_.maxparkingduration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Performance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 CraneManipulations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cranemanipulations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 UpstreamBlocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.upstreamblocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DownstreamBlocks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.downstreamblocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DeliveryErrors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.deliveryerrors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double TotalGirderDistance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.totalgirderdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double TotalHoistDistance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.totalhoistdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 ServicedUpstreamVehicles = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.servicedupstreamvehicles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ServicedDownstreamVehicles = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.serviceddownstreamvehicles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double UpstreamServiceTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.upstreamservicetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double DownstreamServiceTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.downstreamservicetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 ParkingUpstreamVehicles = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.parkingupstreamvehicles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ParkingDownstreamVehicles = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.parkingdownstreamvehicles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double UpstreamParkingTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.upstreamparkingtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double DownstreamParkingTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.downstreamparkingtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double MaxParkingDuration = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.maxparkingduration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Performance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.CraneScheduling.DataModel.Performance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CraneManipulations = 1;
  if (this->_internal_cranemanipulations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cranemanipulations(), target);
  }

  // int32 UpstreamBlocks = 2;
  if (this->_internal_upstreamblocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_upstreamblocks(), target);
  }

  // int32 DownstreamBlocks = 3;
  if (this->_internal_downstreamblocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_downstreamblocks(), target);
  }

  // int32 DeliveryErrors = 4;
  if (this->_internal_deliveryerrors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_deliveryerrors(), target);
  }

  // double TotalGirderDistance = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totalgirderdistance = this->_internal_totalgirderdistance();
  uint64_t raw_totalgirderdistance;
  memcpy(&raw_totalgirderdistance, &tmp_totalgirderdistance, sizeof(tmp_totalgirderdistance));
  if (raw_totalgirderdistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_totalgirderdistance(), target);
  }

  // double TotalHoistDistance = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totalhoistdistance = this->_internal_totalhoistdistance();
  uint64_t raw_totalhoistdistance;
  memcpy(&raw_totalhoistdistance, &tmp_totalhoistdistance, sizeof(tmp_totalhoistdistance));
  if (raw_totalhoistdistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_totalhoistdistance(), target);
  }

  // int32 ServicedUpstreamVehicles = 7;
  if (this->_internal_servicedupstreamvehicles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_servicedupstreamvehicles(), target);
  }

  // int32 ServicedDownstreamVehicles = 8;
  if (this->_internal_serviceddownstreamvehicles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_serviceddownstreamvehicles(), target);
  }

  // double UpstreamServiceTime = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upstreamservicetime = this->_internal_upstreamservicetime();
  uint64_t raw_upstreamservicetime;
  memcpy(&raw_upstreamservicetime, &tmp_upstreamservicetime, sizeof(tmp_upstreamservicetime));
  if (raw_upstreamservicetime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_upstreamservicetime(), target);
  }

  // double DownstreamServiceTime = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_downstreamservicetime = this->_internal_downstreamservicetime();
  uint64_t raw_downstreamservicetime;
  memcpy(&raw_downstreamservicetime, &tmp_downstreamservicetime, sizeof(tmp_downstreamservicetime));
  if (raw_downstreamservicetime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_downstreamservicetime(), target);
  }

  // int32 ParkingUpstreamVehicles = 11;
  if (this->_internal_parkingupstreamvehicles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_parkingupstreamvehicles(), target);
  }

  // int32 ParkingDownstreamVehicles = 12;
  if (this->_internal_parkingdownstreamvehicles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_parkingdownstreamvehicles(), target);
  }

  // double UpstreamParkingTime = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upstreamparkingtime = this->_internal_upstreamparkingtime();
  uint64_t raw_upstreamparkingtime;
  memcpy(&raw_upstreamparkingtime, &tmp_upstreamparkingtime, sizeof(tmp_upstreamparkingtime));
  if (raw_upstreamparkingtime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_upstreamparkingtime(), target);
  }

  // double DownstreamParkingTime = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_downstreamparkingtime = this->_internal_downstreamparkingtime();
  uint64_t raw_downstreamparkingtime;
  memcpy(&raw_downstreamparkingtime, &tmp_downstreamparkingtime, sizeof(tmp_downstreamparkingtime));
  if (raw_downstreamparkingtime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_downstreamparkingtime(), target);
  }

  // double MaxParkingDuration = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxparkingduration = this->_internal_maxparkingduration();
  uint64_t raw_maxparkingduration;
  memcpy(&raw_maxparkingduration, &tmp_maxparkingduration, sizeof(tmp_maxparkingduration));
  if (raw_maxparkingduration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_maxparkingduration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.CraneScheduling.DataModel.Performance)
  return target;
}

size_t Performance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.CraneScheduling.DataModel.Performance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 CraneManipulations = 1;
  if (this->_internal_cranemanipulations() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cranemanipulations());
  }

  // int32 UpstreamBlocks = 2;
  if (this->_internal_upstreamblocks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_upstreamblocks());
  }

  // int32 DownstreamBlocks = 3;
  if (this->_internal_downstreamblocks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_downstreamblocks());
  }

  // int32 DeliveryErrors = 4;
  if (this->_internal_deliveryerrors() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_deliveryerrors());
  }

  // double TotalGirderDistance = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totalgirderdistance = this->_internal_totalgirderdistance();
  uint64_t raw_totalgirderdistance;
  memcpy(&raw_totalgirderdistance, &tmp_totalgirderdistance, sizeof(tmp_totalgirderdistance));
  if (raw_totalgirderdistance != 0) {
    total_size += 1 + 8;
  }

  // double TotalHoistDistance = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totalhoistdistance = this->_internal_totalhoistdistance();
  uint64_t raw_totalhoistdistance;
  memcpy(&raw_totalhoistdistance, &tmp_totalhoistdistance, sizeof(tmp_totalhoistdistance));
  if (raw_totalhoistdistance != 0) {
    total_size += 1 + 8;
  }

  // int32 ServicedUpstreamVehicles = 7;
  if (this->_internal_servicedupstreamvehicles() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_servicedupstreamvehicles());
  }

  // int32 ServicedDownstreamVehicles = 8;
  if (this->_internal_serviceddownstreamvehicles() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serviceddownstreamvehicles());
  }

  // double UpstreamServiceTime = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upstreamservicetime = this->_internal_upstreamservicetime();
  uint64_t raw_upstreamservicetime;
  memcpy(&raw_upstreamservicetime, &tmp_upstreamservicetime, sizeof(tmp_upstreamservicetime));
  if (raw_upstreamservicetime != 0) {
    total_size += 1 + 8;
  }

  // double DownstreamServiceTime = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_downstreamservicetime = this->_internal_downstreamservicetime();
  uint64_t raw_downstreamservicetime;
  memcpy(&raw_downstreamservicetime, &tmp_downstreamservicetime, sizeof(tmp_downstreamservicetime));
  if (raw_downstreamservicetime != 0) {
    total_size += 1 + 8;
  }

  // int32 ParkingUpstreamVehicles = 11;
  if (this->_internal_parkingupstreamvehicles() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parkingupstreamvehicles());
  }

  // int32 ParkingDownstreamVehicles = 12;
  if (this->_internal_parkingdownstreamvehicles() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parkingdownstreamvehicles());
  }

  // double UpstreamParkingTime = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upstreamparkingtime = this->_internal_upstreamparkingtime();
  uint64_t raw_upstreamparkingtime;
  memcpy(&raw_upstreamparkingtime, &tmp_upstreamparkingtime, sizeof(tmp_upstreamparkingtime));
  if (raw_upstreamparkingtime != 0) {
    total_size += 1 + 8;
  }

  // double DownstreamParkingTime = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_downstreamparkingtime = this->_internal_downstreamparkingtime();
  uint64_t raw_downstreamparkingtime;
  memcpy(&raw_downstreamparkingtime, &tmp_downstreamparkingtime, sizeof(tmp_downstreamparkingtime));
  if (raw_downstreamparkingtime != 0) {
    total_size += 1 + 8;
  }

  // double MaxParkingDuration = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxparkingduration = this->_internal_maxparkingduration();
  uint64_t raw_maxparkingduration;
  memcpy(&raw_maxparkingduration, &tmp_maxparkingduration, sizeof(tmp_maxparkingduration));
  if (raw_maxparkingduration != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Performance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Performance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Performance::GetClassData() const { return &_class_data_; }


void Performance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Performance*>(&to_msg);
  auto& from = static_cast<const Performance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.CraneScheduling.DataModel.Performance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cranemanipulations() != 0) {
    _this->_internal_set_cranemanipulations(from._internal_cranemanipulations());
  }
  if (from._internal_upstreamblocks() != 0) {
    _this->_internal_set_upstreamblocks(from._internal_upstreamblocks());
  }
  if (from._internal_downstreamblocks() != 0) {
    _this->_internal_set_downstreamblocks(from._internal_downstreamblocks());
  }
  if (from._internal_deliveryerrors() != 0) {
    _this->_internal_set_deliveryerrors(from._internal_deliveryerrors());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totalgirderdistance = from._internal_totalgirderdistance();
  uint64_t raw_totalgirderdistance;
  memcpy(&raw_totalgirderdistance, &tmp_totalgirderdistance, sizeof(tmp_totalgirderdistance));
  if (raw_totalgirderdistance != 0) {
    _this->_internal_set_totalgirderdistance(from._internal_totalgirderdistance());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totalhoistdistance = from._internal_totalhoistdistance();
  uint64_t raw_totalhoistdistance;
  memcpy(&raw_totalhoistdistance, &tmp_totalhoistdistance, sizeof(tmp_totalhoistdistance));
  if (raw_totalhoistdistance != 0) {
    _this->_internal_set_totalhoistdistance(from._internal_totalhoistdistance());
  }
  if (from._internal_servicedupstreamvehicles() != 0) {
    _this->_internal_set_servicedupstreamvehicles(from._internal_servicedupstreamvehicles());
  }
  if (from._internal_serviceddownstreamvehicles() != 0) {
    _this->_internal_set_serviceddownstreamvehicles(from._internal_serviceddownstreamvehicles());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upstreamservicetime = from._internal_upstreamservicetime();
  uint64_t raw_upstreamservicetime;
  memcpy(&raw_upstreamservicetime, &tmp_upstreamservicetime, sizeof(tmp_upstreamservicetime));
  if (raw_upstreamservicetime != 0) {
    _this->_internal_set_upstreamservicetime(from._internal_upstreamservicetime());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_downstreamservicetime = from._internal_downstreamservicetime();
  uint64_t raw_downstreamservicetime;
  memcpy(&raw_downstreamservicetime, &tmp_downstreamservicetime, sizeof(tmp_downstreamservicetime));
  if (raw_downstreamservicetime != 0) {
    _this->_internal_set_downstreamservicetime(from._internal_downstreamservicetime());
  }
  if (from._internal_parkingupstreamvehicles() != 0) {
    _this->_internal_set_parkingupstreamvehicles(from._internal_parkingupstreamvehicles());
  }
  if (from._internal_parkingdownstreamvehicles() != 0) {
    _this->_internal_set_parkingdownstreamvehicles(from._internal_parkingdownstreamvehicles());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upstreamparkingtime = from._internal_upstreamparkingtime();
  uint64_t raw_upstreamparkingtime;
  memcpy(&raw_upstreamparkingtime, &tmp_upstreamparkingtime, sizeof(tmp_upstreamparkingtime));
  if (raw_upstreamparkingtime != 0) {
    _this->_internal_set_upstreamparkingtime(from._internal_upstreamparkingtime());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_downstreamparkingtime = from._internal_downstreamparkingtime();
  uint64_t raw_downstreamparkingtime;
  memcpy(&raw_downstreamparkingtime, &tmp_downstreamparkingtime, sizeof(tmp_downstreamparkingtime));
  if (raw_downstreamparkingtime != 0) {
    _this->_internal_set_downstreamparkingtime(from._internal_downstreamparkingtime());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxparkingduration = from._internal_maxparkingduration();
  uint64_t raw_maxparkingduration;
  memcpy(&raw_maxparkingduration, &tmp_maxparkingduration, sizeof(tmp_maxparkingduration));
  if (raw_maxparkingduration != 0) {
    _this->_internal_set_maxparkingduration(from._internal_maxparkingduration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Performance::CopyFrom(const Performance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.CraneScheduling.DataModel.Performance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Performance::IsInitialized() const {
  return true;
}

void Performance::InternalSwap(Performance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Performance, _impl_.maxparkingduration_)
      + sizeof(Performance::_impl_.maxparkingduration_)
      - PROTOBUF_FIELD_OFFSET(Performance, _impl_.cranemanipulations_)>(
          reinterpret_cast<char*>(&_impl_.cranemanipulations_),
          reinterpret_cast<char*>(&other->_impl_.cranemanipulations_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Performance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cranescheduling_5fmodel_2eproto_getter, &descriptor_table_cranescheduling_5fmodel_2eproto_once,
      file_level_metadata_cranescheduling_5fmodel_2eproto[8]);
}

// ===================================================================

class Stack::_Internal {
 public:
};

Stack::Stack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.CraneScheduling.DataModel.Stack)
}
Stack::Stack(const Stack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Stack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bottomtotop_){from._impl_.bottomtotop_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DynStacking.CraneScheduling.DataModel.Stack)
}

inline void Stack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bottomtotop_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Stack::~Stack() {
  // @@protoc_insertion_point(destructor:DynStacking.CraneScheduling.DataModel.Stack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bottomtotop_.~RepeatedPtrField();
}

void Stack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stack::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.CraneScheduling.DataModel.Stack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bottomtotop_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DynStacking.CraneScheduling.DataModel.Block BottomToTop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bottomtotop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.CraneScheduling.DataModel.Stack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DynStacking.CraneScheduling.DataModel.Block BottomToTop = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bottomtotop_size()); i < n; i++) {
    const auto& repfield = this->_internal_bottomtotop(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.CraneScheduling.DataModel.Stack)
  return target;
}

size_t Stack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.CraneScheduling.DataModel.Stack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DynStacking.CraneScheduling.DataModel.Block BottomToTop = 1;
  total_size += 1UL * this->_internal_bottomtotop_size();
  for (const auto& msg : this->_impl_.bottomtotop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Stack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stack::GetClassData() const { return &_class_data_; }


void Stack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Stack*>(&to_msg);
  auto& from = static_cast<const Stack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.CraneScheduling.DataModel.Stack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bottomtotop_.MergeFrom(from._impl_.bottomtotop_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stack::CopyFrom(const Stack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.CraneScheduling.DataModel.Stack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stack::IsInitialized() const {
  return true;
}

void Stack::InternalSwap(Stack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bottomtotop_.InternalSwap(&other->_impl_.bottomtotop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cranescheduling_5fmodel_2eproto_getter, &descriptor_table_cranescheduling_5fmodel_2eproto_once,
      file_level_metadata_cranescheduling_5fmodel_2eproto[9]);
}

// ===================================================================

class TimeStamp::_Internal {
 public:
};

TimeStamp::TimeStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.CraneScheduling.DataModel.TimeStamp)
}
TimeStamp::TimeStamp(const TimeStamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeStamp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.milliseconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.milliseconds_ = from._impl_.milliseconds_;
  // @@protoc_insertion_point(copy_constructor:DynStacking.CraneScheduling.DataModel.TimeStamp)
}

inline void TimeStamp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.milliseconds_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimeStamp::~TimeStamp() {
  // @@protoc_insertion_point(destructor:DynStacking.CraneScheduling.DataModel.TimeStamp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeStamp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeStamp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.CraneScheduling.DataModel.TimeStamp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.milliseconds_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeStamp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 MilliSeconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeStamp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.CraneScheduling.DataModel.TimeStamp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 MilliSeconds = 1;
  if (this->_internal_milliseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_milliseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.CraneScheduling.DataModel.TimeStamp)
  return target;
}

size_t TimeStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.CraneScheduling.DataModel.TimeStamp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 MilliSeconds = 1;
  if (this->_internal_milliseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_milliseconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeStamp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeStamp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeStamp::GetClassData() const { return &_class_data_; }


void TimeStamp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeStamp*>(&to_msg);
  auto& from = static_cast<const TimeStamp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.CraneScheduling.DataModel.TimeStamp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_milliseconds() != 0) {
    _this->_internal_set_milliseconds(from._internal_milliseconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeStamp::CopyFrom(const TimeStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.CraneScheduling.DataModel.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStamp::IsInitialized() const {
  return true;
}

void TimeStamp::InternalSwap(TimeStamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.milliseconds_, other->_impl_.milliseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeStamp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cranescheduling_5fmodel_2eproto_getter, &descriptor_table_cranescheduling_5fmodel_2eproto_once,
      file_level_metadata_cranescheduling_5fmodel_2eproto[10]);
}

// ===================================================================

class World::_Internal {
 public:
  static const ::DynStacking::CraneScheduling::DataModel::TimeStamp& now(const World* msg);
  static const ::DynStacking::CraneScheduling::DataModel::CraneSchedule& craneschedule(const World* msg);
  static const ::DynStacking::CraneScheduling::DataModel::Performance& kpis(const World* msg);
};

const ::DynStacking::CraneScheduling::DataModel::TimeStamp&
World::_Internal::now(const World* msg) {
  return *msg->_impl_.now_;
}
const ::DynStacking::CraneScheduling::DataModel::CraneSchedule&
World::_Internal::craneschedule(const World* msg) {
  return *msg->_impl_.craneschedule_;
}
const ::DynStacking::CraneScheduling::DataModel::Performance&
World::_Internal::kpis(const World* msg) {
  return *msg->_impl_.kpis_;
}
World::World(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DynStacking.CraneScheduling.DataModel.World)
}
World::World(const World& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  World* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.locations_){from._impl_.locations_}
    , decltype(_impl_.cranemoves_){from._impl_.cranemoves_}
    , decltype(_impl_.cranes_){from._impl_.cranes_}
    , decltype(_impl_.moverequests_){from._impl_.moverequests_}
    , decltype(_impl_.now_){nullptr}
    , decltype(_impl_.craneschedule_){nullptr}
    , decltype(_impl_.kpis_){nullptr}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_now()) {
    _this->_impl_.now_ = new ::DynStacking::CraneScheduling::DataModel::TimeStamp(*from._impl_.now_);
  }
  if (from._internal_has_craneschedule()) {
    _this->_impl_.craneschedule_ = new ::DynStacking::CraneScheduling::DataModel::CraneSchedule(*from._impl_.craneschedule_);
  }
  if (from._internal_has_kpis()) {
    _this->_impl_.kpis_ = new ::DynStacking::CraneScheduling::DataModel::Performance(*from._impl_.kpis_);
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.CraneScheduling.DataModel.World)
}

inline void World::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.locations_){arena}
    , decltype(_impl_.cranemoves_){arena}
    , decltype(_impl_.cranes_){arena}
    , decltype(_impl_.moverequests_){arena}
    , decltype(_impl_.now_){nullptr}
    , decltype(_impl_.craneschedule_){nullptr}
    , decltype(_impl_.kpis_){nullptr}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

World::~World() {
  // @@protoc_insertion_point(destructor:DynStacking.CraneScheduling.DataModel.World)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void World::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.locations_.~RepeatedPtrField();
  _impl_.cranemoves_.~RepeatedPtrField();
  _impl_.cranes_.~RepeatedPtrField();
  _impl_.moverequests_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.now_;
  if (this != internal_default_instance()) delete _impl_.craneschedule_;
  if (this != internal_default_instance()) delete _impl_.kpis_;
}

void World::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void World::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.CraneScheduling.DataModel.World)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.locations_.Clear();
  _impl_.cranemoves_.Clear();
  _impl_.cranes_.Clear();
  _impl_.moverequests_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.now_ != nullptr) {
    delete _impl_.now_;
  }
  _impl_.now_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.craneschedule_ != nullptr) {
    delete _impl_.craneschedule_;
  }
  _impl_.craneschedule_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kpis_ != nullptr) {
    delete _impl_.kpis_;
  }
  _impl_.kpis_ = nullptr;
  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* World::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DynStacking.CraneScheduling.DataModel.TimeStamp Now = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_now(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double Width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .DynStacking.CraneScheduling.DataModel.Location Locations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .DynStacking.CraneScheduling.DataModel.CraneMove CraneMoves = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cranemoves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .DynStacking.CraneScheduling.DataModel.Crane Cranes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cranes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .DynStacking.CraneScheduling.DataModel.MoveRequest MoveRequests = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_moverequests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.CraneScheduling.DataModel.CraneSchedule CraneSchedule = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_craneschedule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DynStacking.CraneScheduling.DataModel.Performance KPIs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_kpis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* World::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.CraneScheduling.DataModel.World)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DynStacking.CraneScheduling.DataModel.TimeStamp Now = 1;
  if (this->_internal_has_now()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::now(this),
        _Internal::now(this).GetCachedSize(), target, stream);
  }

  // int32 Height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // double Width = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_width(), target);
  }

  // repeated .DynStacking.CraneScheduling.DataModel.Location Locations = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_locations_size()); i < n; i++) {
    const auto& repfield = this->_internal_locations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .DynStacking.CraneScheduling.DataModel.CraneMove CraneMoves = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cranemoves_size()); i < n; i++) {
    const auto& repfield = this->_internal_cranemoves(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .DynStacking.CraneScheduling.DataModel.Crane Cranes = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cranes_size()); i < n; i++) {
    const auto& repfield = this->_internal_cranes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .DynStacking.CraneScheduling.DataModel.MoveRequest MoveRequests = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_moverequests_size()); i < n; i++) {
    const auto& repfield = this->_internal_moverequests(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .DynStacking.CraneScheduling.DataModel.CraneSchedule CraneSchedule = 8;
  if (this->_internal_has_craneschedule()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::craneschedule(this),
        _Internal::craneschedule(this).GetCachedSize(), target, stream);
  }

  // .DynStacking.CraneScheduling.DataModel.Performance KPIs = 9;
  if (this->_internal_has_kpis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::kpis(this),
        _Internal::kpis(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.CraneScheduling.DataModel.World)
  return target;
}

size_t World::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.CraneScheduling.DataModel.World)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DynStacking.CraneScheduling.DataModel.Location Locations = 4;
  total_size += 1UL * this->_internal_locations_size();
  for (const auto& msg : this->_impl_.locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DynStacking.CraneScheduling.DataModel.CraneMove CraneMoves = 5;
  total_size += 1UL * this->_internal_cranemoves_size();
  for (const auto& msg : this->_impl_.cranemoves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DynStacking.CraneScheduling.DataModel.Crane Cranes = 6;
  total_size += 1UL * this->_internal_cranes_size();
  for (const auto& msg : this->_impl_.cranes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DynStacking.CraneScheduling.DataModel.MoveRequest MoveRequests = 7;
  total_size += 1UL * this->_internal_moverequests_size();
  for (const auto& msg : this->_impl_.moverequests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DynStacking.CraneScheduling.DataModel.TimeStamp Now = 1;
  if (this->_internal_has_now()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.now_);
  }

  // .DynStacking.CraneScheduling.DataModel.CraneSchedule CraneSchedule = 8;
  if (this->_internal_has_craneschedule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.craneschedule_);
  }

  // .DynStacking.CraneScheduling.DataModel.Performance KPIs = 9;
  if (this->_internal_has_kpis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kpis_);
  }

  // double Width = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 8;
  }

  // int32 Height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData World::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    World::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*World::GetClassData() const { return &_class_data_; }


void World::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<World*>(&to_msg);
  auto& from = static_cast<const World&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.CraneScheduling.DataModel.World)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.locations_.MergeFrom(from._impl_.locations_);
  _this->_impl_.cranemoves_.MergeFrom(from._impl_.cranemoves_);
  _this->_impl_.cranes_.MergeFrom(from._impl_.cranes_);
  _this->_impl_.moverequests_.MergeFrom(from._impl_.moverequests_);
  if (from._internal_has_now()) {
    _this->_internal_mutable_now()->::DynStacking::CraneScheduling::DataModel::TimeStamp::MergeFrom(
        from._internal_now());
  }
  if (from._internal_has_craneschedule()) {
    _this->_internal_mutable_craneschedule()->::DynStacking::CraneScheduling::DataModel::CraneSchedule::MergeFrom(
        from._internal_craneschedule());
  }
  if (from._internal_has_kpis()) {
    _this->_internal_mutable_kpis()->::DynStacking::CraneScheduling::DataModel::Performance::MergeFrom(
        from._internal_kpis());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void World::CopyFrom(const World& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.CraneScheduling.DataModel.World)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World::IsInitialized() const {
  return true;
}

void World::InternalSwap(World* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.locations_.InternalSwap(&other->_impl_.locations_);
  _impl_.cranemoves_.InternalSwap(&other->_impl_.cranemoves_);
  _impl_.cranes_.InternalSwap(&other->_impl_.cranes_);
  _impl_.moverequests_.InternalSwap(&other->_impl_.moverequests_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(World, _impl_.height_)
      + sizeof(World::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(World, _impl_.now_)>(
          reinterpret_cast<char*>(&_impl_.now_),
          reinterpret_cast<char*>(&other->_impl_.now_));
}

::PROTOBUF_NAMESPACE_ID::Metadata World::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cranescheduling_5fmodel_2eproto_getter, &descriptor_table_cranescheduling_5fmodel_2eproto_once,
      file_level_metadata_cranescheduling_5fmodel_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DataModel
}  // namespace CraneScheduling
}  // namespace DynStacking
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DynStacking::CraneScheduling::DataModel::Block*
Arena::CreateMaybeMessage< ::DynStacking::CraneScheduling::DataModel::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::CraneScheduling::DataModel::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::CraneScheduling::DataModel::Crane*
Arena::CreateMaybeMessage< ::DynStacking::CraneScheduling::DataModel::Crane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::CraneScheduling::DataModel::Crane >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::CraneScheduling::DataModel::CraneMove*
Arena::CreateMaybeMessage< ::DynStacking::CraneScheduling::DataModel::CraneMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::CraneScheduling::DataModel::CraneMove >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::CraneScheduling::DataModel::CraneSchedule*
Arena::CreateMaybeMessage< ::DynStacking::CraneScheduling::DataModel::CraneSchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::CraneScheduling::DataModel::CraneSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity*
Arena::CreateMaybeMessage< ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::CraneScheduling::DataModel::CraneScheduleActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::CraneScheduling::DataModel::CraneSchedulingSolution*
Arena::CreateMaybeMessage< ::DynStacking::CraneScheduling::DataModel::CraneSchedulingSolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::CraneScheduling::DataModel::CraneSchedulingSolution >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::CraneScheduling::DataModel::Location*
Arena::CreateMaybeMessage< ::DynStacking::CraneScheduling::DataModel::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::CraneScheduling::DataModel::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::CraneScheduling::DataModel::MoveRequest*
Arena::CreateMaybeMessage< ::DynStacking::CraneScheduling::DataModel::MoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::CraneScheduling::DataModel::MoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::CraneScheduling::DataModel::Performance*
Arena::CreateMaybeMessage< ::DynStacking::CraneScheduling::DataModel::Performance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::CraneScheduling::DataModel::Performance >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::CraneScheduling::DataModel::Stack*
Arena::CreateMaybeMessage< ::DynStacking::CraneScheduling::DataModel::Stack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::CraneScheduling::DataModel::Stack >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::CraneScheduling::DataModel::TimeStamp*
Arena::CreateMaybeMessage< ::DynStacking::CraneScheduling::DataModel::TimeStamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::CraneScheduling::DataModel::TimeStamp >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::CraneScheduling::DataModel::World*
Arena::CreateMaybeMessage< ::DynStacking::CraneScheduling::DataModel::World >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::CraneScheduling::DataModel::World >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
